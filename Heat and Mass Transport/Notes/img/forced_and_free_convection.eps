%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A91u7j6y2_1x3uukl_l1c.tmp.pdf
%%Creator: Adobe Acrobat 20.5.0
%%For: lbing
%%CreationDate: 21/07/2023, 10:05:24
%%BoundingBox: 0 0 327 126
%%HiResBoundingBox: 0 0 326.9233 125.6726
%%CropBox: 0 0 326.9233 125.6726
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c018 91.98c2f96, 2021/06/15-20:39:32        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2023-07-21T10:04:05+01:00"
   xmp:CreateDate="2023-07-21T10:04:05+01:00"
   xmp:MetadataDate="2023-07-21T10:04:05+01:00"
   xmp:CreatorTool="Adobe Acrobat Pro 2020 20.5.30467"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:6c12b02a-1c13-4ce7-bf15-6afdf3465071"
   xmpMM:InstanceID="uuid:8c87b337-e458-4da2-8904-0ee8497beb2a"
   pdf:Producer="Adobe Acrobat Pro 2020 20.5.30467"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/Name (PANTONE 193 CV)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/ColorLookup [
[0 0 0 0][0 .00390619 .00390619 0][0 .00781238 .00392157 0][0 .0117186 .007797 0]
[0 .0156248 .0117032 0][0 .019531 .0117647 .00384468][0 .0196078 .015594 .00392157][0 .0234218 .0195002 .00392157]
[0 .027328 .0196078 .00392157][0 .0312341 .023391 .00392157][0 .0351403 .0272972 .00392157][0 .0390465 .027451 .00392157]
[0 .0429527 .031188 .00392157][0 .0468589 .0313726 .00764321][0 .0507651 .0350788 .00784314][0 .0546713 .038985 .00784314]
[0 .0585775 .0392157 .00784314][0 .0624837 .0428758 .00784314][0 .0627451 .046782 .00784314][0 .0663745 .0470588 .00784314]
[0 .0702807 .0506728 .00784314][0 .0741869 .054579 .00784314][0 .078093 .054902 .0114264][0 .0819992 .0584698 .0117647]
[0 .0859054 .062376 .0117647][0 .0898116 .0627451 .0117647][0 .0937178 .0662668 .0117647][0 .097624 .070173 .0117647]
[0 .10153 .0705882 .0117647][0 .101961 .0740638 .0117647][0 .105421 .07797 .0117647][0 .109327 .0784314 .0152095]
[0 .113233 .0818608 .0156863][0 .11714 .085767 .0156863][0 .121046 .0862745 .0156863][0 .124952 .0896578 .0156863]
[0 .128858 .0901961 .0156863][0 .132764 .0935486 .0156863][0 .136671 .0974548 .0156863][0 .140577 .0980392 .0190081]
[0 .144483 .101346 .0196078][0 .145098 .105252 .0196078][0 .148374 .105882 .0196078][0 .15228 .109143 .0196078]
[0 .156186 .113049 .0196078][0 .160092 .113725 .0196078][0 .163998 .11694 .0196078][0 .167905 .120846 .0196078]
[0 .171811 .121569 .0227912][0 .175717 .124737 .0235294][0 .179623 .128643 .0235294][0 .183529 .129412 .0235294]
[0 .187436 .132534 .0235294][0 .188235 .13644 .0235294][0 .191326 .137255 .0235294][0 .195233 .140331 .0235294]
[0 .199139 .144237 .0235294][0 .203045 .145098 .0265744][0 .206951 .148128 .027451][0 .210857 .152034 .027451]
[0 .214764 .152941 .027451][0 .21867 .155925 .027451][0 .222576 .156863 .027451][0 .226482 .159815 .027451]
[0 .227451 .163722 .027451][0 .230373 .164706 .0303729][0 .234279 .167612 .0313726][0 .238185 .171519 .0313726]
[0 .242092 .172549 .0313726][0 .245998 .175409 .0313726][0 .249904 .179316 .0313726][0 .25381 .180392 .0313726]
[0 .257716 .183206 .0313726][0 .261622 .187113 .0313726][0 .265529 .188235 .0341561][0 .269435 .191003 .0352941]
[0 .270588 .19491 .0352941][0 .273326 .196078 .0352941][0 .277232 .1988 .0352941][0 .281138 .202707 .0352941]
[0 .285044 .203922 .0352941][0 .28895 .206597 .0352941][0 .292857 .210504 .0352941][0 .296763 .211765 .0379393]
[0 .300669 .214394 .0392157][0 .304575 .215686 .0392157][0 .308481 .218285 .0392157][0 .309804 .222191 .0392157]
[0 .312372 .223529 .0392157][0 .316278 .226082 .0392157][0 .320185 .229988 .0392157][0 .324091 .231373 .0417378]
[0 .327997 .233879 .0431373][0 .331903 .237785 .0431373][0 .335809 .239216 .0431373][0 .339716 .241676 .0431373]
[0 .343622 .245582 .0431373][0 .347528 .247059 .0431373][0 .351434 .249473 .0431373][0 .352941 .253379 .0431373]
[0 .355325 .254902 .0455209][0 .359231 .25727 .0470588][0 .363137 .261176 .0470588][0 .367043 .262745 .0470588]
[0 .37095 .265067 .0470588][0 .374856 .268973 .0470588][0 .378762 .270588 .0470588][0 .382668 .272864 .0470588]
[0 .386574 .27451 .0470588][0 .390481 .276755 .0493041][0 .392157 .280661 .0509804][0 .394371 .282353 .0509804]
[0 .398278 .284552 .0509804][0 .402184 .288458 .0509804][0 .40609 .290196 .0509804][0 .409996 .292349 .0509804]
[0 .413902 .296255 .0509804][0 .417809 .298039 .0531026][0 .421715 .300146 .054902][0 .425621 .304052 .054902]
[0 .429527 .305882 .054902][0 .433433 .307943 .054902][0 .435294 .311849 .054902][0 .437324 .313726 .054902]
[0 .44123 .31574 .054902][0 .445136 .319646 .054902][0 .449043 .321569 .0568858][0 .452949 .323537 .0588235]
[0 .456855 .327443 .0588235][0 .460761 .329412 .0588235][0 .464667 .331334 .0588235][0 .468574 .333333 .0588235]
[0 .47248 .335225 .0588235][0 .476386 .339131 .0588235][0 .478431 .341176 .0588235][0 .480277 .343022 .060669]
[0 .484183 .346928 .0627451][0 .488089 .34902 .0627451][0 .491995 .350819 .0627451][0 .495902 .354725 .0627451]
[0 .499808 .356863 .0627451][0 .503714 .358616 .0627451][0 .50762 .362522 .0627451][0 .511526 .364706 .0644675]
[0 .515433 .366413 .0666667][0 .517647 .370319 .0666667][0 .519323 .372549 .0666667][0 .52323 .37421 .0666667]
[0 .527136 .378116 .0666667][0 .531042 .380392 .0666667][0 .534948 .382007 .0666667][0 .538854 .385913 .0666667]
[0 .54276 .388235 .0682507][0 .546667 .389804 .0705882][0 .550573 .392157 .0705882][0 .554479 .393695 .0705882]
[0 .558385 .397601 .0705882][0 .560784 .4 .0705882][0 .562276 .401492 .0705882][0 .566182 .405398 .0705882]
[0 .570088 .407843 .0705882][0 .573995 .409289 .0720339][0 .577901 .413195 .0745098][0 .581807 .415686 .0745098]
[0 .585713 .417086 .0745098][0 .589619 .420992 .0745098][0 .593526 .423529 .0745098][0 .597432 .424883 .0745098]
[0 .6 .428789 .0745098][0 .601323 .431373 .0758324][0 .605229 .43268 .0784314][0 .609135 .436586 .0784314]
[0 .613041 .439216 .0784314][0 .616947 .440477 .0784314][0 .620854 .444383 .0784314][0 .62476 .447059 .0784314]
[0 .628666 .448274 .0784314][0 .632572 .45218 .0784314][0 .636478 .454902 .0796156][0 .640384 .456071 .0823529]
[0 .643137 .458824 .0823529][0 .644275 .459962 .0823529][0 .648181 .463868 .0823529][0 .652088 .466667 .0823529]
[0 .655994 .467759 .0823529][0 .6599 .471665 .0823529][0 .663806 .47451 .0823529][0 .667712 .475556 .0833987]
[0 .671619 .479462 .0862745][0 .675525 .482353 .0862745][0 .679431 .483353 .0862745][0 .682353 .487259 .0862745]
[0 .683322 .490196 .0862745][0 .687228 .49115 .0862745][0 .691134 .495056 .0862745][0 .69504 .498039 .0871972]
[0 .698947 .498947 .0901961][0 .702853 .502853 .0901961][0 .706759 .505882 .0901961][0 .710665 .506744 .0901961]
[0 .714571 .51065 .0901961][0 .718477 .513726 .0901961][0 .722384 .514541 .0901961][0 .72549 .517647 .0901961]
[0 .726274 .518431 .0909804][0 .730181 .522338 .0941176][0 .734087 .52549 .0941176][0 .737993 .526228 .0941176]
[0 .741899 .530135 .0941176][0 .745805 .533333 .0941176][0 .749712 .534025 .0941176][0 .753618 .537932 .0941176]
[0 .757524 .541176 .0941176][0 .76143 .541822 .0947635][0 .765336 .545729 .0980392][0 .768627 .54902 .0980392]
[0 .769227 .549619 .0980392][0 .773133 .553526 .0980392][0 .77704 .556863 .0980392][0 .780946 .557416 .0980392]
[0 .784852 .561323 .0980392][0 .788758 .564706 .0985621][0 .792664 .565213 .101961][0 .796571 .56912 .101961]
[0 .800477 .572549 .101961][0 .804383 .57301 .101961][0 .807843 .576471 .101961][0 .808274 .576901 .101961]
[0 .81218 .580807 .101961][0 .816086 .584314 .101961][0 .819992 .584698 .102345][0 .823898 .588604 .105882]
[0 .827805 .592157 .105882][0 .831711 .592495 .105882][0 .835617 .596401 .105882][0 .839523 .6 .105882]
[0 .843429 .600292 .105882][0 .847336 .604198 .105882][0 .85098 .607843 .105882][0 .851226 .608089 .106128]
[0 .855133 .611995 .109804][0 .859039 .615686 .109804][0 .862945 .615886 .109804][0 .866851 .619792 .109804]
[0 .870757 .623529 .109804][0 .874664 .623683 .109804][0 .87857 .627589 .109804][0 .882476 .631373 .109927]
[0 .886382 .63148 .113725][0 .890196 .635294 .113725][0 .890273 .635371 .113725][0 .894179 .639277 .113725]
[0 .898085 .643137 .113725][0 .901992 .643168 .113725][0 .905898 .647074 .113725][0 .909804 .65098 .113725]
]
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -125.673 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 125.673 li
326.923 125.673 li
326.923 0 li
cp
clp
3 setflat
249.454 105.102 mo
253.977 105.45 251.823 106.145 255.271 106.319 cv
255.485 106.319 258.718 105.971 260.226 106.493 cv
262.808 107.385 261.733 108.926 263.026 110.665 cv
263.673 111.534 262.595 112.229 262.38 112.924 cv
261.733 114.141 263.026 115.358 262.595 116.749 cv
262.163 117.618 260.872 117.618 260.44 118.313 cv
259.579 119.182 258.7 119.777 257.64 120.399 cv
255.271 121.79 253.548 120.242 251.177 120.573 cv
249.606 120.792 248.573 120.911 246.653 120.92 cv
243.493 120.937 243.651 120.664 242.128 119.53 cv
241.126 118.784 238.251 118.835 237.605 117.27 cv
237.173 116.227 237.173 115.01 237.605 113.794 cv
237.605 113.62 238.034 113.446 238.034 113.272 cv
238.897 112.055 237.173 111.534 237.819 110.317 cv
238.251 109.448 239.759 109.1 241.052 108.752 cv
242.128 108.231 242.774 106.145 243.636 105.797 cv
245.144 105.276 248.376 106.667 249.454 105.102 cv
false sop
1 /0 /CSD get_res sepcs
.25 sep
f
1 setflat
3 setflat
.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
249.454 105.102 mo
253.977 105.45 251.823 106.145 255.271 106.319 cv
255.485 106.319 258.718 105.971 260.226 106.493 cv
262.808 107.385 261.733 108.926 263.026 110.665 cv
263.673 111.534 262.595 112.229 262.38 112.924 cv
261.733 114.141 263.026 115.358 262.595 116.749 cv
262.163 117.618 260.872 117.618 260.44 118.313 cv
259.579 119.182 258.7 119.777 257.64 120.399 cv
255.271 121.79 253.548 120.242 251.177 120.573 cv
249.606 120.792 248.573 120.911 246.653 120.92 cv
243.493 120.937 243.651 120.664 242.128 119.53 cv
241.126 118.784 238.251 118.835 237.605 117.27 cv
237.173 116.227 237.173 115.01 237.605 113.794 cv
237.605 113.62 238.034 113.446 238.034 113.272 cv
238.897 112.055 237.173 111.534 237.819 110.317 cv
238.251 109.448 239.759 109.1 241.052 108.752 cv
242.128 108.231 242.774 106.145 243.636 105.797 cv
245.144 105.276 248.376 106.667 249.454 105.102 cv
cp
true sop
1 /0 /CSD get_res sepcs
.25 sep
@
1 setflat
3 setflat
243.909 106.098 mo
245.355 105.597 248.46 106.932 249.493 105.43 cv
253.837 105.764 251.768 106.432 255.079 106.599 cv
255.286 106.599 258.388 106.265 259.837 106.765 cv
262.315 107.623 261.284 109.102 262.523 110.771 cv
263.146 111.605 262.109 112.273 261.905 112.94 cv
261.284 114.108 262.523 115.277 262.109 116.612 cv
261.698 117.446 260.456 117.446 260.042 118.114 cv
259.216 118.948 258.372 119.519 257.355 120.116 cv
255.079 121.451 253.424 119.966 251.148 120.283 cv
249.642 120.493 248.648 120.607 246.806 120.617 cv
243.772 120.632 243.923 120.371 242.462 119.282 cv
241.501 118.566 238.738 118.615 238.118 117.112 cv
237.704 116.111 237.704 114.943 238.118 113.775 cv
238.118 113.608 238.531 113.441 238.531 113.274 cv
239.358 112.106 237.704 111.605 238.324 110.437 cv
238.738 109.603 240.187 109.269 241.427 108.935 cv
242.462 108.434 243.083 106.432 243.909 106.098 cv
false sop
1 /0 /CSD get_res sepcs
.236 sep
f
1 setflat
3 setflat
244.183 106.398 mo
245.571 105.919 248.544 107.198 249.534 105.758 cv
253.698 106.079 251.716 106.718 254.888 106.878 cv
255.085 106.878 258.059 106.558 259.446 107.038 cv
261.823 107.86 260.835 109.278 262.024 110.877 cv
262.618 111.676 261.628 112.316 261.429 112.957 cv
260.835 114.076 262.024 115.195 261.628 116.475 cv
261.231 117.275 260.042 117.275 259.646 117.915 cv
258.852 118.714 258.044 119.261 257.067 119.834 cv
254.888 121.113 253.304 119.69 251.122 119.994 cv
249.677 120.195 248.725 120.304 246.958 120.314 cv
244.052 120.329 244.196 120.078 242.796 119.034 cv
241.874 118.348 239.228 118.394 238.632 116.955 cv
238.235 115.995 238.235 114.876 238.632 113.756 cv
238.632 113.596 239.028 113.436 239.028 113.276 cv
239.821 112.157 238.235 111.676 238.831 110.557 cv
239.228 109.757 240.614 109.438 241.804 109.118 cv
242.796 108.638 243.39 106.718 244.183 106.398 cv
1 /0 /CSD get_res sepcs
.223 sep
f
1 setflat
3 setflat
244.456 106.699 mo
245.784 106.24 248.628 107.464 249.577 106.087 cv
253.557 106.393 251.663 107.005 254.695 107.158 cv
254.885 107.158 257.729 106.852 259.057 107.311 cv
261.331 108.097 260.385 109.453 261.522 110.983 cv
262.092 111.748 261.143 112.36 260.953 112.972 cv
260.385 114.044 261.522 115.114 261.143 116.338 cv
260.764 117.103 259.626 117.103 259.247 117.715 cv
258.488 118.48 257.716 119.003 256.781 119.551 cv
254.695 120.775 253.181 119.414 251.092 119.704 cv
249.712 119.897 248.802 120.002 247.109 120.01 cv
244.331 120.025 244.47 119.785 243.128 118.786 cv
242.246 118.13 239.716 118.174 239.146 116.797 cv
238.767 115.879 238.767 114.808 239.146 113.737 cv
239.146 113.585 239.526 113.431 239.526 113.278 cv
240.284 112.207 238.767 111.748 239.337 110.677 cv
239.716 109.912 241.042 109.606 242.181 109.3 cv
243.128 108.841 243.698 107.005 244.456 106.699 cv
1 /0 /CSD get_res sepcs
.209 sep
f
1 setflat
3 setflat
244.73 107 mo
245.997 106.561 248.712 107.73 249.618 106.416 cv
253.419 106.708 251.608 107.292 254.505 107.438 cv
254.687 107.438 257.401 107.145 258.669 107.584 cv
260.839 108.334 259.937 109.628 261.022 111.089 cv
261.565 111.82 260.661 112.404 260.48 112.988 cv
259.937 114.01 261.022 115.033 260.661 116.202 cv
260.298 116.932 259.212 116.932 258.85 117.516 cv
258.126 118.247 257.388 118.746 256.497 119.269 cv
254.505 120.437 253.058 119.137 251.065 119.415 cv
249.747 119.599 248.878 119.699 247.265 119.707 cv
244.61 119.72 244.741 119.492 243.462 118.539 cv
242.62 117.912 240.204 117.954 239.661 116.639 cv
239.298 115.763 239.298 114.741 239.661 113.718 cv
239.661 113.572 240.022 113.426 240.022 113.28 cv
240.747 112.257 239.298 111.82 239.841 110.797 cv
240.204 110.067 241.472 109.775 242.558 109.482 cv
243.462 109.044 244.005 107.292 244.73 107 cv
1 /0 /CSD get_res sepcs
.195 sep
f
1 setflat
3 setflat
245.003 107.3 mo
246.21 106.882 248.796 107.996 249.659 106.744 cv
253.28 107.022 251.556 107.578 254.313 107.717 cv
254.487 107.717 257.073 107.439 258.28 107.856 cv
260.346 108.571 259.487 109.804 260.521 111.195 cv
261.038 111.891 260.177 112.447 260.005 113.004 cv
259.487 113.978 260.521 114.952 260.177 116.065 cv
259.831 116.76 258.798 116.76 258.452 117.317 cv
257.763 118.012 257.06 118.489 256.21 118.986 cv
254.313 120.099 252.936 118.861 251.038 119.126 cv
249.781 119.3 248.953 119.396 247.417 119.404 cv
244.888 119.417 245.014 119.198 243.796 118.291 cv
242.995 117.694 240.691 117.734 240.174 116.482 cv
239.828 115.647 239.828 114.673 240.174 113.7 cv
240.174 113.561 240.521 113.421 240.521 113.282 cv
241.21 112.308 239.828 111.891 240.346 110.917 cv
240.691 110.221 241.898 109.943 242.932 109.665 cv
243.796 109.248 244.313 107.578 245.003 107.3 cv
1 /0 /CSD get_res sepcs
.182 sep
f
1 setflat
3 setflat
245.276 107.6 mo
246.423 107.204 248.88 108.261 249.7 107.072 cv
253.14 107.336 251.501 107.865 254.122 107.997 cv
254.286 107.997 256.743 107.732 257.892 108.129 cv
259.855 108.808 259.038 109.98 260.021 111.301 cv
260.513 111.962 259.692 112.491 259.528 113.02 cv
259.038 113.945 260.021 114.871 259.692 115.928 cv
259.364 116.588 258.382 116.588 258.054 117.118 cv
257.398 117.778 256.73 118.231 255.924 118.704 cv
254.122 119.761 252.813 118.585 251.01 118.835 cv
249.816 119.002 249.03 119.092 247.569 119.1 cv
245.167 119.113 245.286 118.905 244.13 118.043 cv
243.368 117.476 241.181 117.514 240.688 116.325 cv
240.36 115.531 240.36 114.606 240.688 113.681 cv
240.688 113.548 241.017 113.417 241.017 113.284 cv
241.671 112.359 240.36 111.962 240.852 111.037 cv
241.181 110.377 242.327 110.112 243.31 109.847 cv
244.13 109.451 244.62 107.865 245.276 107.6 cv
1 /0 /CSD get_res sepcs
.168 sep
f
1 setflat
3 setflat
245.55 107.901 mo
246.636 107.525 248.964 108.527 249.741 107.4 cv
253.001 107.65 251.448 108.151 253.931 108.277 cv
254.087 108.277 256.415 108.026 257.501 108.402 cv
259.362 109.045 258.589 110.155 259.521 111.408 cv
259.985 112.034 259.21 112.535 259.054 113.036 cv
258.589 113.913 259.521 114.789 259.21 115.791 cv
258.899 116.418 257.968 116.418 257.657 116.919 cv
257.036 117.544 256.403 117.973 255.64 118.421 cv
253.931 119.423 252.69 118.308 250.981 118.547 cv
249.85 118.704 249.106 118.79 247.722 118.797 cv
245.446 118.809 245.56 118.612 244.462 117.795 cv
243.741 117.257 241.669 117.294 241.202 116.167 cv
240.892 115.416 240.892 114.539 241.202 113.662 cv
241.202 113.537 241.513 113.412 241.513 113.286 cv
242.134 112.41 240.892 112.034 241.358 111.157 cv
241.669 110.531 242.755 110.281 243.687 110.03 cv
244.462 109.654 244.929 108.151 245.55 107.901 cv
1 /0 /CSD get_res sepcs
.155 sep
f
1 setflat
3 setflat
245.823 108.201 mo
246.849 107.846 249.048 108.793 249.782 107.728 cv
252.859 107.965 251.394 108.438 253.738 108.556 cv
253.888 108.556 256.087 108.32 257.112 108.674 cv
258.87 109.282 258.139 110.331 259.019 111.514 cv
259.458 112.105 258.726 112.579 258.579 113.052 cv
258.139 113.879 259.019 114.708 258.726 115.654 cv
258.432 116.246 257.552 116.246 257.259 116.719 cv
256.673 117.311 256.075 117.715 255.352 118.139 cv
253.738 119.085 252.566 118.032 250.954 118.257 cv
249.885 118.406 249.182 118.487 247.876 118.494 cv
245.725 118.504 245.833 118.319 244.796 117.547 cv
244.113 117.04 242.157 117.074 241.717 116.009 cv
241.424 115.299 241.424 114.471 241.717 113.643 cv
241.717 113.525 242.01 113.407 242.01 113.289 cv
242.596 112.46 241.424 112.105 241.863 111.277 cv
242.157 110.686 243.182 110.449 244.063 110.212 cv
244.796 109.858 245.234 108.438 245.823 108.201 cv
1 /0 /CSD get_res sepcs
.141 sep
f
1 setflat
3 setflat
246.097 108.502 mo
247.062 108.168 249.132 109.059 249.823 108.056 cv
252.722 108.279 251.341 108.725 253.55 108.836 cv
253.687 108.836 255.757 108.613 256.724 108.947 cv
258.378 109.519 257.69 110.506 258.519 111.62 cv
258.933 112.176 258.241 112.622 258.105 113.068 cv
257.69 113.847 258.519 114.627 258.241 115.518 cv
257.966 116.074 257.138 116.074 256.862 116.52 cv
256.31 117.077 255.747 117.458 255.067 117.856 cv
253.55 118.747 252.446 117.755 250.927 117.967 cv
249.921 118.108 249.259 118.184 248.028 118.19 cv
246.005 118.201 246.105 118.026 245.13 117.299 cv
244.487 116.822 242.646 116.854 242.231 115.852 cv
241.956 115.183 241.956 114.404 242.231 113.625 cv
242.231 113.513 242.507 113.402 242.507 113.291 cv
243.059 112.511 241.956 112.176 242.37 111.397 cv
242.646 110.84 243.612 110.618 244.438 110.395 cv
245.13 110.061 245.544 108.725 246.097 108.502 cv
1 /0 /CSD get_res sepcs
.127 sep
f
1 setflat
3 setflat
246.367 108.802 mo
247.273 108.489 249.215 109.325 249.863 108.384 cv
252.581 108.593 251.285 109.011 253.357 109.116 cv
253.486 109.116 255.428 108.907 256.335 109.22 cv
257.885 109.756 257.24 110.682 258.016 111.726 cv
258.404 112.249 257.758 112.666 257.628 113.084 cv
257.24 113.814 258.016 114.545 257.758 115.38 cv
257.499 115.903 256.721 115.903 256.464 116.321 cv
255.945 116.842 255.418 117.2 254.781 117.574 cv
253.357 118.409 252.322 117.48 250.898 117.678 cv
249.956 117.809 249.335 117.881 248.18 117.887 cv
246.283 117.897 246.378 117.733 245.464 117.051 cv
244.861 116.604 243.133 116.634 242.745 115.694 cv
242.486 115.068 242.486 114.336 242.745 113.606 cv
242.745 113.502 243.004 113.397 243.004 113.293 cv
243.521 112.561 242.486 112.249 242.874 111.517 cv
243.133 110.995 244.039 110.787 244.814 110.578 cv
245.464 110.264 245.849 109.011 246.367 108.802 cv
1 /0 /CSD get_res sepcs
.114 sep
f
1 setflat
3 setflat
249.905 108.712 mo
252.441 108.908 251.233 109.297 253.167 109.395 cv
253.288 109.395 255.099 109.2 255.945 109.493 cv
257.394 109.994 256.79 110.857 257.517 111.833 cv
257.878 112.32 257.273 112.71 257.152 113.099 cv
256.79 113.782 257.517 114.464 257.273 115.244 cv
257.032 115.731 256.307 115.731 256.065 116.122 cv
255.583 116.609 255.089 116.943 254.495 117.291 cv
253.167 118.071 252.2 117.204 250.87 117.388 cv
249.991 117.511 249.411 117.578 248.333 117.584 cv
246.563 117.592 246.651 117.44 245.796 116.804 cv
245.234 116.385 243.622 116.414 243.259 115.537 cv
243.018 114.952 243.018 114.269 243.259 113.586 cv
243.259 113.49 243.501 113.392 243.501 113.294 cv
243.983 112.612 243.018 112.32 243.38 111.637 cv
243.622 111.15 244.467 110.955 245.191 110.76 cv
245.796 110.467 246.159 109.297 246.642 109.103 cv
247.487 108.811 249.299 109.59 249.905 108.712 cv
1 /0 /CSD get_res sepcs
.1 sep
f
1 setflat
3 setflat
64.9655 49.6958 mo
60.6455 51.1958 li
61.3655 49.6958 li
60.6455 48.1958 li
64.9655 49.6958 li
cp
true sop
/1 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
64.9655 49.6958 mo
60.6455 51.1958 li
61.3655 49.6958 li
60.6455 48.1958 li
64.9655 49.6958 li
cp
@
1 setflat
3 setflat
.75 lw
46.8655 49.6958 mo
61.3655 49.6958 li
@
1 setflat
3 setflat
.5 lw
33.0745 73.6958 mo
41.0745 73.6958 li
8.44951 73.6958 mo
16.4495 73.6958 li
@
1 setflat
3 setflat
.75 lw
266.329 121.646 mo
266.329 107.146 li
@
1 setflat
3 setflat
266.329 103.545 mo
267.829 107.866 li
266.329 107.146 li
264.829 107.866 li
266.329 103.545 li
cp
f
.5 lw
266.329 103.545 mo
267.829 107.866 li
266.329 107.146 li
264.829 107.866 li
266.329 103.545 li
cp
@
1 setflat
3 setflat
.75 lw
284.329 121.646 mo
284.329 107.146 li
@
1 setflat
3 setflat
284.329 103.545 mo
285.829 107.866 li
284.329 107.146 li
282.829 107.866 li
284.329 103.545 li
cp
f
.5 lw
284.329 103.545 mo
285.829 107.866 li
284.329 107.146 li
282.829 107.866 li
284.329 103.545 li
cp
@
1 setflat
3 setflat
.75 lw
302.329 121.646 mo
302.329 107.146 li
@
1 setflat
3 setflat
302.329 103.545 mo
303.829 107.866 li
302.329 107.146 li
300.829 107.866 li
302.329 103.545 li
cp
f
.5 lw
302.329 103.545 mo
303.829 107.866 li
302.329 107.146 li
300.829 107.866 li
302.329 103.545 li
cp
@
1 setflat
3 setflat
.75 lw
266.329 25.6458 mo
266.329 11.1458 li
@
1 setflat
3 setflat
266.329 7.5448 mo
267.829 11.8658 li
266.329 11.1458 li
264.829 11.8658 li
266.329 7.5448 li
cp
f
.5 lw
266.329 7.5448 mo
267.829 11.8658 li
266.329 11.1458 li
264.829 11.8658 li
266.329 7.5448 li
cp
@
1 setflat
3 setflat
.75 lw
284.329 25.6458 mo
284.329 11.1458 li
@
1 setflat
3 setflat
284.329 7.5448 mo
285.829 11.8658 li
284.329 11.1458 li
282.829 11.8658 li
284.329 7.5448 li
cp
f
.5 lw
284.329 7.5448 mo
285.829 11.8658 li
284.329 11.1458 li
282.829 11.8658 li
284.329 7.5448 li
cp
@
1 setflat
3 setflat
.75 lw
302.329 25.6458 mo
302.329 11.1458 li
@
1 setflat
3 setflat
302.329 7.5448 mo
303.829 11.8658 li
302.329 11.1458 li
300.829 11.8658 li
302.329 7.5448 li
cp
f
.5 lw
302.329 7.5448 mo
303.829 11.8658 li
302.329 11.1458 li
300.829 11.8658 li
302.329 7.5448 li
cp
@
1 setflat
3 setflat
84.5325 60.6958 mo
159.199 60.6958 li
@
1 setflat
3 setflat
91.8675 60.6958 mo
97.8395 60.6958 li
97.8395 51.9458 li
91.8675 51.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
91.8675 51.9458 mo
97.8395 51.9458 li
97.8395 60.6958 li
91.8675 60.6958 li
cp
97.8385 51.9458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
117.539 36.1518 mo
116.782 40.6618 li
115.811 39.3098 li
114.149 39.2218 li
117.539 36.1518 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
117.539 36.1518 mo
116.782 40.6618 li
115.811 39.3098 li
114.149 39.2218 li
117.539 36.1518 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
314.526 56.0518 mo
311.349 59.3408 li
311.313 57.6778 li
309.995 56.6648 li
314.526 56.0518 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
314.526 56.0518 mo
311.349 59.3408 li
311.313 57.6778 li
309.995 56.6648 li
314.526 56.0518 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
105.628 60.6958 mo
111.6 60.6958 li
111.6 51.9458 li
105.628 51.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
105.628 51.9458 mo
111.6 51.9458 li
111.6 60.6958 li
105.628 60.6958 li
cp
111.6 51.9458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
119.388 60.6958 mo
125.36 60.6958 li
125.36 51.9458 li
119.388 51.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
119.388 51.9458 mo
125.36 51.9458 li
125.36 60.6958 li
119.388 60.6958 li
cp
125.361 51.9458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
133.15 60.6958 mo
139.122 60.6958 li
139.122 51.9458 li
133.15 51.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
133.15 51.9458 mo
139.122 51.9458 li
139.122 60.6958 li
133.15 60.6958 li
cp
139.122 51.9458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
146.911 60.6958 mo
152.883 60.6958 li
152.883 51.9458 li
146.911 51.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
146.911 51.9458 mo
152.883 51.9458 li
152.883 60.6958 li
146.911 60.6958 li
cp
152.882 51.9458 mo
cp
84.5325 79.1958 mo
159.198 79.1958 li
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
91.8675 79.1958 mo
97.8395 79.1958 li
97.8395 70.4458 li
91.8675 70.4458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
91.8675 70.4458 mo
97.8395 70.4458 li
97.8395 79.1958 li
91.8675 79.1958 li
cp
97.8385 70.4458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
105.628 79.1958 mo
111.6 79.1958 li
111.6 70.4458 li
105.628 70.4458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
105.628 70.4458 mo
111.6 70.4458 li
111.6 79.1958 li
105.628 79.1958 li
cp
111.6 70.4458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
119.388 79.1958 mo
125.36 79.1958 li
125.36 70.4458 li
119.388 70.4458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
119.388 70.4458 mo
125.36 70.4458 li
125.36 79.1958 li
119.388 79.1958 li
cp
125.361 70.4458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
133.15 79.1958 mo
139.122 79.1958 li
139.122 70.4458 li
133.15 70.4458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
133.15 70.4458 mo
139.122 70.4458 li
139.122 79.1958 li
133.15 79.1958 li
cp
139.122 70.4458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
146.911 79.1958 mo
152.883 79.1958 li
152.883 70.4458 li
146.911 70.4458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
146.911 70.4458 mo
152.883 70.4458 li
152.883 79.1958 li
146.911 79.1958 li
cp
152.882 70.4458 mo
cp
84.5325 97.6958 mo
159.198 97.6958 li
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
91.8675 97.6958 mo
97.8395 97.6958 li
97.8395 88.9458 li
91.8675 88.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
91.8675 88.9458 mo
97.8395 88.9458 li
97.8395 97.6958 li
91.8675 97.6958 li
cp
97.8385 88.9458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
105.628 97.6958 mo
111.6 97.6958 li
111.6 88.9458 li
105.628 88.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
105.628 88.9458 mo
111.6 88.9458 li
111.6 97.6958 li
105.628 97.6958 li
cp
111.6 88.9458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
119.388 97.6958 mo
125.36 97.6958 li
125.36 88.9458 li
119.388 88.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
119.388 88.9458 mo
125.36 88.9458 li
125.36 97.6958 li
119.388 97.6958 li
cp
125.361 88.9458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
133.15 97.6958 mo
139.122 97.6958 li
139.122 88.9458 li
133.15 88.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
133.15 88.9458 mo
139.122 88.9458 li
139.122 97.6958 li
133.15 97.6958 li
cp
139.122 88.9458 mo
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
146.911 97.6958 mo
152.883 97.6958 li
152.883 88.9458 li
146.911 88.9458 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
146.911 88.9458 mo
152.883 88.9458 li
152.883 97.6958 li
146.911 97.6958 li
cp
152.882 88.9458 mo
cp
253.163 25.7678 mo
253.163 100.434 li
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
253.163 39.0748 mo
261.913 39.0748 li
261.913 33.1028 li
253.163 33.1028 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
261.913 39.0748 mo
253.163 39.0748 li
253.163 33.1028 li
261.913 33.1028 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
253.163 52.8348 mo
261.913 52.8348 li
261.913 46.8628 li
253.163 46.8628 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
261.913 52.8348 mo
253.163 52.8348 li
253.163 46.8628 li
261.913 46.8628 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
253.163 66.5958 mo
261.913 66.5958 li
261.913 60.6248 li
253.163 60.6248 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
261.913 66.5958 mo
253.163 66.5958 li
253.163 60.6248 li
261.913 60.6248 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
253.163 80.3558 mo
261.913 80.3558 li
261.913 74.3838 li
253.163 74.3838 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
261.913 80.3558 mo
253.163 80.3558 li
253.163 74.3838 li
261.913 74.3838 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
253.163 94.1168 mo
261.913 94.1168 li
261.913 88.1448 li
253.163 88.1448 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
261.913 94.1168 mo
253.163 94.1168 li
253.163 88.1448 li
261.913 88.1448 li
cp
271.828 25.7678 mo
271.828 100.434 li
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
271.828 39.0748 mo
280.578 39.0748 li
280.578 33.1028 li
271.828 33.1028 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
280.578 39.0748 mo
271.828 39.0748 li
271.828 33.1028 li
280.578 33.1028 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
271.828 52.8348 mo
280.578 52.8348 li
280.578 46.8628 li
271.828 46.8628 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
280.578 52.8348 mo
271.828 52.8348 li
271.828 46.8628 li
280.578 46.8628 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
271.828 66.5958 mo
280.578 66.5958 li
280.578 60.6248 li
271.828 60.6248 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
280.578 66.5958 mo
271.828 66.5958 li
271.828 60.6248 li
280.578 60.6248 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
271.828 80.3558 mo
280.578 80.3558 li
280.578 74.3838 li
271.828 74.3838 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
280.578 80.3558 mo
271.828 80.3558 li
271.828 74.3838 li
280.578 74.3838 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
271.828 94.1168 mo
280.578 94.1168 li
280.578 88.1448 li
271.828 88.1448 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
280.578 94.1168 mo
271.828 94.1168 li
271.828 88.1448 li
280.578 88.1448 li
cp
290.495 25.7678 mo
290.495 100.434 li
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
290.495 39.0748 mo
299.245 39.0748 li
299.245 33.1028 li
290.495 33.1028 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
299.245 39.0748 mo
290.495 39.0748 li
290.495 33.1028 li
299.245 33.1028 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
290.495 52.8348 mo
299.245 52.8348 li
299.245 46.8628 li
290.495 46.8628 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
299.245 52.8348 mo
290.495 52.8348 li
290.495 46.8628 li
299.245 46.8628 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
290.495 66.5958 mo
299.245 66.5958 li
299.245 60.6248 li
290.495 60.6248 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
299.245 66.5958 mo
290.495 66.5958 li
290.495 60.6248 li
299.245 60.6248 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
290.495 80.3558 mo
299.245 80.3558 li
299.245 74.3838 li
290.495 74.3838 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
299.245 80.3558 mo
290.495 80.3558 li
290.495 74.3838 li
299.245 74.3838 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
290.495 94.1168 mo
299.245 94.1168 li
299.245 88.1448 li
290.495 88.1448 li
cp
false sop
1 /0 /CSD get_res sepcs
.6 sep
f
1 setflat
3 setflat
299.245 94.1168 mo
290.495 94.1168 li
290.495 88.1448 li
299.245 88.1448 li
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
%ADOBeginSubsetFont: FAAAAA+TradeGothic Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /FAAAAA+TradeGothic def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Trade Gothic is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (TradeGothic) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 72 /H put
def
/UniqueID 526877 def
/FontBBox {-167 -224 1000 960} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 0 722 732 520 530] def
/OtherBlues [286 292 408 414 -192 -192] def
/BlueScale 0.0562916 def
/StdVW [72] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/H <1C60D8A8C9B6079F3517E07A2504D5A419ED8274E2F7B337C7187EBB4469
95D234C0A74957121191982F475079323F467717D06CAF17BA86E85BA6A71323
333E> |-
/.notdef <1C60D8A8C9B83BB89A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZNINNF+TradeGothic /FAAAAA+TradeGothic findfont ct_VMDictPut
/ZNINNF+TradeGothic*1 
[72{/.notdef}rp /H 183{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
179.513 38.6451 mo
(H)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
179.513 38.6451 mo
(H) false chp
.2 lw
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7A73DCF2A0DC57F4091A4EED0296A95D086B05E2D1DB92600
4FB8362356EBABBC9B53B98E8EB2AC96E43286F54AE60A39F3538AF702059C4C
BD7C43D8C9FEFF8CF0CF4751C7FBF2E8A133FE428C91930E7101> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 111 /o put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[72{/.notdef}rp /H 38{/.notdef}rp /o 144{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
184.567 38.6451 mo
(o)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
184.567 38.6451 mo
(o) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/t <1C60D8A8C9B81F2C4CF6C61447FCCB8F270BE492C714988F6BA7DA6A7301
B96586BA4BEBFEA469CA151C66CA8CE6417C67288D65582BF256CCC3E98243E9
06E08A021FDB468FA8C84D55B7D2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 116 /t put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[72{/.notdef}rp /H 38{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
188.067 38.6451 mo
(t)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
188.067 38.6451 mo
(t) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B83BB89A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 32 /space put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 38{/.notdef}rp /o 4{/.notdef}rp /t 
139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
190.398 38.6451 mo
( )sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
190.398 38.6451 mo
( ) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B7A73DCF2A0DC57F4091A77BEB081941FD8CBA8E813F7862F5
BF587F8A81525E56C988CC32214B2A44F57D5102C8AD21BE3E7668885BCD8247
70EFDBF82132E464D1D5D6D83E39285AD61BDEE0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c 11{/.notdef}rp /o 
4{/.notdef}rp /t 139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
192.532 38.6451 mo
(c)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
192.532 38.6451 mo
(c) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
196.032 38.6451 mo
(o)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
196.032 38.6451 mo
(o) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/m <1C60D8A8C9B6B41C9140C58F1D78A1EAE1314823CFC5335FCC5410B70E36
0470E7C1CD94343A468667CF3252F5D303347B16AF9AC3AF3595653CF181E167
3221F009260E1BD02AF45C044113F9699B0D467CF55484EED6210A7D84BD167E
7276761CA24A570EF2E4E831A1159A15526A442AF67CC30ABFBB49609B41CABA
DBA28D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 109 /m put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c 9{/.notdef}rp /m 
/.notdef /o 4{/.notdef}rp /t 139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
199.532 38.6451 mo
(m)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
199.532 38.6451 mo
(m) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/p <1C60D8A8C9B7EF3227E373169EEE5A496B6EC465B97B6B0036A7752E710B
B4B7B5540DFF76A9370D02AA7309C1C9A514FB26FA35D93EDD5678C7EDDB1F90
2873EB64A6A3835A2FC827DF99F618237C58219699A1C9BC8D3DCC837655B98E
7C3C75ED79345859579EB53EB81B257DB49A41DD7AB5FBE520A22025E8699F75
E6B10ABF8137C56F3759> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c 9{/.notdef}rp /m 
/.notdef /o /p 3{/.notdef}rp /t 139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
205.363 38.6451 mo
(p)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
205.363 38.6451 mo
(p) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
209.255 38.6451 mo
(o)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
209.255 38.6451 mo
(o) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/n <1C60D8A8C9B7EF327C10274AC23FBD884ED888AC1F530A1D9928420B6F5E
33B60232D96BFCD169E762F11F103B2F0FA03A399527137EF70CF09EC9CB92BE
C50432E1807CFDFD432B336631EA30A84EE39A57397EFCE48721B2EC8B2F1CCD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 110 /n put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c 9{/.notdef}rp /m 
/n /o /p 3{/.notdef}rp /t 139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
212.755 38.6451 mo
(n)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
212.755 38.6451 mo
(n) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/e <1C60D8A8C9B7A73DCF2A0DCA95830AADA2ED924424FF499C21A1431D1BAC
6C10906C5D078A97E7A3D46D87BB75FCA03EF3C2A5ECF76C8711C2CED9C3CB54
445529E3B0785F6E2FE6DAC7DEBA4F3C89B812C96B8744AD6727A6F54A673C94
6CCF1EB12C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 101 /e put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c /.notdef /e 
7{/.notdef}rp /m /n /o /p 3{/.notdef}rp /t 139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
216.647 38.6451 mo
(e)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
216.647 38.6451 mo
(e) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
220.147 38.6451 mo
(n)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
220.147 38.6451 mo
(n) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
224.039 38.6451 mo
(t)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
224.039 38.6451 mo
(t) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B77FE2B8A9DAB5B2AF5C423072E3EC66200218BDA3E7EA9E11
C1FED73E0BAF5EDAA6E89BD867B69683C0722A790C2230190A9129C2FEBA4E18
13151E0E0572BADBCC0EDA90C41473ED86362C11972C78E13F24A478825275E3
BAE7E66E1305> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 115 /s put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c /.notdef /e 
7{/.notdef}rp /m /n /o /p 2{/.notdef}rp /s /t 
139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
226.37 38.6451 mo
(s)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
226.37 38.6451 mo
(s) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
188.837 46.6461 mo
(o)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
188.837 46.6461 mo
(o) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
192.337 46.6461 mo
(n)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
192.337 46.6461 mo
(n) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
196.229 46.6461 mo
( )sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
196.229 46.6461 mo
( ) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
198.364 46.6461 mo
(p)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
198.364 46.6461 mo
(p) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/r <1C60D8A8C9B81F2C6DADD0309A2B2AF1BE95B5265065F0E68AD666B6A9D3
4683B4ED3D96101D83BE5D64189284C81BAC9AD9F3565F97122464BB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 114 /r put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c /.notdef /e 
7{/.notdef}rp /m /n /o /p /.notdef /r /s 
/t 139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
202.256 46.6461 mo
(r)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
202.256 46.6461 mo
(r) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/i <1C60D8A8C9B854D0A3953AFCFA4D92FB69C2D75606586E172A6132B2EB04
58446FC37312829DE5EA1532F074C8D75BA6ED76B901> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 105 /i put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c /.notdef /e 
3{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef 
/r /s /t 139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
204.586 46.6461 mo
(i)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
204.586 46.6461 mo
(i) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
206.532 46.6461 mo
(n)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
206.532 46.6461 mo
(n) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
210.424 46.6461 mo
(t)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
210.424 46.6461 mo
(t) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
212.755 46.6461 mo
(e)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
212.755 46.6461 mo
(e) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7EF325DAEDA03421739FDE27F3796A0DE82BC38205786F474
DC85A101BB86ADEE38D90AE9E3894E8BC25223E3C0B10D8733863317757B43CD
66E78FE5F810A6BAAC803F91504554E356AF5561E4A97B163AA0C8827C6A14EB
2C02A2F35125F15D024E55979719D61309B31DA54E6C929A696B32C95C3100F3
7E9133075A03576F9FF3101D359C6FA9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c /d /e 
3{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef 
/r /s /t 139{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
216.255 46.6461 mo
(d)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
216.255 46.6461 mo
(d) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
183.587 54.6471 mo
(c)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
183.587 54.6471 mo
(c) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
187.087 54.6471 mo
(i)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
187.087 54.6471 mo
(i) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
189.033 54.6471 mo
(r)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
189.033 54.6471 mo
(r) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
191.364 54.6471 mo
(c)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
191.364 54.6471 mo
(c) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/u <1C60D8A8C9B7EF327C10274AC23FBD94556E06D6D6428B3DA39E3B324C40
BB88EA8592C3DAE9FA2621C761FDA82E3DA4E5A575268335D9140898C9F8C243
3BD98409D203AD7276E0F4EC5CDB9155AF55445D732BDC35C1A03063E3F260E8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 117 /u put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 26{/.notdef}rp /c /d /e 
3{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef 
/r /s /t /u 138{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
194.864 54.6471 mo
(u)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
194.864 54.6471 mo
(u) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
198.756 54.6471 mo
(i)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
198.756 54.6471 mo
(i) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
200.702 54.6471 mo
(t)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
200.702 54.6471 mo
(t) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
203.032 54.6471 mo
( )sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
203.032 54.6471 mo
( ) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7EF325DAEDA03421739FDE27F37CC2DB7819A1DDD59EB9FD9
0FDD2A451AB9EC80D3DA1C21F9A15EA170C6FC31FC8EE8A197CABADBDFB15E72
1ABEDE4CFC67AF101CA4FD32C764086B33109810A5AFBAD0A8D95B784C4E0BD9
84711BAFB17E0CFC276277F03044D4A1AB97371B1B28662AFC1EDB706655486C
33312E551C4B3D58CADD36D3A8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 25{/.notdef}rp /b /c /d 
/e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p 
/.notdef /r /s /t /u 138{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
205.167 54.6471 mo
(b)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
205.167 54.6471 mo
(b) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
209.059 54.6471 mo
(o)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
209.059 54.6471 mo
(o) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7A73DCF2A0DC57F4091A101EAE88E6236A6B4AD1418868FE5
2FC061050CFF2EFABA65DB091A10B78E8DA0BD23937163F09CB9573D0C19237D
2019329107024B7E1CBEAF3F4A2B6C684CBA4CF6997AEB97E142F9693416D208
9DB28CC1940A7B7150CA7579DDCF6D457931928D623538D2764065C8E47FB27F
347A0E2C8CA790A0A5C07569648B7B5552> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 97 /a put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 39{/.notdef}rp /H 24{/.notdef}rp /a /b /c 
/d /e 3{/.notdef}rp /i 3{/.notdef}rp /m /n /o 
/p /.notdef /r /s /t /u 138{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
212.559 54.6471 mo
(a)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
212.559 54.6471 mo
(a) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
216.059 54.6471 mo
(r)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
216.059 54.6471 mo
(r) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
218.39 54.6471 mo
(d)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
218.39 54.6471 mo
(d) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
222.282 54.6471 mo
(s)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
222.282 54.6471 mo
(s) false chp
@
55.7005 30.8578 mo
60.2245 31.2058 58.0705 31.9008 61.5165 32.0748 cv
61.7325 32.0748 64.9645 31.7268 66.4725 32.2488 cv
69.0545 33.1408 67.9805 34.6818 69.2725 36.4198 cv
69.9195 37.2898 68.8425 37.9838 68.6265 38.6798 cv
67.9805 39.8968 69.2725 41.1128 68.8425 42.5038 cv
68.4115 43.3728 67.1185 43.3728 66.6875 44.0678 cv
65.8255 44.9378 64.9465 45.5328 63.8875 46.1538 cv
61.5165 47.5448 59.7955 45.9978 57.4235 46.3278 cv
55.8545 46.5458 54.8205 46.6658 52.8995 46.6758 cv
49.7415 46.6918 49.8975 46.4188 48.3755 45.2848 cv
47.3745 44.5398 44.4975 44.5898 43.8515 43.0248 cv
43.4205 41.9828 43.4205 40.7658 43.8515 39.5488 cv
43.8515 39.3758 44.2825 39.2008 44.2825 39.0268 cv
45.1435 37.8108 43.4205 37.2898 44.0665 36.0728 cv
44.4975 35.2038 46.0055 34.8558 47.2985 34.5078 cv
48.3755 33.9868 49.0215 31.9008 49.8835 31.5528 cv
51.3915 31.0318 54.6235 32.4218 55.7005 30.8578 cv
false sop
1 /0 /CSD get_res sepcs
.25 sep
f
.5 lw
55.7005 30.8578 mo
60.2245 31.2058 58.0705 31.9008 61.5165 32.0748 cv
61.7325 32.0748 64.9645 31.7268 66.4725 32.2488 cv
69.0545 33.1408 67.9805 34.6818 69.2725 36.4198 cv
69.9195 37.2898 68.8425 37.9838 68.6265 38.6798 cv
67.9805 39.8968 69.2725 41.1128 68.8425 42.5038 cv
68.4115 43.3728 67.1185 43.3728 66.6875 44.0678 cv
65.8255 44.9378 64.9465 45.5328 63.8875 46.1538 cv
61.5165 47.5448 59.7955 45.9978 57.4235 46.3278 cv
55.8545 46.5458 54.8205 46.6658 52.8995 46.6758 cv
49.7415 46.6918 49.8975 46.4188 48.3755 45.2848 cv
47.3745 44.5398 44.4975 44.5898 43.8515 43.0248 cv
43.4205 41.9828 43.4205 40.7658 43.8515 39.5488 cv
43.8515 39.3758 44.2825 39.2008 44.2825 39.0268 cv
45.1435 37.8108 43.4205 37.2898 44.0665 36.0728 cv
44.4975 35.2038 46.0055 34.8558 47.2985 34.5078 cv
48.3755 33.9868 49.0215 31.9008 49.8835 31.5528 cv
51.3915 31.0318 54.6235 32.4218 55.7005 30.8578 cv
cp
true sop
1 /0 /CSD get_res sepcs
.25 sep
@
44.5725 36.1927 mo
44.9855 35.3577 46.4335 35.0237 47.6745 34.6898 cv
48.7085 34.1898 49.3295 32.1868 50.1565 31.8538 cv
51.6045 31.3527 54.7075 32.6877 55.7415 31.1857 cv
60.0845 31.5198 58.0165 32.1868 61.3265 32.3538 cv
61.5325 32.3538 64.6355 32.0198 66.0835 32.5208 cv
68.5625 33.3777 67.5315 34.8568 68.7715 36.5258 cv
69.3925 37.3608 68.3585 38.0278 68.1515 38.6957 cv
67.5315 39.8638 68.7715 41.0317 68.3585 42.3668 cv
67.9445 43.2017 66.7035 43.2017 66.2905 43.8688 cv
65.4625 44.7037 64.6185 45.2747 63.6005 45.8718 cv
61.3265 47.2067 59.6725 45.7208 57.3955 46.0388 cv
55.8895 46.2488 54.8965 46.3627 53.0525 46.3727 cv
50.0195 46.3878 50.1705 46.1268 48.7085 45.0377 cv
47.7475 44.3218 44.9855 44.3698 44.3655 42.8677 cv
43.9515 41.8668 43.9515 40.6987 44.3655 39.5297 cv
44.3655 39.3627 44.7785 39.1957 44.7785 39.0297 cv
45.6065 37.8608 43.9515 37.3608 44.5725 36.1927 cv
false sop
1 /0 /CSD get_res sepcs
.236 sep
f
45.0775 36.3128 mo
45.4745 35.5128 46.8615 35.1928 48.0515 34.8728 cv
49.0425 34.3928 49.6365 32.4738 50.4295 32.1538 cv
51.8175 31.6738 54.7905 32.9538 55.7825 31.5138 cv
59.9455 31.8338 57.9625 32.4738 61.1345 32.6338 cv
61.3335 32.6338 64.3065 32.3138 65.6945 32.7938 cv
68.0695 33.6148 67.0815 35.0328 68.2705 36.6318 cv
68.8655 37.4318 67.8745 38.0718 67.6765 38.7108 cv
67.0815 39.8318 68.2705 40.9508 67.8745 42.2308 cv
67.4775 43.0298 66.2885 43.0298 65.8915 43.6698 cv
65.0995 44.4698 64.2905 45.0168 63.3155 45.5888 cv
61.1345 46.8688 59.5505 45.4448 57.3685 45.7498 cv
55.9245 45.9508 54.9735 46.0598 53.2045 46.0688 cv
50.2985 46.0838 50.4435 45.8328 49.0425 44.7898 cv
48.1215 44.1028 45.4745 44.1498 44.8795 42.7098 cv
44.4825 41.7508 44.4825 40.6308 44.8795 39.5108 cv
44.8795 39.3508 45.2755 39.1908 45.2755 39.0318 cv
46.0685 37.9118 44.4825 37.4318 45.0775 36.3128 cv
1 /0 /CSD get_res sepcs
.223 sep
f
45.5835 36.4328 mo
45.9625 35.6678 47.2905 35.3618 48.4275 35.0548 cv
49.3755 34.5958 49.9445 32.7598 50.7035 32.4548 cv
52.0305 31.9958 54.8745 33.2188 55.8235 31.8418 cv
59.8055 32.1478 57.9095 32.7598 60.9435 32.9138 cv
61.1335 32.9138 63.9775 32.6068 65.3055 33.0658 cv
67.5775 33.8518 66.6325 35.2088 67.7705 36.7388 cv
68.3385 37.5028 67.3915 38.1158 67.2015 38.7278 cv
66.6325 39.7978 67.7705 40.8698 67.3915 42.0928 cv
67.0115 42.8588 65.8735 42.8588 65.4945 43.4708 cv
64.7365 44.2358 63.9625 44.7588 63.0295 45.3068 cv
60.9435 46.5308 59.4275 45.1688 57.3405 45.4598 cv
55.9585 45.6518 55.0495 45.7568 53.3575 45.7658 cv
50.5785 45.7798 50.7165 45.5398 49.3755 44.5418 cv
48.4945 43.8848 45.9625 43.9298 45.3935 42.5528 cv
45.0145 41.6338 45.0145 40.5638 45.3935 39.4928 cv
45.3935 39.3388 45.7725 39.1868 45.7725 39.0338 cv
46.5315 37.9618 45.0145 37.5028 45.5835 36.4328 cv
1 /0 /CSD get_res sepcs
.209 sep
f
46.0885 36.5518 mo
46.4505 35.8218 47.7175 35.5298 48.8045 35.2377 cv
49.7095 34.7997 50.2525 33.0468 50.9765 32.7548 cv
52.2435 32.3168 54.9585 33.4847 55.8645 32.1697 cv
59.6655 32.4617 57.8555 33.0468 60.7525 33.1927 cv
60.9335 33.1927 63.6485 32.9008 64.9155 33.3387 cv
67.0855 34.0887 66.1835 35.3837 67.2695 36.8448 cv
67.8125 37.5748 66.9075 38.1588 66.7265 38.7438 cv
66.1835 39.7657 67.2695 40.7888 66.9075 41.9568 cv
66.5455 42.6868 65.4585 42.6868 65.0975 43.2717 cv
64.3725 44.0018 63.6345 44.5018 62.7435 45.0237 cv
60.7525 46.1927 59.3055 44.8928 57.3125 45.1697 cv
55.9935 45.3538 55.1245 45.4537 53.5115 45.4617 cv
50.8565 45.4758 50.9885 45.2468 49.7095 44.2938 cv
48.8675 43.6678 46.4505 43.7098 45.9075 42.3948 cv
45.5455 41.5187 45.5455 40.4968 45.9075 39.4738 cv
45.9075 39.3278 46.2695 39.1818 46.2695 39.0358 cv
46.9935 38.0128 45.5455 37.5748 46.0885 36.5518 cv
1 /0 /CSD get_res sepcs
.195 sep
f
46.5945 36.6718 mo
46.9385 35.9767 48.1455 35.6987 49.1805 35.4197 cv
50.0425 35.0027 50.5595 33.3337 51.2495 33.0547 cv
52.4575 32.6378 55.0425 33.7507 55.9055 32.4988 cv
59.5265 32.7767 57.8025 33.3337 60.5615 33.4728 cv
60.7335 33.4728 63.3195 33.1948 64.5265 33.6118 cv
66.5935 34.3268 65.7335 35.5598 66.7685 36.9507 cv
67.2855 37.6467 66.4235 38.2028 66.2505 38.7587 cv
65.7335 39.7327 66.7685 40.7067 66.4235 41.8198 cv
66.0785 42.5157 65.0445 42.5157 64.6995 43.0718 cv
64.0095 43.7678 63.3065 44.2438 62.4575 44.7418 cv
60.5615 45.8547 59.1825 44.6157 57.2845 44.8807 cv
56.0285 45.0557 55.2015 45.1508 53.6645 45.1588 cv
51.1355 45.1718 51.2615 44.9537 50.0425 44.0458 cv
49.2415 43.4487 46.9385 43.4897 46.4215 42.2377 cv
46.0765 41.4028 46.0765 40.4288 46.4215 39.4548 cv
46.4215 39.3157 46.7665 39.1768 46.7665 39.0378 cv
47.4565 38.0638 46.0765 37.6467 46.5945 36.6718 cv
1 /0 /CSD get_res sepcs
.182 sep
f
47.0995 36.7928 mo
47.4275 36.1308 48.5745 35.8678 49.5575 35.6028 cv
50.3765 35.2068 50.8675 33.6208 51.5225 33.3558 cv
52.6695 32.9598 55.1275 34.0168 55.9465 32.8268 cv
59.3865 33.0908 57.7485 33.6208 60.3695 33.7518 cv
60.5335 33.7518 62.9915 33.4878 64.1375 33.8838 cv
66.1015 34.5638 65.2845 35.7348 66.2675 37.0568 cv
66.7585 37.7178 65.9395 38.2468 65.7755 38.7748 cv
65.2845 39.7008 66.2675 40.6258 65.9395 41.6828 cv
65.6125 42.3438 64.6295 42.3438 64.3015 42.8728 cv
63.6465 43.5338 62.9775 43.9858 62.1715 44.4598 cv
60.3695 45.5168 59.0595 44.3398 57.2575 44.5908 cv
56.0635 44.7568 55.2775 44.8478 53.8165 44.8558 cv
51.4155 44.8678 51.5345 44.6608 50.3765 43.7978 cv
49.6145 43.2308 47.4275 43.2698 46.9365 42.0798 cv
46.6085 41.2868 46.6085 40.3618 46.9365 39.4358 cv
46.9365 39.3038 47.2635 39.1718 47.2635 39.0398 cv
47.9185 38.1148 46.6085 37.7178 47.0995 36.7928 cv
1 /0 /CSD get_res sepcs
.168 sep
f
47.6055 36.9128 mo
47.9165 36.2868 49.0025 36.0358 49.9335 35.7858 cv
50.7095 35.4098 51.1755 33.9068 51.7965 33.6568 cv
52.8825 33.2808 55.2115 34.2828 55.9875 33.1548 cv
59.2475 33.4058 57.6945 33.9068 60.1785 34.0318 cv
60.3335 34.0318 62.6625 33.7818 63.7485 34.1578 cv
65.6085 34.7998 64.8355 35.9108 65.7665 37.1628 cv
66.2325 37.7898 65.4565 38.2908 65.3005 38.7918 cv
64.8355 39.6678 65.7665 40.5438 65.4565 41.5458 cv
65.1455 42.1718 64.2145 42.1718 63.9035 42.6728 cv
63.2835 43.2998 62.6495 43.7288 61.8865 44.1758 cv
60.1785 45.1778 58.9375 44.0638 57.2295 44.3018 cv
56.0985 44.4598 55.3535 44.5448 53.9695 44.5518 cv
51.6935 44.5638 51.8075 44.3678 50.7095 43.5498 cv
49.9885 43.0128 47.9165 43.0488 47.4505 41.9218 cv
47.1395 41.1708 47.1395 40.2938 47.4505 39.4178 cv
47.4505 39.2928 47.7605 39.1668 47.7605 39.0418 cv
48.3815 38.1648 47.1395 37.7898 47.6055 36.9128 cv
1 /0 /CSD get_res sepcs
.155 sep
f
48.1105 37.0328 mo
48.4035 36.4408 49.4305 36.2048 50.3095 35.9678 cv
51.0435 35.6128 51.4825 34.1938 52.0695 33.9568 cv
53.0965 33.6017 55.2955 34.5478 56.0285 33.4838 cv
59.1075 33.7198 57.6415 34.1938 59.9875 34.3118 cv
60.1335 34.3118 62.3335 34.0748 63.3595 34.4297 cv
65.1165 35.0378 64.3865 36.0858 65.2655 37.2688 cv
65.7055 37.8608 64.9725 38.3338 64.8255 38.8068 cv
64.3865 39.6348 65.2655 40.4628 64.9725 41.4098 cv
64.6795 42.0018 63.7995 42.0018 63.5065 42.4738 cv
62.9195 43.0658 62.3215 43.4708 61.6005 43.8938 cv
59.9875 44.8398 58.8155 43.7878 57.2015 44.0118 cv
56.1335 44.1618 55.4295 44.2428 54.1225 44.2488 cv
51.9725 44.2598 52.0795 44.0748 51.0435 43.3028 cv
50.3615 42.7948 48.4035 42.8298 47.9645 41.7648 cv
47.6705 41.0547 47.6705 40.2267 47.9645 39.3988 cv
47.9645 39.2798 48.2575 39.1618 48.2575 39.0438 cv
48.8435 38.2148 47.6705 37.8608 48.1105 37.0328 cv
1 /0 /CSD get_res sepcs
.141 sep
f
48.6165 37.1528 mo
48.8925 36.5958 49.8585 36.3738 50.6865 36.1498 cv
51.3765 35.8158 51.7905 34.4798 52.3425 34.2568 cv
53.3085 33.9228 55.3795 34.8138 56.0695 33.8118 cv
58.9675 34.0348 57.5875 34.4798 59.7955 34.5908 cv
59.9345 34.5908 62.0045 34.3688 62.9705 34.7028 cv
64.6245 35.2748 63.9365 36.2618 64.7655 37.3758 cv
65.1785 37.9318 64.4885 38.3768 64.3505 38.8228 cv
63.9365 39.6028 64.7655 40.3818 64.4885 41.2728 cv
64.2125 41.8298 63.3845 41.8298 63.1085 42.2748 cv
62.5565 42.8318 61.9935 43.2128 61.3145 43.6118 cv
59.7955 44.5018 58.6925 43.5107 57.1735 43.7228 cv
56.1685 43.8628 55.5055 43.9388 54.2755 43.9458 cv
52.2515 43.9557 52.3515 43.7818 51.3765 43.0547 cv
50.7355 42.5768 48.8925 42.6088 48.4785 41.6068 cv
48.2025 40.9388 48.2025 40.1598 48.4785 39.3798 cv
48.4785 39.2688 48.7545 39.1568 48.7545 39.0448 cv
49.3065 38.2657 48.2025 37.9318 48.6165 37.1528 cv
1 /0 /CSD get_res sepcs
.127 sep
f
49.1225 37.2728 mo
49.3805 36.7508 50.2865 36.5417 51.0625 36.3328 cv
51.7105 36.0198 52.0985 34.7668 52.6165 34.5577 cv
53.5215 34.2448 55.4635 35.0798 56.1105 34.1398 cv
58.8285 34.3488 57.5345 34.7668 59.6045 34.8708 cv
59.7345 34.8708 61.6755 34.6628 62.5815 34.9748 cv
64.1325 35.5118 63.4875 36.4368 64.2645 37.4808 cv
64.6525 38.0027 64.0045 38.4208 63.8755 38.8387 cv
63.4875 39.5698 64.2645 40.3008 64.0045 41.1357 cv
63.7465 41.6578 62.9695 41.6578 62.7105 42.0757 cv
62.1935 42.5978 61.6655 42.9557 61.0285 43.3288 cv
59.6045 44.1648 58.5705 43.2347 57.1455 43.4338 cv
56.2035 43.5648 55.5825 43.6357 54.4285 43.6418 cv
52.5305 43.6518 52.6245 43.4878 51.7105 42.8068 cv
51.1085 42.3588 49.3805 42.3888 48.9925 41.4498 cv
48.7335 40.8228 48.7335 40.0917 48.9925 39.3608 cv
48.9925 39.2557 49.2515 39.1518 49.2515 39.0468 cv
49.7695 38.3168 48.7335 38.0027 49.1225 37.2728 cv
1 /0 /CSD get_res sepcs
.114 sep
f
56.1515 34.4678 mo
58.6885 34.6638 57.4805 35.0528 59.4135 35.1508 cv
59.5345 35.1508 61.3465 34.9557 62.1925 35.2488 cv
63.6405 35.7488 63.0385 36.6128 63.7635 37.5868 cv
64.1255 38.0748 63.5215 38.4648 63.4005 38.8548 cv
63.0385 39.5378 63.7635 40.2188 63.5215 40.9998 cv
63.2795 41.4868 62.5545 41.4868 62.3135 41.8768 cv
61.8295 42.3638 61.3365 42.6978 60.7425 43.0458 cv
59.4135 43.8268 58.4475 42.9588 57.1185 43.1438 cv
56.2385 43.2668 55.6585 43.3338 54.5815 43.3387 cv
52.8095 43.3478 52.8975 43.1948 52.0435 42.5588 cv
51.4825 42.1407 49.8695 42.1688 49.5065 41.2917 cv
49.2655 40.7068 49.2655 40.0248 49.5065 39.3418 cv
49.5065 39.2448 49.7485 39.1468 49.7485 39.0497 cv
50.2315 38.3678 49.2655 38.0748 49.6275 37.3928 cv
49.8695 36.9048 50.7145 36.7098 51.4395 36.5148 cv
52.0435 36.2228 52.4065 35.0528 52.8895 34.8578 cv
53.7355 34.5658 55.5475 35.3458 56.1515 34.4678 cv
1 /0 /CSD get_res sepcs
.1 sep
f
true sop
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: GAAAAA+TradeGothic-Bold Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /GAAAAA+TradeGothic-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Trade Gothic is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (TradeGothic-Bold) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 105 /i put
dup 114 /r put
def
/UniqueID 526871 def
/FontBBox {-167 -228 1000 971} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 0 722 732 544 554] def
/OtherBlues [286 292 394 400 -192 -192] def
/BlueScale 0.0562916 def
/StdVW [126] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/A <1C60D8A8C9B7EF327C1027457AC2CF67BF9989C1007D33D45D9D99DABD02
F170BA72EB0DC231CD01FC055C1D199BB91A653663E33E284291E2341E0380E0
CBE877F25B272497E17ED2> |-
/i <1C60D8A8C9B854D0A3953AFCD28EDDCD35CF59BEAE32ABDFB30304B7F143
02F70970FD8B3999E06C032224FF02620480F99FE92DF7824916D745B4D4D9> |-
/r <1C60D8A8C9B81F2C6DADD0308269ABD819FABA04D6C14B667CE8843F94A0
EE8CD42C705210A6580412B91684F38D4CA0EB6B06577135C046BF7D86BD9747
1372FF5E6B3DB22066DC8653E46DD0053A7574AFD16A7751074526883421487D
FB> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZNINNG+TradeGothic-Bold /GAAAAA+TradeGothic-Bold findfont ct_VMDictPut
/ZNINNG+TradeGothic-Bold*1 
[65{/.notdef}rp /A 39{/.notdef}rp /i 8{/.notdef}rp /r 141{/.notdef}rp]
ZNINNG+TradeGothic-Bold nf
ZNINNG+TradeGothic-Bold*1 [7 0 0 -7 0 0 ]msf
52.7816 41.3621 mo
(Air)sh
246.199 115.058 mo
(Air)sh
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B7EF327C102745BA1FED8A97BC470267A35F7600635F6AC8A5
A8EA54DA5D04B46ADB29FDB405949607E2710E3623E2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 70 /F put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 37{/.notdef}rp /F /.notdef /H 24{/.notdef}rp /a 
/b /c /d /e 3{/.notdef}rp /i 3{/.notdef}rp /m 
/n /o /p /.notdef /r /s /t /u 
138{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
14.8906 35.1881 mo
(F)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
14.8906 35.1881 mo
(F) false chp
.2 lw
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
18.7826 35.1881 mo
(o)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
18.7826 35.1881 mo
(o) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
22.2826 35.1881 mo
(r)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
22.2826 35.1881 mo
(r) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
24.6135 35.1881 mo
(c)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
24.6135 35.1881 mo
(c) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
28.1135 35.1881 mo
(e)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
28.1135 35.1881 mo
(e) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
31.6135 35.1881 mo
(d)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
31.6135 35.1881 mo
(d) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B81F2C6DADD03098956E92CE957C228CDB17408C09C40BEB5A
6F374BB8AC78EA96FB4A9F084021FDE9EC1CCEEF7A607BF493081E8AB16E522B
5FA15FC22F7958E638D5AF0F89D97E5BFB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 102 /f put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 37{/.notdef}rp /F /.notdef /H 24{/.notdef}rp /a 
/b /c /d /e /f 2{/.notdef}rp /i 3{/.notdef}rp 
/m /n /o /p /.notdef /r /s /t 
/u 138{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
18.9716 43.1891 mo
(f)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
18.9716 43.1891 mo
(f) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/l <1C60D8A8C9B854D0A3953AFD522A4328128F4700148A29F14B25442E044F
A905> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 108 /l put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 37{/.notdef}rp /F /.notdef /H 24{/.notdef}rp /a 
/b /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u 138{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
21.3025 43.1891 mo
(l)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
21.3025 43.1891 mo
(l) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
23.2485 43.1891 mo
(o)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
23.2485 43.1891 mo
(o) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/w <1C60D8A8C9B64EDFA3F30AEB2B3BEE8CD0167BEBD924246C96DCF46A2161
A4D9D789F7E3D0FD616DE225F6FD2859BC60799BEAB5EB8D023E0B3E4389E303
DF75E3601274C24B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 119 /w put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 37{/.notdef}rp /F /.notdef /H 24{/.notdef}rp /a 
/b /c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /.notdef /w 136{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
26.7485 43.1891 mo
(w)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
26.7485 43.1891 mo
(w) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B <1C60D8A8C9B64EDF887021C3D8B33192AD99CCC1B97839D6E75842865850
DF805317D9E66A971EA21A99FA855F27A7D0D2036330F19CC4B744D6101E123B
5F7727554C4119100F6CDF8548ABBF626D2926DF88737A7A2874B3B0EA83EF12
2DD669B799E240E96B74F5171193AD9DBDAD93AF22B3E503C02602C9D92BAC9C
DFAC47485428A799EB9225BA4B6A31E2A0F0D963472B03FC2D2E5FA39C413E37
5FC9DFC4B5D46DC3835A11> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 66 /B put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 33{/.notdef}rp /B 3{/.notdef}rp /F /.notdef /H 
24{/.notdef}rp /a /b /c /d /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /.notdef /w 136{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
211.409 14.6361 mo
(B)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
211.409 14.6361 mo
(B) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
216.078 14.6361 mo
(u)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
216.078 14.6361 mo
(u) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
219.97 14.6361 mo
(o)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
219.97 14.6361 mo
(o) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B77FE2C225BA4155BBC87DE0E997AD2FBF67AAD8D658BD1F92
088CB94154E34804FD134E2B9BF377F064F7EC62EEF6AE1F0ADAFCD0E017B443
8A939F41B69421470ABC4FE05B66476E4660437A4C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 33{/.notdef}rp /B 3{/.notdef}rp /F /.notdef /H 
24{/.notdef}rp /a /b /c /d /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /.notdef /w /.notdef /y 
134{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
223.47 14.6361 mo
(y)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
223.47 14.6361 mo
(y) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
226.578 14.6361 mo
(a)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
226.578 14.6361 mo
(a) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
230.078 14.6361 mo
(n)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
230.078 14.6361 mo
(n) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
233.97 14.6361 mo
(c)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
233.97 14.6361 mo
(c) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
237.47 14.6361 mo
(y)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
237.47 14.6361 mo
(y) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C3AC2349123E7E56762F321804B72A8DD1D337FD
79FED> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 45 /hyphen put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 20{/.notdef}rp /B 3{/.notdef}rp /F 
/.notdef /H 24{/.notdef}rp /a /b /c /d /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u /.notdef /w 
/.notdef /y 134{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
240.578 14.6361 mo
(-)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
240.578 14.6361 mo
(-) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
242.909 14.6361 mo
(d)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
242.909 14.6361 mo
(d) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
246.801 14.6361 mo
(r)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
246.801 14.6361 mo
(r) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
249.132 14.6361 mo
(i)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
249.132 14.6361 mo
(i) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v <1C60D8A8C9B77FE2B26F7955A88520EEF9B4F0850706D74A429BDF2E5A58
1EE43B09C9D57A86D959D9761B846D90BFED6B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 118 /v put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 20{/.notdef}rp /B 3{/.notdef}rp /F 
/.notdef /H 24{/.notdef}rp /a /b /c /d /e 
/f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/.notdef /y 134{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
251.078 14.6361 mo
(v)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
251.078 14.6361 mo
(v) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
254.186 14.6361 mo
(e)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
254.186 14.6361 mo
(e) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
257.686 14.6361 mo
(n)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
257.686 14.6361 mo
(n) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
230.274 22.6371 mo
(f)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
230.274 22.6371 mo
(f) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
232.604 22.6371 mo
(l)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
232.604 22.6371 mo
(l) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
234.551 22.6371 mo
(o)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
234.551 22.6371 mo
(o) false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
238.051 22.6371 mo
(w)sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
238.051 22.6371 mo
(w) false chp
@
29.1155 75.4458 mo
18.6155 75.4458 li
18.6155 71.9458 li
29.1155 71.9458 li
29.1155 71.9458 30.6995 72.1958 30.6995 73.6958 cv
30.6995 75.1958 29.1155 75.4458 29.1155 75.4458 cv
false sop
1 /1 /CSD get_res sepcs
.5 sep
f
29.1155 75.1018 mo
18.6155 75.1018 li
18.6155 72.1168 li
29.1155 72.1168 li
29.1155 72.1168 30.6995 72.3298 30.6995 73.6088 cv
30.6995 74.8888 29.1155 75.1018 29.1155 75.1018 cv
1 /1 /CSD get_res sepcs
.43 sep
f
29.1155 74.7578 mo
18.6155 74.7578 li
18.6155 72.2878 li
29.1155 72.2878 li
29.1155 72.2878 30.6995 72.4628 30.6995 73.5228 cv
30.6995 74.5817 29.1155 74.7578 29.1155 74.7578 cv
1 /1 /CSD get_res sepcs
.36 sep
f
29.1155 74.4148 mo
18.6155 74.4148 li
18.6155 72.4578 li
29.1155 72.4578 li
29.1155 72.4578 30.6995 72.5978 30.6995 73.4358 cv
30.6995 74.2748 29.1155 74.4148 29.1155 74.4148 cv
1 /1 /CSD get_res sepcs
.29 sep
f
29.1155 74.0708 mo
18.6155 74.0708 li
18.6155 72.6288 li
29.1155 72.6288 li
29.1155 72.6288 30.6995 72.7318 30.6995 73.3498 cv
30.6995 73.9678 29.1155 74.0708 29.1155 74.0708 cv
1 /1 /CSD get_res sepcs
.22 sep
f
29.1155 73.7268 mo
18.6155 73.7268 li
18.6155 72.7998 li
29.1155 72.7998 li
29.1155 72.7998 30.6995 72.8658 30.6995 73.2628 cv
30.6995 73.6608 29.1155 73.7268 29.1155 73.7268 cv
1 /1 /CSD get_res sepcs
.15 sep
f
.5 lw
29.1155 75.4458 mo
18.6155 75.4458 li
18.6155 71.9458 li
29.1155 71.9458 li
29.1155 71.9458 30.6995 72.1958 30.6995 73.6958 cv
30.6995 75.1958 29.1155 75.4458 29.1155 75.4458 cv
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
24.2035 73.3618 mo
24.2035 73.3618 21.7505 65.1957 21.7505 57.6957 cv
21.7505 50.1957 23.5585 46.0287 25.3655 46.0287 cv
27.1725 46.0287 28.9805 50.1957 28.9805 57.6957 cv
28.9805 65.1957 26.5275 72.0287 26.5275 72.0287 cv
26.5275 72.0287 25.2915 72.2787 24.2035 73.3618 cv
false sop
1 /1 /CSD get_res sepcs
.5 sep
f
24.2745 73.3618 mo
24.2745 73.3618 22.2965 65.1957 22.2965 57.6957 cv
22.2965 50.1957 23.6945 46.0287 25.3195 46.0287 cv
26.9445 46.0287 28.7975 50.1957 28.7975 57.6957 cv
28.7975 65.1957 26.3645 72.0287 26.3645 72.0287 cv
26.3645 72.0287 25.2525 72.2787 24.2745 73.3618 cv
1 /1 /CSD get_res sepcs
.457 sep
f
24.3455 73.3618 mo
24.3455 73.3618 22.8425 65.1957 22.8425 57.6957 cv
22.8425 50.1957 23.8305 46.0287 25.2735 46.0287 cv
26.7155 46.0287 28.6145 50.1957 28.6145 57.6957 cv
28.6145 65.1957 26.2005 72.0287 26.2005 72.0287 cv
26.2005 72.0287 25.2135 72.2787 24.3455 73.3618 cv
1 /1 /CSD get_res sepcs
.414 sep
f
24.4165 73.3618 mo
24.4165 73.3618 23.3885 65.1957 23.3885 57.6957 cv
23.3885 50.1957 23.9665 46.0287 25.2265 46.0287 cv
26.4875 46.0287 28.4315 50.1957 28.4315 57.6957 cv
28.4315 65.1957 26.0375 72.0287 26.0375 72.0287 cv
26.0375 72.0287 25.1755 72.2787 24.4165 73.3618 cv
1 /1 /CSD get_res sepcs
.371 sep
f
24.4875 73.3618 mo
24.4875 73.3618 23.9345 65.1957 23.9345 57.6957 cv
23.9345 50.1957 24.1025 46.0287 25.1805 46.0287 cv
26.2585 46.0287 28.2475 50.1957 28.2475 57.6957 cv
28.2475 65.1957 25.8745 72.0287 25.8745 72.0287 cv
25.8745 72.0287 25.1365 72.2787 24.4875 73.3618 cv
1 /1 /CSD get_res sepcs
.329 sep
f
24.5585 73.3618 mo
24.5585 73.3618 24.4805 65.1957 24.4805 57.6957 cv
24.4805 50.1957 24.2385 46.0287 25.1345 46.0287 cv
26.0305 46.0287 28.0655 50.1957 28.0655 57.6957 cv
28.0655 65.1957 25.7105 72.0287 25.7105 72.0287 cv
25.7105 72.0287 25.0975 72.2787 24.5585 73.3618 cv
1 /1 /CSD get_res sepcs
.286 sep
f
24.6295 73.3618 mo
24.6295 73.3618 25.0265 65.1957 25.0265 57.6957 cv
25.0265 50.1957 24.3745 46.0287 25.0885 46.0287 cv
25.8025 46.0287 27.8815 50.1957 27.8815 57.6957 cv
27.8815 65.1957 25.5465 72.0287 25.5465 72.0287 cv
25.5465 72.0287 25.0595 72.2787 24.6295 73.3618 cv
1 /1 /CSD get_res sepcs
.243 sep
f
24.7005 73.3618 mo
24.7005 73.3618 25.5725 65.1957 25.5725 57.6957 cv
25.5725 50.1957 24.5105 46.0287 25.0415 46.0287 cv
25.5735 46.0287 27.6995 50.1957 27.6995 57.6957 cv
27.6995 65.1957 25.3835 72.0287 25.3835 72.0287 cv
25.3835 72.0287 25.0205 72.2787 24.7005 73.3618 cv
1 /1 /CSD get_res sepcs
.2 sep
f
24.2035 73.3618 mo
24.2035 73.3618 21.7505 65.1957 21.7505 57.6957 cv
21.7505 50.1957 23.5585 46.0287 25.3655 46.0287 cv
27.1725 46.0287 28.9805 50.1957 28.9805 57.6957 cv
28.9805 65.1957 26.5275 72.0287 26.5275 72.0287 cv
26.5275 72.0287 25.2915 72.2787 24.2035 73.3618 cv
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
26.4445 74.0288 mo
26.4445 74.0288 28.8975 82.1958 28.8975 89.6958 cv
28.8975 97.1958 27.0895 101.362 25.2825 101.362 cv
23.4745 101.362 21.6665 97.1958 21.6665 89.6958 cv
21.6665 82.1958 24.1205 75.3618 24.1205 75.3618 cv
24.1205 75.3618 25.3565 75.1118 26.4445 74.0288 cv
false sop
1 /1 /CSD get_res sepcs
.5 sep
f
26.3725 74.0288 mo
26.3725 74.0288 28.3515 82.1958 28.3515 89.6958 cv
28.3515 97.1958 26.9535 101.362 25.3285 101.362 cv
23.7035 101.362 21.8505 97.1958 21.8505 89.6958 cv
21.8505 82.1958 24.2835 75.3618 24.2835 75.3618 cv
24.2835 75.3618 25.3955 75.1118 26.3725 74.0288 cv
1 /1 /CSD get_res sepcs
.457 sep
f
26.3025 74.0288 mo
26.3025 74.0288 27.8055 82.1958 27.8055 89.6958 cv
27.8055 97.1958 26.8175 101.362 25.3745 101.362 cv
23.9315 101.362 22.0335 97.1958 22.0335 89.6958 cv
22.0335 82.1958 24.4475 75.3618 24.4475 75.3618 cv
24.4475 75.3618 25.4335 75.1118 26.3025 74.0288 cv
1 /1 /CSD get_res sepcs
.414 sep
f
26.2315 74.0288 mo
26.2315 74.0288 27.2595 82.1958 27.2595 89.6958 cv
27.2595 97.1958 26.6815 101.362 25.4205 101.362 cv
24.1605 101.362 22.2165 97.1958 22.2165 89.6958 cv
22.2165 82.1958 24.6105 75.3618 24.6105 75.3618 cv
24.6105 75.3618 25.4725 75.1118 26.2315 74.0288 cv
1 /1 /CSD get_res sepcs
.371 sep
f
26.1605 74.0288 mo
26.1605 74.0288 26.7135 82.1958 26.7135 89.6958 cv
26.7135 97.1958 26.5455 101.362 25.4665 101.362 cv
24.3885 101.362 22.3995 97.1958 22.3995 89.6958 cv
22.3995 82.1958 24.7735 75.3618 24.7735 75.3618 cv
24.7735 75.3618 25.5115 75.1118 26.1605 74.0288 cv
1 /1 /CSD get_res sepcs
.329 sep
f
26.0895 74.0288 mo
26.0895 74.0288 26.1665 82.1958 26.1665 89.6958 cv
26.1665 97.1958 26.4095 101.362 25.5135 101.362 cv
24.6175 101.362 22.5835 97.1958 22.5835 89.6958 cv
22.5835 82.1958 24.9375 75.3618 24.9375 75.3618 cv
24.9375 75.3618 25.5495 75.1118 26.0895 74.0288 cv
1 /1 /CSD get_res sepcs
.286 sep
f
26.0185 74.0288 mo
26.0185 74.0288 25.6215 82.1958 25.6215 89.6958 cv
25.6215 97.1958 26.2735 101.362 25.5595 101.362 cv
24.8455 101.362 22.7655 97.1958 22.7655 89.6958 cv
22.7655 82.1958 25.1005 75.3618 25.1005 75.3618 cv
25.1005 75.3618 25.5885 75.1118 26.0185 74.0288 cv
1 /1 /CSD get_res sepcs
.243 sep
f
25.9475 74.0288 mo
25.9475 74.0288 25.0755 82.1958 25.0755 89.6958 cv
25.0755 97.1958 26.1375 101.362 25.6055 101.362 cv
25.0745 101.362 22.9495 97.1958 22.9495 89.6958 cv
22.9495 82.1958 25.2635 75.3618 25.2635 75.3618 cv
25.2635 75.3618 25.6275 75.1118 25.9475 74.0288 cv
1 /1 /CSD get_res sepcs
.2 sep
f
26.4445 74.0288 mo
26.4445 74.0288 28.8975 82.1958 28.8975 89.6958 cv
28.8975 97.1958 27.0895 101.362 25.2825 101.362 cv
23.4745 101.362 21.6665 97.1958 21.6665 89.6958 cv
21.6665 82.1958 24.1205 75.3618 24.1205 75.3618 cv
24.1205 75.3618 25.3565 75.1118 26.4445 74.0288 cv
cp
true sop
1 /1 /CSD get_res sepcs
1 sep
@
149.896 55.8828 mo
150.172 55.8828 150.396 55.6588 150.396 55.3828 cv
150.396 55.1068 150.172 54.8828 149.896 54.8828 cv
149.62 54.8828 149.396 55.1068 149.396 55.3828 cv
149.396 55.6588 149.62 55.8828 149.896 55.8828 cv
cp
f
149.896 55.8828 mo
150.172 55.8828 150.396 55.6588 150.396 55.3828 cv
150.396 55.1068 150.172 54.8828 149.896 54.8828 cv
149.62 54.8828 149.396 55.1068 149.396 55.3828 cv
149.396 55.6588 149.62 55.8828 149.896 55.8828 cv
cp
@
.25 lw
149.896 55.3828 mo
149.896 35.8958 li
178.329 35.8958 li
@
257.454 36.4788 mo
257.179 36.4788 256.954 36.2548 256.954 35.9788 cv
256.954 35.7028 257.179 35.4788 257.454 35.4788 cv
257.73 35.4788 257.954 35.7028 257.954 35.9788 cv
257.954 36.2548 257.73 36.4788 257.454 36.4788 cv
cp
f
.5 lw
257.454 36.4788 mo
257.179 36.4788 256.954 36.2548 256.954 35.9788 cv
256.954 35.7028 257.179 35.4788 257.454 35.4788 cv
257.73 35.4788 257.954 35.7028 257.954 35.9788 cv
257.954 36.2548 257.73 36.4788 257.454 36.4788 cv
cp
@
.25 lw
257.454 35.8958 mo
231.017 35.8958 li
@
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINNH+Times-Italic /BFLGAB+Times-Italic findfont ct_VMDictPut
/ZNINNH+Times-Italic*1 
[113{/.notdef}rp /q 142{/.notdef}rp]
ZNINNH+Times-Italic nf
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
117.386 31.6951 mo
(q)sh
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
117.386 31.6951 mo
(q) false chp
.214 lw
@
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINNH+Times-Italic*1 
[113{/.notdef}rp /q 55{/.notdef}rp /quotesingle 86{/.notdef}rp]
ZNINNH+Times-Italic nf
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
121.136 31.6951 mo
(\251)sh
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
121.136 31.6951 mo
(\251) false chp
@
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
122.741 31.6951 mo
(\251)sh
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
122.741 31.6951 mo
(\251) false chp
@
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
316.346 54.3151 mo
(q)sh
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
316.346 54.3151 mo
(q) false chp
@
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
320.096 54.3151 mo
(\251)sh
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
320.096 54.3151 mo
(\251) false chp
@
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
321.701 54.3151 mo
(\251)sh
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
321.701 54.3151 mo
(\251) false chp
@
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINNH+Times-Italic*1 
[98{/.notdef}rp /b 14{/.notdef}rp /q 55{/.notdef}rp /quotesingle 86{/.notdef}rp]
ZNINNH+Times-Italic nf
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
172.952 124.112 mo
(b)sh
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
172.952 124.112 mo
(b) false chp
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B81F2C349562168D6EE949F72EEDFBB46E64C7F97
3468E733F83AE370A6FEFE206F094C357F93F7A90FAFD9690B49256CE76B81AB
29065DDD9B93C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 8{/.notdef}rp /parenright 3{/.notdef}rp /hyphen 20{/.notdef}rp /B 
3{/.notdef}rp /F /.notdef /H 24{/.notdef}rp /a /b /c 
/d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /.notdef /y 134{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
176.702 124.112 mo
(\))sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
176.702 124.112 mo
(\)) false chp
.2 lw
@
%ADOBeginSubsetFont: FAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINNF+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C34956216B7C4EB4B503E41108850A53BADAF
100C5A43697570319FDAC0CFD1994F2E346423A1CB5FE4C03FB5B3597BF4FC26
E014F0895075> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINNF+TradeGothic /Encoding get
dup 40 /parenleft put
pop
%ADOEndSubsetFont
/ZNINNF+TradeGothic*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 20{/.notdef}rp 
/B 3{/.notdef}rp /F /.notdef /H 24{/.notdef}rp /a /b 
/c /d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /.notdef /y 134{/.notdef}rp]
ZNINNF+TradeGothic nf
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
170.621 124.112 mo
(\()sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
170.621 124.112 mo
(\() false chp
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
2.57957 124.112 mo
(\()sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
2.57957 124.112 mo
(\() false chp
@
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINNH+Times-Italic*1 
[97{/.notdef}rp /a /b 14{/.notdef}rp /q 55{/.notdef}rp /quotesingle 86{/.notdef}rp]
ZNINNH+Times-Italic nf
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
4.91052 124.112 mo
(a)sh
ZNINNH+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
4.91052 124.112 mo
(a) false chp
.214 lw
@
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
8.66052 124.112 mo
(\))sh
ZNINNF+TradeGothic*1 [7 0 0 -7 0 0 ]msf
8.66052 124.112 mo
(\)) false chp
.2 lw
@
64.9655 57.6958 mo
60.6455 59.1958 li
61.3655 57.6958 li
60.6455 56.1958 li
64.9655 57.6958 li
cp
f
.5 lw
64.9655 57.6958 mo
60.6455 59.1958 li
61.3655 57.6958 li
60.6455 56.1958 li
64.9655 57.6958 li
cp
@
.75 lw
46.8655 57.6958 mo
61.3655 57.6958 li
@
64.9655 65.6958 mo
60.6455 67.1958 li
61.3655 65.6958 li
60.6455 64.1958 li
64.9655 65.6958 li
cp
f
.5 lw
64.9655 65.6958 mo
60.6455 67.1958 li
61.3655 65.6958 li
60.6455 64.1958 li
64.9655 65.6958 li
cp
@
.75 lw
46.8655 65.6958 mo
61.3655 65.6958 li
@
64.9655 73.6958 mo
60.6455 75.1958 li
61.3655 73.6958 li
60.6455 72.1958 li
64.9655 73.6958 li
cp
f
.5 lw
64.9655 73.6958 mo
60.6455 75.1958 li
61.3655 73.6958 li
60.6455 72.1958 li
64.9655 73.6958 li
cp
@
.75 lw
46.8655 73.6958 mo
61.3655 73.6958 li
@
64.9655 81.6958 mo
60.6455 83.1958 li
61.3655 81.6958 li
60.6455 80.1958 li
64.9655 81.6958 li
cp
f
.5 lw
64.9655 81.6958 mo
60.6455 83.1958 li
61.3655 81.6958 li
60.6455 80.1958 li
64.9655 81.6958 li
cp
@
.75 lw
46.8655 81.6958 mo
61.3655 81.6958 li
@
64.9655 89.6958 mo
60.6455 91.1958 li
61.3655 89.6958 li
60.6455 88.1958 li
64.9655 89.6958 li
cp
f
.5 lw
64.9655 89.6958 mo
60.6455 91.1958 li
61.3655 89.6958 li
60.6455 88.1958 li
64.9655 89.6958 li
cp
@
.75 lw
46.8655 89.6958 mo
61.3655 89.6958 li
@
64.9655 97.6958 mo
60.6455 99.1958 li
61.3655 97.6958 li
60.6455 96.1958 li
64.9655 97.6958 li
cp
f
.5 lw
64.9655 97.6958 mo
60.6455 99.1958 li
61.3655 97.6958 li
60.6455 96.1958 li
64.9655 97.6958 li
cp
@
.75 lw
46.8655 97.6958 mo
61.3655 97.6958 li
@
109.491 50.7787 mo
115.811 39.3098 li
1 /0 /CSD get_res sepcs
1 sep
@
.15 lw
109.491 50.7787 mo
115.811 39.3098 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
.75 lw
300.308 63.2128 mo
311.313 57.6778 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
.15 lw
300.308 63.2128 mo
311.313 57.6778 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
] del_res
/ZNINNG+TradeGothic-Bold*1 uf
/ZNINNG+TradeGothic-Bold uf
/GAAAAA+TradeGothic-Bold uf
/ZNINNF+TradeGothic*1 uf
/ZNINNF+TradeGothic uf
/FAAAAA+TradeGothic uf
/ZNINNH+Times-Italic*1 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: font BFLGAB+Times-Italic
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 193 CV)
%%CMYKCustomColor: 0 0.9098 0.6510 0.1137 (PANTONE 193 CV)
%%RGBCustomColor: 
%%EOF
