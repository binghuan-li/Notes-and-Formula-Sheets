%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9xuzosx_1x3uuk1_l1c.tmp.pdf
%%Creator: Adobe Acrobat 20.5.0
%%For: lbing
%%CreationDate: 20/07/2023, 10:11:52
%%BoundingBox: 0 0 333 132
%%HiResBoundingBox: 0 0 332.8579 131.7817
%%CropBox: 0 0 332.8579 131.7817
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c018 91.98c2f96, 2021/06/15-20:39:32        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2023-07-20T10:10:14+01:00"
   xmp:CreateDate="2023-07-20T10:10:14+01:00"
   xmp:MetadataDate="2023-07-20T10:10:14+01:00"
   xmp:CreatorTool="Adobe Acrobat Pro 2020 20.5.30467"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:bfcf21b0-3b38-4117-b5aa-29962657d063"
   xmpMM:InstanceID="uuid:53acf3b0-ce1f-4ae3-95a1-8fca3a2bcb8e"
   pdf:Producer="Adobe Acrobat Pro 2020 20.5.30467"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/Name (PANTONE 193 CV)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/ColorLookup [
[0 0 0 0][0 .00390619 .00390619 0][0 .00781238 .00392157 0][0 .0117186 .007797 0]
[0 .0156248 .0117032 0][0 .019531 .0117647 .00384468][0 .0196078 .015594 .00392157][0 .0234218 .0195002 .00392157]
[0 .027328 .0196078 .00392157][0 .0312341 .023391 .00392157][0 .0351403 .0272972 .00392157][0 .0390465 .027451 .00392157]
[0 .0429527 .031188 .00392157][0 .0468589 .0313726 .00764321][0 .0507651 .0350788 .00784314][0 .0546713 .038985 .00784314]
[0 .0585775 .0392157 .00784314][0 .0624837 .0428758 .00784314][0 .0627451 .046782 .00784314][0 .0663745 .0470588 .00784314]
[0 .0702807 .0506728 .00784314][0 .0741869 .054579 .00784314][0 .078093 .054902 .0114264][0 .0819992 .0584698 .0117647]
[0 .0859054 .062376 .0117647][0 .0898116 .0627451 .0117647][0 .0937178 .0662668 .0117647][0 .097624 .070173 .0117647]
[0 .10153 .0705882 .0117647][0 .101961 .0740638 .0117647][0 .105421 .07797 .0117647][0 .109327 .0784314 .0152095]
[0 .113233 .0818608 .0156863][0 .11714 .085767 .0156863][0 .121046 .0862745 .0156863][0 .124952 .0896578 .0156863]
[0 .128858 .0901961 .0156863][0 .132764 .0935486 .0156863][0 .136671 .0974548 .0156863][0 .140577 .0980392 .0190081]
[0 .144483 .101346 .0196078][0 .145098 .105252 .0196078][0 .148374 .105882 .0196078][0 .15228 .109143 .0196078]
[0 .156186 .113049 .0196078][0 .160092 .113725 .0196078][0 .163998 .11694 .0196078][0 .167905 .120846 .0196078]
[0 .171811 .121569 .0227912][0 .175717 .124737 .0235294][0 .179623 .128643 .0235294][0 .183529 .129412 .0235294]
[0 .187436 .132534 .0235294][0 .188235 .13644 .0235294][0 .191326 .137255 .0235294][0 .195233 .140331 .0235294]
[0 .199139 .144237 .0235294][0 .203045 .145098 .0265744][0 .206951 .148128 .027451][0 .210857 .152034 .027451]
[0 .214764 .152941 .027451][0 .21867 .155925 .027451][0 .222576 .156863 .027451][0 .226482 .159815 .027451]
[0 .227451 .163722 .027451][0 .230373 .164706 .0303729][0 .234279 .167612 .0313726][0 .238185 .171519 .0313726]
[0 .242092 .172549 .0313726][0 .245998 .175409 .0313726][0 .249904 .179316 .0313726][0 .25381 .180392 .0313726]
[0 .257716 .183206 .0313726][0 .261622 .187113 .0313726][0 .265529 .188235 .0341561][0 .269435 .191003 .0352941]
[0 .270588 .19491 .0352941][0 .273326 .196078 .0352941][0 .277232 .1988 .0352941][0 .281138 .202707 .0352941]
[0 .285044 .203922 .0352941][0 .28895 .206597 .0352941][0 .292857 .210504 .0352941][0 .296763 .211765 .0379393]
[0 .300669 .214394 .0392157][0 .304575 .215686 .0392157][0 .308481 .218285 .0392157][0 .309804 .222191 .0392157]
[0 .312372 .223529 .0392157][0 .316278 .226082 .0392157][0 .320185 .229988 .0392157][0 .324091 .231373 .0417378]
[0 .327997 .233879 .0431373][0 .331903 .237785 .0431373][0 .335809 .239216 .0431373][0 .339716 .241676 .0431373]
[0 .343622 .245582 .0431373][0 .347528 .247059 .0431373][0 .351434 .249473 .0431373][0 .352941 .253379 .0431373]
[0 .355325 .254902 .0455209][0 .359231 .25727 .0470588][0 .363137 .261176 .0470588][0 .367043 .262745 .0470588]
[0 .37095 .265067 .0470588][0 .374856 .268973 .0470588][0 .378762 .270588 .0470588][0 .382668 .272864 .0470588]
[0 .386574 .27451 .0470588][0 .390481 .276755 .0493041][0 .392157 .280661 .0509804][0 .394371 .282353 .0509804]
[0 .398278 .284552 .0509804][0 .402184 .288458 .0509804][0 .40609 .290196 .0509804][0 .409996 .292349 .0509804]
[0 .413902 .296255 .0509804][0 .417809 .298039 .0531026][0 .421715 .300146 .054902][0 .425621 .304052 .054902]
[0 .429527 .305882 .054902][0 .433433 .307943 .054902][0 .435294 .311849 .054902][0 .437324 .313726 .054902]
[0 .44123 .31574 .054902][0 .445136 .319646 .054902][0 .449043 .321569 .0568858][0 .452949 .323537 .0588235]
[0 .456855 .327443 .0588235][0 .460761 .329412 .0588235][0 .464667 .331334 .0588235][0 .468574 .333333 .0588235]
[0 .47248 .335225 .0588235][0 .476386 .339131 .0588235][0 .478431 .341176 .0588235][0 .480277 .343022 .060669]
[0 .484183 .346928 .0627451][0 .488089 .34902 .0627451][0 .491995 .350819 .0627451][0 .495902 .354725 .0627451]
[0 .499808 .356863 .0627451][0 .503714 .358616 .0627451][0 .50762 .362522 .0627451][0 .511526 .364706 .0644675]
[0 .515433 .366413 .0666667][0 .517647 .370319 .0666667][0 .519323 .372549 .0666667][0 .52323 .37421 .0666667]
[0 .527136 .378116 .0666667][0 .531042 .380392 .0666667][0 .534948 .382007 .0666667][0 .538854 .385913 .0666667]
[0 .54276 .388235 .0682507][0 .546667 .389804 .0705882][0 .550573 .392157 .0705882][0 .554479 .393695 .0705882]
[0 .558385 .397601 .0705882][0 .560784 .4 .0705882][0 .562276 .401492 .0705882][0 .566182 .405398 .0705882]
[0 .570088 .407843 .0705882][0 .573995 .409289 .0720339][0 .577901 .413195 .0745098][0 .581807 .415686 .0745098]
[0 .585713 .417086 .0745098][0 .589619 .420992 .0745098][0 .593526 .423529 .0745098][0 .597432 .424883 .0745098]
[0 .6 .428789 .0745098][0 .601323 .431373 .0758324][0 .605229 .43268 .0784314][0 .609135 .436586 .0784314]
[0 .613041 .439216 .0784314][0 .616947 .440477 .0784314][0 .620854 .444383 .0784314][0 .62476 .447059 .0784314]
[0 .628666 .448274 .0784314][0 .632572 .45218 .0784314][0 .636478 .454902 .0796156][0 .640384 .456071 .0823529]
[0 .643137 .458824 .0823529][0 .644275 .459962 .0823529][0 .648181 .463868 .0823529][0 .652088 .466667 .0823529]
[0 .655994 .467759 .0823529][0 .6599 .471665 .0823529][0 .663806 .47451 .0823529][0 .667712 .475556 .0833987]
[0 .671619 .479462 .0862745][0 .675525 .482353 .0862745][0 .679431 .483353 .0862745][0 .682353 .487259 .0862745]
[0 .683322 .490196 .0862745][0 .687228 .49115 .0862745][0 .691134 .495056 .0862745][0 .69504 .498039 .0871972]
[0 .698947 .498947 .0901961][0 .702853 .502853 .0901961][0 .706759 .505882 .0901961][0 .710665 .506744 .0901961]
[0 .714571 .51065 .0901961][0 .718477 .513726 .0901961][0 .722384 .514541 .0901961][0 .72549 .517647 .0901961]
[0 .726274 .518431 .0909804][0 .730181 .522338 .0941176][0 .734087 .52549 .0941176][0 .737993 .526228 .0941176]
[0 .741899 .530135 .0941176][0 .745805 .533333 .0941176][0 .749712 .534025 .0941176][0 .753618 .537932 .0941176]
[0 .757524 .541176 .0941176][0 .76143 .541822 .0947635][0 .765336 .545729 .0980392][0 .768627 .54902 .0980392]
[0 .769227 .549619 .0980392][0 .773133 .553526 .0980392][0 .77704 .556863 .0980392][0 .780946 .557416 .0980392]
[0 .784852 .561323 .0980392][0 .788758 .564706 .0985621][0 .792664 .565213 .101961][0 .796571 .56912 .101961]
[0 .800477 .572549 .101961][0 .804383 .57301 .101961][0 .807843 .576471 .101961][0 .808274 .576901 .101961]
[0 .81218 .580807 .101961][0 .816086 .584314 .101961][0 .819992 .584698 .102345][0 .823898 .588604 .105882]
[0 .827805 .592157 .105882][0 .831711 .592495 .105882][0 .835617 .596401 .105882][0 .839523 .6 .105882]
[0 .843429 .600292 .105882][0 .847336 .604198 .105882][0 .85098 .607843 .105882][0 .851226 .608089 .106128]
[0 .855133 .611995 .109804][0 .859039 .615686 .109804][0 .862945 .615886 .109804][0 .866851 .619792 .109804]
[0 .870757 .623529 .109804][0 .874664 .623683 .109804][0 .87857 .627589 .109804][0 .882476 .631373 .109927]
[0 .886382 .63148 .113725][0 .890196 .635294 .113725][0 .890273 .635371 .113725][0 .894179 .639277 .113725]
[0 .898085 .643137 .113725][0 .901992 .643168 .113725][0 .905898 .647074 .113725][0 .909804 .65098 .113725]
]
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -131.782 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 131.782 li
332.858 131.782 li
332.858 0 li
cp
clp
31.5154 113.412 mo
35.0763 113.412 li
35.0763 52.5731 li
31.5154 52.5731 li
cp
false sop
1 /0 /CSD get_res sepcs
.4 sep
f
32.6354 113.412 mo
36.1964 113.412 li
36.1964 52.5731 li
32.6354 52.5731 li
cp
1 /0 /CSD get_res sepcs
.392 sep
f
33.7564 113.412 mo
37.3174 113.412 li
37.3174 52.5731 li
33.7564 52.5731 li
cp
1 /0 /CSD get_res sepcs
.383 sep
f
34.8773 113.412 mo
38.4383 113.412 li
38.4383 52.5731 li
34.8773 52.5731 li
cp
1 /0 /CSD get_res sepcs
.375 sep
f
35.9983 113.412 mo
39.5593 113.412 li
39.5593 52.5731 li
35.9983 52.5731 li
cp
1 /0 /CSD get_res sepcs
.367 sep
f
37.1193 113.412 mo
40.6803 113.412 li
40.6803 52.5731 li
37.1193 52.5731 li
cp
1 /0 /CSD get_res sepcs
.358 sep
f
38.2403 113.412 mo
41.8013 113.412 li
41.8013 52.5731 li
38.2403 52.5731 li
cp
1 /0 /CSD get_res sepcs
.35 sep
f
39.3613 113.412 mo
42.9223 113.412 li
42.9223 52.5731 li
39.3613 52.5731 li
cp
1 /0 /CSD get_res sepcs
.342 sep
f
40.4823 113.412 mo
44.0434 113.412 li
44.0434 52.5731 li
40.4823 52.5731 li
cp
1 /0 /CSD get_res sepcs
.333 sep
f
41.6033 113.412 mo
45.1644 113.412 li
45.1644 52.5731 li
41.6033 52.5731 li
cp
1 /0 /CSD get_res sepcs
.325 sep
f
42.7243 113.412 mo
46.2854 113.412 li
46.2854 52.5731 li
42.7243 52.5731 li
cp
1 /0 /CSD get_res sepcs
.317 sep
f
43.8454 113.412 mo
47.4064 113.412 li
47.4064 52.5731 li
43.8454 52.5731 li
cp
1 /0 /CSD get_res sepcs
.308 sep
f
44.9664 113.412 mo
48.5274 113.412 li
48.5274 52.5731 li
44.9664 52.5731 li
cp
1 /0 /CSD get_res sepcs
.3 sep
f
46.0874 113.412 mo
49.6484 113.412 li
49.6484 52.5731 li
46.0874 52.5731 li
cp
1 /0 /CSD get_res sepcs
.292 sep
f
47.2084 113.412 mo
50.7694 113.412 li
50.7694 52.5731 li
47.2084 52.5731 li
cp
1 /0 /CSD get_res sepcs
.283 sep
f
48.3303 113.412 mo
51.8913 113.412 li
51.8913 52.5731 li
48.3303 52.5731 li
cp
1 /0 /CSD get_res sepcs
.275 sep
f
49.4504 113.412 mo
53.0114 113.412 li
53.0114 52.5731 li
49.4504 52.5731 li
cp
1 /0 /CSD get_res sepcs
.267 sep
f
50.5723 113.412 mo
54.1333 113.412 li
54.1333 52.5731 li
50.5723 52.5731 li
cp
1 /0 /CSD get_res sepcs
.258 sep
f
51.6923 113.412 mo
55.2533 113.412 li
55.2533 52.5731 li
51.6923 52.5731 li
cp
1 /0 /CSD get_res sepcs
.25 sep
f
52.8133 113.412 mo
56.3743 113.412 li
56.3743 52.5731 li
52.8133 52.5731 li
cp
1 /0 /CSD get_res sepcs
.242 sep
f
53.9343 113.412 mo
57.4964 113.412 li
57.4964 52.5731 li
53.9343 52.5731 li
cp
1 /0 /CSD get_res sepcs
.233 sep
f
55.0553 113.412 mo
58.6163 113.412 li
58.6163 52.5731 li
55.0553 52.5731 li
cp
1 /0 /CSD get_res sepcs
.225 sep
f
56.1763 113.412 mo
59.7384 113.412 li
59.7384 52.5731 li
56.1763 52.5731 li
cp
1 /0 /CSD get_res sepcs
.217 sep
f
57.2973 113.412 mo
60.8594 113.412 li
60.8594 52.5731 li
57.2973 52.5731 li
cp
1 /0 /CSD get_res sepcs
.208 sep
f
58.4184 113.412 mo
61.9794 113.412 li
61.9794 52.5731 li
58.4184 52.5731 li
cp
1 /0 /CSD get_res sepcs
.2 sep
f
59.5394 113.412 mo
63.1004 113.412 li
63.1004 52.5731 li
59.5394 52.5731 li
cp
1 /0 /CSD get_res sepcs
.192 sep
f
60.6614 113.412 mo
64.2224 113.412 li
64.2224 52.5731 li
60.6614 52.5731 li
cp
1 /0 /CSD get_res sepcs
.183 sep
f
61.7814 113.412 mo
65.3424 113.412 li
65.3424 52.5731 li
61.7814 52.5731 li
cp
1 /0 /CSD get_res sepcs
.175 sep
f
62.9024 113.412 mo
66.4634 113.412 li
66.4634 52.5731 li
62.9024 52.5731 li
cp
1 /0 /CSD get_res sepcs
.167 sep
f
64.0234 113.412 mo
67.5844 113.412 li
67.5844 52.5731 li
64.0234 52.5731 li
cp
1 /0 /CSD get_res sepcs
.158 sep
f
65.1453 113.412 mo
68.7063 113.412 li
68.7063 52.5731 li
65.1453 52.5731 li
cp
1 /0 /CSD get_res sepcs
.15 sep
f
66.2653 113.412 mo
69.8263 113.412 li
69.8263 52.5731 li
66.2653 52.5731 li
cp
1 /0 /CSD get_res sepcs
.142 sep
f
67.3873 113.412 mo
70.9483 113.412 li
70.9483 52.5731 li
67.3873 52.5731 li
cp
1 /0 /CSD get_res sepcs
.133 sep
f
68.5073 113.412 mo
72.0683 113.412 li
72.0683 52.5731 li
68.5073 52.5731 li
cp
1 /0 /CSD get_res sepcs
.125 sep
f
69.6283 113.412 mo
73.1893 113.412 li
73.1893 52.5731 li
69.6283 52.5731 li
cp
1 /0 /CSD get_res sepcs
.117 sep
f
70.7493 113.412 mo
74.3103 113.412 li
74.3103 52.5731 li
70.7493 52.5731 li
cp
1 /0 /CSD get_res sepcs
.108 sep
f
71.8703 113.412 mo
75.4314 113.412 li
75.4314 52.5731 li
71.8703 52.5731 li
cp
1 /0 /CSD get_res sepcs
.1 sep
f
3 setflat
.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
31.5154 52.7021 mo
31.5154 113.369 li
75.4124 52.7021 mo
75.4124 113.369 li
true sop
/1 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
20.5563 84.8681 mo
82.9563 84.8681 li
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
86.5564 84.8681 mo
82.2363 86.3681 li
82.9563 84.8681 li
82.2363 83.3681 li
86.5564 84.8681 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
86.5564 84.8681 mo
82.2363 86.3681 li
82.9563 84.8681 li
82.2363 83.3681 li
86.5564 84.8681 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
20.5563 84.8681 mo
82.9563 84.8681 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
172.21 105.514 mo
175.056 88.8681 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
175.679 85.3231 mo
176.41 89.8371 li
175.056 88.8681 li
173.454 89.3181 li
175.679 85.3231 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
175.679 85.3231 mo
176.41 89.8371 li
175.056 88.8681 li
173.454 89.3181 li
175.679 85.3231 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
172.21 105.514 mo
175.056 88.8681 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
281.108 92.5761 mo
288.898 82.6281 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
291.128 79.8021 mo
289.629 84.1221 li
288.898 82.6281 li
287.274 82.2641 li
291.128 79.8021 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
291.128 79.8021 mo
289.629 84.1221 li
288.898 82.6281 li
287.274 82.2641 li
291.128 79.8021 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
281.115 92.5671 mo
288.898 82.6281 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
277.978 91.7491 mo
279.545 79.0931 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
280.001 75.5211 mo
280.942 79.9971 li
279.545 79.0931 li
277.966 79.6171 li
280.001 75.5211 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
280.001 75.5211 mo
280.942 79.9971 li
279.545 79.0931 li
277.966 79.6171 li
280.001 75.5211 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
277.994 91.6181 mo
279.545 79.0931 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
274.831 92.4201 mo
269.709 80.8791 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
268.26 77.5831 mo
271.371 80.9351 li
269.709 80.8792 li
268.624 82.1422 li
268.26 77.5831 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
268.26 77.5831 mo
271.371 80.9351 li
269.709 80.8792 li
268.624 82.1422 li
268.26 77.5831 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
274.785 92.3151 mo
269.709 80.8792 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
272.328 94.5881 mo
262.196 87.4771 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
259.257 85.3971 mo
263.65 86.6681 li
262.196 87.4771 li
261.917 89.1171 li
259.257 85.3971 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
259.257 85.3971 mo
263.65 86.6681 li
262.196 87.4771 li
261.917 89.1171 li
259.257 85.3971 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
272.286 94.5591 mo
262.196 87.4771 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
271.182 97.8561 mo
259.155 97.0021 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
255.564 96.7321 mo
259.984 95.5591 li
259.155 97.0021 li
259.76 98.5511 li
255.564 96.7321 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
255.564 96.7321 mo
259.984 95.5591 li
259.155 97.0021 li
259.76 98.5511 li
255.564 96.7321 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
271.111 97.8511 mo
259.155 97.0021 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
254.878 66.2471 mo
251.371 78.3851 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
250.357 81.8401 mo
250.133 77.2721 li
251.371 78.3851 li
253.012 78.1161 li
250.357 81.8401 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
250.357 81.8401 mo
250.133 77.2721 li
251.371 78.3851 li
253.012 78.1161 li
250.357 81.8401 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
254.876 66.2571 mo
251.371 78.3851 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
258.091 65.8451 mo
261.367 78.1701 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
262.277 81.6531 mo
259.733 77.8531 li
261.367 78.1702 li
262.635 77.0941 li
262.277 81.6531 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
262.277 81.6531 mo
259.733 77.8531 li
261.367 78.1702 li
262.635 77.0941 li
262.277 81.6531 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
258.125 65.9721 mo
261.367 78.1701 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
260.759 64.0471 mo
269.824 72.8371 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
272.398 75.3541 mo
268.26 73.4071 li
269.824 72.8371 li
270.358 71.2611 li
272.398 75.3541 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
272.398 75.3541 mo
268.26 73.4071 li
269.824 72.8371 li
270.358 71.2611 li
272.398 75.3541 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
260.841 64.1261 mo
269.824 72.8371 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
262.272 61.1001 mo
274.327 63.9101 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
277.83 64.7411 mo
273.28 65.2042 li
274.327 63.9102 li
273.972 62.2852 li
277.83 64.7411 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
277.83 64.7411 mo
273.28 65.2042 li
274.327 63.9102 li
273.972 62.2852 li
277.83 64.7411 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
262.322 61.1111 mo
274.327 63.9102 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.75 lw
262.113 57.6411 mo
273.589 53.9391 li
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
277.02 52.8481 mo
273.358 55.5872 li
273.589 53.9391 li
272.448 52.7281 li
277.02 52.8481 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
1 setflat
3 setflat
.5 lw
277.02 52.8481 mo
273.358 55.5872 li
273.589 53.9391 li
272.448 52.7281 li
277.02 52.8481 li
cp
true sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
.15 lw
262.181 57.6181 mo
273.589 53.9391 li
false sop
1 /0 /CSD get_res sepcs
1 sep
@
1 setflat
3 setflat
true sop
1 /1 /CSD get_res sepcs
1 sep
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINMQ+Times-Italic /BFLGAB+Times-Italic findfont ct_VMDictPut
/ZNINMQ+Times-Italic*1 
[84{/.notdef}rp /T 171{/.notdef}rp]
ZNINMQ+Times-Italic nf
ZNINMQ+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
39.0569 43.3765 mo
(T)sh
ZNINMQ+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
39.0569 43.3765 mo
(T) false chp
.214 lw
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /GAAAAA+TradeGothic def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Trade Gothic is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (TradeGothic) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/UniqueID 526877 def
/FontBBox {-167 -224 1000 960} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 0 722 732 520 530] def
/OtherBlues [286 292 408 414 -192 -192] def
/BlueScale 0.0562916 def
/StdVW [72] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7D8BE6A16EB6EA25D4E089C590D9B7881D3E9C27DB0133A
B45CC9CDC1FCE4323F9FF09E6247DC742E7A7D7395CE295B809B> |-
/.notdef <1C60D8A8C9B83BB89A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZNINMR+TradeGothic /GAAAAA+TradeGothic findfont ct_VMDictPut
/ZNINMR+TradeGothic*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
ZNINMR+TradeGothic nf
ZNINMR+TradeGothic*1 [5 0 0 -5 0 0 ]msf
43.2269 45.3765 mo
(1)sh
ZNINMR+TradeGothic*1 [5 0 0 -5 0 0 ]msf
43.2269 45.3765 mo
(1) false chp
.143 lw
@
%ADOBeginSubsetFont: GAAAAA+MinionPro-Bold Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /GAAAAA+MinionPro-Bold def
/FontInfo 7 dict dup begin
/Notice (Copyright 1990, 1991, 1992, 1994, 1997, 1998, 2000, 2002, 2004 Adobe Systems Incorporated. All rights reserved. Minion is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
def
/FontBBox {-319 -360 1684 1024} def
end
systemdict begin
dup /Private
16 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 442 458 475 488 623 636 650 665 691 703] def
/OtherBlues [-244 -230] def
/FamilyBlues [-15 0 437 453 464 478 623 636 650 665 701 712] def
/FamilyOtherBlues [-257 -240] def
/BlueScale 0.046875 def
/BlueFuzz 0 def
/StdHW [41] def
/StdVW [128] def
/StemSnapH [41] def
/StemSnapV [128] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/space <1C60D8A8C9B893A7FD> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4A980A717C67
5DD749FCAD021C86E4A82A71450A60069401092D2766EC2A38FB4B27A723A2EF
044B6549AE7BD225531C9BFBD9FDEC4C158C539EAA9E47425F43D2DE9C2FA717
B7B8B00C9770334A66> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZNINMS+MinionPro-Bold /GAAAAA+MinionPro-Bold findfont ct_VMDictPut
/ZNINMS+MinionPro-Bold*1 
[32{/.notdef}rp /space 223{/.notdef}rp]
ZNINMS+MinionPro-Bold nf
ZNINMS+MinionPro-Bold*1 [5 0 0 -5 0 0 ]msf
46.2814 45.3762 mo
( )sh
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINMQ+Times-Italic*1 
[62{/.notdef}rp /greater 21{/.notdef}rp /T 171{/.notdef}rp]
ZNINMQ+Times-Italic nf
ZNINMQ+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
49.5064 43.3762 mo
(>)sh
ZNINMQ+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
49.5064 43.3762 mo
(>) false chp
.214 lw
@
%ADOBeginSubsetFont: GAAAAA+TimesNewRomanPS-BoldMT Initial
ct_T42Dict begin
-0.555 -0.324 2 1.055
 256 array 0 1 255 {1 index exch /.notdef put} for  /GAAAAA+TimesNewRomanPS-BoldMT
Type42DictBegin
[<00010000000c000c000c000c4f532f321a7b5a9e000000cc000000606376
742074e2f99d0000012c0000082c6670676d379e7810000009580000063f
676c79667cae289d0000e938000c636668656164ec24587a00000f980000
00366868656113041a9d00000fd000000024686d74784c7bb0ad00000ff4
000049326c6f6361721d06ea00005928000049386d6178701b9606a00000
a260000000206e616d65ce5dd9860000a2800000334d70726570025f6028
0000d5d000001368676469720000000000000000000000000003036a02bc
00050008059a053300000125059a0533000003a000660212010502020803
070505020304e0002effc000785b0000000900000000544d432000200020
fffc056bfe460133072101bb400001ffffff000003a7054c000000200015
058e001f054c001f054c001c0394001b0000ffe10000ffe40000ffe8fe4a
fffc056b0023fe6affe00313000001240000012400000000000000000025
0084002400e8009600bf005d00cb02030045012e00580004011800190002
0139004b011000170005010a00280023004b00500015004a00e5010d00af
003100ea014600810125004f009c0022004e00160041009100a00147ffe9
008100d3016900ab001700a801400027004c0148ffdf00510050ffb7012e
0000003b0097009a010e001f004c010a0123ffde00220073008700ba00d6
00ff005a009805a0ffe900500052006effb7005c00d1015a015bff1c0049
006e007e009800a100bd00e4018801c00405ff6000350062007201070113
01280382ffa8003805d809b5ffc4ffd00010006e00a100ba00ec022b0446
ffee004000e80401ff680003001300330033006e00a200b600dc01180135
0343000e0034005c005d007c00af0328003b00480089009c00ba017b01af
030effa4001700370063007f00e0017801c0022105d805f0ff7a00120027
00340052008a00a400c100c300eb011801460154036dfe3fff4e00010008
002b0045006e0084008600ae00af00c200c200c4010f01210149017b01c1
01de01e1036e03e6006300a700ed00f600f801280169017e023f02820532
fd81ffb5002600350040004500490057006c00ac01260140015b017b019c
0277027e027f03b603dc042804efff38ffc30006002f0040008200aa00b6
00ce00d300d700e50146014d01d6027e03b30586ff7b0012002f0068007f
008400a500b900f501050109010c01140120013301370178017b01c001e1
021d02230258036203af058cff79ff8d00210024005d00650068006a0083
008500b700cf00e200eb00ed011a0120012f0137013f0150018d018f01c4
02cf0357035c03960440049604ab04c204fc051105c2fed1fee000130021
00240030004d004d005d0066007a007c00b800b800c300da0103011b011e
012f013d014a0150015f0166017c0190019501a301a601b601c701d001e9
01ef01f90218028c029402bb02c502cf02d0031d032a0344039f03cc0421
04da04fb0761fd1dfebffeefff0bff2bff33ff90ff9cffdbffed00010008
001c0025003f0043005a006b0080008400900095009d00a700b400cd00d5
00d600df00df00df00e400f000f600fb010601130119011b012201230127
012c013f015701580177018a019301a401c601e101e401fc0200020c0222
0222022a0236024a025c028202ec02fc030a032303410378039703d203fa
04790532053205ab05b505f006e4072508ccfc9bfddefe00fe69fe96fe9b
ff3500030006000e00130019003400420048004a00570064007100710072
00760077007a007a0083009c00af00af00b200bb00c800cc00cf00cf00db
00dc00df00e400e400e400e900eb00f400fd00fe01020105010501080108
011b01220123013001370143015b016001650178017801780178017b0182
018901980198019b019e01a101a601d101d201d301df01e301f502000200
022d02410247024a0250025b025d025d025f02630281028b02b402b402ce
02d602db02e202fa03100311031f0327034503670388038a03b003b403d4
03d5042604410448046b04c704d1053205480549055f0563058b05a105a3
05c205ca05e405ff069306a206b806e8070a073607500754078907a907bb
07dc07ff08270120014d011b0129000000000000000000000093015b042f
029001ff02b800db00be027403cb029401ab000000000000000000000000
058a038a0364005f02b803bd029d7c9003e203ac02820000044400000000
003d010a00cc00bc00cc05d3041505e800c7021a00ee00000194036102be
029902180136033b048504cc0050007905a305a302df020702af000001eb
0064005f0055011900f2045600ef00c800cf058a0143014602de01ab02c6
024a005d00d800a402bb009900a0006501370274036400b500fa009101b9
032001b60025007f00d000ec00e000000000000000000000042ffd42023f
06180276063a013701b90151ffc70229ffeb023f02e1018500db03fa0190
0156014e012f00a600e300bb00d50134011f04fe041b00d100e4011e009b
00cd00e700b300e200ca042400b800f500b90334005a04e00123012ffdc9
fe440574038301f602410002001700500015004f001700a8005100980052
0049006e000e00af017b017b019c006a008300eb00cd0122000005d306da
009a008f00ba0315002503a5028002ff03c80420009200e0034c009b007d
00f8011c013400a8006d006900000420ffe6fea4006a006a003800380162
015a0044006d0048001eff6d00a600a600400040ff5cff990559052b00ce
014c011500bf0140011800c800960509feed004800b4009500db0048018b
00b3fe6400c000ea01180125013203b003ed0576059005aa05b405be05cd
063100780084009b00cc00e200f4010a0120016300d100ea00f701080142
0019002c00340041003800480058006c025903bd0043011a007000d30028
003700420050005a0064007300780082008c009c00a500bd00ce00f00110
015c00be00d801020117012c016300ea01080041004b0055005f007300a6
0109018301b300410064001e002a00eb00fa010e01380274002c00400082
009600b600c000cc00dc00e600f000ff010a0120012c013b014401560163
00f70057006401100136005001b10000ffb60039004e004403cc00e50024
01100042012201a400f0006000e0000e001d003905e30102002cfe4eff38
026903bd011600ff000e00a00054001b003d01710041000f005000fd0015
014f0035fe47003900ab0080005005a50016002b00ac0115021504570555
007300da005c00ce0072ff58019a074403d703f0047040425554403f3e3d
3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f1e
1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100
2c4523466020b02660b004262348482d2c452346236120b02661b0042623
48482d2c45234660b0206120b04660b004262348482d2c4523462361b020
6020b02661b02061b004262348482d2c45234660b0406120b06660b00426
2348482d2c4523462361b0406020b02661b04061b004262348482d2c0110
203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed
51582320b04d44235920b09051582320b00d44235921212d2c2020451868
4420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00b1
0a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab10200
080d2d2c45b01a234445b01923442d2c2045b00325456164b05051584544
1b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c45
b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a45
186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b017
7ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58b002
855958b00185592d2c20b0032545b019234445b01a23444565234520b003
25606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0
001a45208a54582321b03f1b235961441cb114008a5279b3194020194520
8a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b
2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d
2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349b0
4060b0206320b000525823b002253823b002256538008a63381b21212121
2159012d2c4bb06451584569b00943608a103a1b212121592d2c01b00525
1023208af500b0016023edec2d2c01b005251023208af500b0016123edec
2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0016101
10203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d
2c352d2c76b8029f23701020b8029f4520b0005058b00161593a2f182d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826b0
0826b00826b008260f10161345683ab001162d2cb4000100000015b00826
b00826b00826b008260f1016134568653ab001162d2c4b53234b515a5820
458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a
58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb013
4358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580cb0
0425b00425060c6423646164b807085158b00425b00425012046b0106048
2046b0106048590a21211b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b8fff060482046b8fff060
48590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b5323
4b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b212159
2d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c
462346608a8a462320468a608a61b8ff8062232010238ab9032703278a70
456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b2020202436042b12401885458b2022002
436042004b014b5258b2020802436042591bb940000080885458b2020402
43604259b94000008063b80100885458b202080243604259b94000010063
b80200885458b202100243604259b12601885158b94000020063b8040088
5458b202400243604259b94000040063b80800885458b202800243604259
b12801885158b94000080063b81000885458ba0002010000024360425959
59595959592d2cb0024354584b53234b515a58381b2121591b2121212159
2d000001000000070000ceed723e5f0f3cf50819080000000000a2e33546
00000000d684d862fb89fd61100008720001000900010001000000000001
00000721fe4500571000fb89fa0b10000001000000000000000000000000
0000124c0639011c00000000020000000200000002aa00af047100b00400
00280400004f0800008e06aa00520239008c02aa005202aa001904000072
048f00280200004202aa00320200005a023900020400004a040000870400
00320400002104000033040000450400004c04000045040000480400003f
02aa00af02aa0098048f0029048f0028048f00290400007d0771005c05c7
00100556002b05c7005105c7001b0556002904e3002e063900530639002b
031d0029040000160639002e05560026078d002905c7001d0639005004e3
00340639005005c700260473006a0556004a05c7003005c7001008000012
05c7000e05c700120556002102aa00d60239000202aa004304a600930400
ffed02aa00260400005c0473002b038d004e0473004f038d004f02aa0042
0400004d047300460239002a02aaffc7047300440239002b06aa004c0473
00460400004a047300270473004e038d004b031d005102aa00260473003f
0400001305c700110400002f04000011038d0015032700a501c3009f0327
005b0429000c05c7001005c7001105c700510556002905c7001d06390050
05c700470400005c0400005c0400005c0400005c0400005c0400005c038d
004e038d004f038d004f038d004f038d004f0239002b0239fff10239ffdd
0239ffe30473004604000049040000490400004904000049040000490473
003f0473003f0473003f0473003f040000630333003b0400008004000023
0400005c02cd004d045200010473003a05fa003b05fa003b0800fffd02aa
00e402aa00160464000f0800ffe90639005105b400350464000f0464000e
0464000e04000000049c004f03f4004e05b4002b0696002e046400340231
00000266002e02a400380625000905c7005a040000440400007302aa00af
048f0029046400540400ffff0464000d04e5001a04000024040000260800
00af05c7001005c70010063900500800004a05c700460400ffef0800ffec
040000510400005302aa009802aa00980464001003f4002f0400001205c7
00110156fe870400ffe902aa005d02aa005f0473003b047300360400006e
0200005902aa0098040000530800003b05c700100556002905c700100556
002905560029031d0029031d0029031d0029031d00280639005006390050
0639005005c7004705c7004705c700470239002a02aa001502aa001402aa
001402aa002702aa00c302aa008402aa009102aa007002aa005802aa0015
0556002a023900260473006b031d004505560022038d001501c3009f05c7
00230400004a05c700110400001104e3002904730027048f0028048f009a
0266004a026600180266000f06000048060000480600000d040000150639
00530400004d031d00290473006a031d005105c70051038d004e05c70051
038d004e0473004f0400ffed02ab00d105c700100400005c05c700100400
005c05c7001b05de005305c7002305560029038d004f05560029038d004f
055600260239002b0556002603c0002a05560026032a002b05c7001d0473
004605c7001d04730046063900500400004a05c70026038d004b05c70026
038d004b0473006a031d00510556004a02aa00260556004a042b002505c7
00300473003f05c700300473003f05560021038d001505560021038d0015
051700290639004d06a2004e047700570427004a036b0041045a004903b0
000204fe00500400ffed04d500ae02c8002b07c000260800004f04000099
0800004f040000990800004f040000980400009807d5016a05c000b6048f
002504cd0099048f002304d5022204d5010505abffe905ab027e05ab027e
05abffe905ab027e05abffe905ab027e05abffe905abffe905abffe905ab
ffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff
04d500920800000007eb013007eb012007eb013007eb012004d500b204d5
008004d5002a082b0198086b01b807550010060000f40600006f0440003a
0540003704c0003f04150040040000250600005506950028046b002705d5
fffd024000c6046b00c606aa00370300001a04d5009202d6005c02d6005c
04d500b202d6004d05c700100400005c05c70051038d004e05c70051038d
004e05560029038d004f05560029038d004f05560029038d004f06390053
0400004d063900530400004d063900530400004d0639002b047300460639
002b04730046031d00290239ffda031d00290239ffdb031d00290239ffee
031d00290239002a0400001602aaffc70639002e04730044047300480556
00260239002b05c7001d047300460627002c0473004b063900500400004a
063900500400004a05c70026038d004b0473006a031d004e0556004a02aa
002505c700300473003f05c700300473003f05c700300473003f05c70030
0473003f0800001205c7001105c70012040000110239000705c700110400
005c0800ffe905c7005a063900510400004402aa00af0800001205c70011
0800001205c700110800001205c7001105c700120400001102aa009702aa
ffd80400002304cd005a060000480600001f0600002b0600002c02aa0079
02aa009102aa00e402aaff8405c700100664ff750746ff75042dff750639
ff8806ebff750668ff76027bff6d05c700100556002b0504003105560029
055600210639002b031d00290639002e05bc0009078d002905c7001d056b
0073063900500639002904e30034053b000c0556004a05c7001205c7000e
063d001f0668004b031d002905c7001604770057036b0041048b0012027b
002c0427000a0437006603be0003034e0042048b0012042d0053027b002c
0471002403ee001c0489006b0393ffec0391003d0400004a044800650360
00390427000a03b2000f0581002105d9004f027bfff00427000a04000049
0427000a05d9004f055600290666004105170029056d004c0473006a031d
0029031d002c040000160806000c080400270666004105cd002a05df0012
0639002905c70010054a00220556002b05170029058100000556002907e9
001f04390029063900200639002005cd002a05f6000c078d00290639002b
063900500639002904e3003405c700510556004a05df001206df004b05c7
000e0639002905df000c08c9005608c90056061f004a07db0023054a0022
056d00600902002805c7ffe80400005c040000490452004903a20048040c
0000038d004f05cd000c0337001b049c0046049c0046049c0047047d000c
05730049049c00460400004a049c004604730027038d004e03ee00250400
0011058900520400002f049c00460483003406c1004706c1004704aa0024
063f004e043b004d0375001c061d004c04540023038d004b044c004903a2
004803750049031d00510239002a0239ffdd02aaffc7063d000c06600047
0473004b049c004704000011049c004604290029031d004908000041080a
000d0462000f000000000000000000000000000000000000000000000000
0000000000000000000000000000ffad00000000000001020000ffce02e8
00590000ff3b02aa00ee000002af0000ff6b02aa00af0437002c03ac0027
02ef002103b7003d0419003d02630038028a003804090043043c0038027c
003803a9003803920027037bffdf0417004f04440038029b003802870021
03d30048040f002703f1003803a8002c04840038041e003803dd004303b6
0038058200380425001604c6003804df003804f80038020b008c03ae008c
061000850263003803a9003803a90038037bff19037bff18040f00270582
00380582003805820038058200380437002c0437002c0437002c03ac0027
02ef002103b7003d0419003d0263003802a7001d043c0038027c003803a9
003803920027037bffdf044400380287002103d3004803f1003803a8002c
041e003803dd004303b6003805820038042500160263003803ac00270392
002703a8002c0437ffdf0000ffdc0000ff250000ffdc0000fe51028d00ab
028d00a002da004303c0007e0196ffba0000004600000046000000460000
004600000048000000460000004600000046047e0188047e0150047e0104
047e009e047e012d047e00ea047e00d5047e009c047e00bc047e00ee0435
0085028d00c0043500b3060001000600010002be005806000100047e00a5
047e00bd047e00de06000100060001000600010006000100060001000000
004606000100060001000600010006000100060001000600010006000100
0600010004e6ffba0600010006000100060001000532003905320039022c
ffba022cffba06000100060001000600010006000100049e003404780030
0430ffba0430ffba0376000a0376000a060e00290708002902e2ffba0456
ffba060e00290708002902e2ffba0456ffba05280097046f001e03520003
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
000000300000004600000046000000400000004606000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010004000015080000000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
0100028dffcd028d002f0600010005a0002e03c0007e01e800060207ffcf
01bc005e01e0fffa039c0006039c000601bc005e01e0001a05280097049e
0011022cffba022cffba01bc008801e0001a0532003905320039022cffba
022cffba02be0036035200030532003905320039022cffba022cffba0532
003c0532003c022cffba022cffba049e0034047800300430ffba0430ffba
049e0034047800300430ffba0430ffba049e0034047800300430ffba0430
ffba02be006902be006902be006902be00690376000a0376000a0376000a
0376000a073200400732004004deffba04deffba073200400732004004de
ffba04deffba0880004008800040062cffba062cffba0880004008800040
062cffba062cffba0430ffba0430ffba0430ffba0430ffba0430ffba0430
ffba0430ffba0430ffba0454003403c000460454ffba02e2ffba04540034
03c000460454ffba02e2ffba0610002f0610002f0270ffba0298ffba04e6
002704e600270270ffba0298ffba045400290454002902e2ffba02e2ffba
039c0023039c002301e0ffba01e0ffba02e2002102e200210352ffba0352
ffba0454003e0454003e022cffba022cffba02be00580352000303c0ffba
039cffba039c0006039c000605280097046f001e05280097049e0011022c
ffba022cffba0454001004c4001003e400220454001a03e400220454001a
03e400220454001a06000100060001000000004600000046060001000600
010006000100000000460000004606000100060001000000004800000046
060001000600010006000100000000460000004600000046000000460000
004000000030060001000000004600000046060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100028d00ca028d
00c7028d00c6060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010002be00690100ffba0800ffba1000ffba06390050046e
004a065e003004cd003f0000fd7f0000fbbf0000fcc00000fdfc0000fcd0
0000fda00000fe1a0000fdb50000fd2f0000fc960000fd430000fc180000
fcd10000fef70000ff030000fe66041a009706000048060000180000fe4f
0000fd8e0000fdb80000fcd00000fe160000fd2d0000fbeb0000fba30000
fb890000fce50000fc660000fc200000fcb80000fc4a0000fc4a0000fc72
0000fbdc0000fdb80000fe770000fd880000fbfa0000fd760000fdcb0000
fe520000fc7d0000fdac0000fd5c0000fcee0000fcf80000fc9e0000fc2f
0000fc200000fbcb0000fbb70239002a05c700100400005c05c700100400
005c05c700100400005c05c700100400005c05c700100400005c05c70010
0400005c05c700100400005c05c700100400005c05c700100400005c05c7
00100400005c05c700100400005c05c700100400005c05560029038d004f
05560029038d004f05560029038d004f05560029038d004f05560029038d
004f05560029038d004f05560029038d004f05560029038d004f031d0029
0239002a031d00290239002a063900500400004a063900500400004a0639
00500400004a063900500400004a063900500400004a063900500400004a
063900500400004a06390050046e004a06390050046e004a06390050046e
004a06390050046e004a06390050046e004a05c700300473003f05c70030
0473003f065e003004cd003f065e003004cd003f065e003004cd003f065e
003004cd003f065e003004cd003f05c700120400001105c7001204000011
05c700120400001105c700100400005c031d00290239ffe8063900500400
004a05c700300473003f05c700300473003f05c700300473003f05c70030
0473003f05c700300473003f0000ff090000ff090000ff090000ff090517
002303a2002207e9001f05cd000c05cd002a049c004705cd002a049c0047
0639002b049c004605c700120400001305c700120400001305c7000e0400
002f05df000c0483003405df002b0473004605e90050038d003806390050
0400004a05320039022cffba0270ffba0298ffba04e60027022c0065022c
0016022c0016022c0011022c0043022cffd20000fef00000000f01a8fff5
02aa009002aa00900000000601bc005e0000005e0000ffcb01bc000f01e0
ffbf01bcfff501e0ffcd01bc001d01e0000901bc008801e0001a039c0006
039c0006039c0006039c000605280097046f001e0532003905320039022c
ffba022cffba0532003905320039022cffba022cffba0532003905320039
022cffba022cffba0532003905320039022cffba022cffba053200390532
0039022cffba022cffba0532003905320039022cffba022cffba05320039
05320039022cffba022cffba049e0034047800300430ffba0430ffba049e
0034047800300430ffba0430ffba049e0034047800300430ffba0430ffba
049e0034047800300430ffba0430ffba049e0034047800300430ffba0430
ffba049e0034047800300430ffba0430ffba02be004f02be004f02be0069
02be006902be006902be006902be004f02be004f02be006602be006602be
006902be006902be006902be006902be002f02be002f02be002202be0022
0376000a0376000a0376000a0376000a0376000a0376000a0376000a0376
000a0376000a0376000a0376000a0376000a0376000a0376000a0376000a
0376000a073200400732004004deffba04deffba073200400732004004de
ffba04deffba073200400732004004deffba04deffba0880004008800040
062cffba062cffba0880004008800040062cffba062cffba0430ffba0430
ffba0454003403c000460454ffba02e2ffba0610002f0610002f0610002f
0270ffba0298ffba0610002f0610002f0270ffba0298ffba0610002f0610
002f0270ffba0298ffba0610002f0610002f0270ffba0298ffba0610002f
0610002f0270ffba0298ffba04e6002704e6002704e6002704e60027093e
0032093e00320740ffba0740ffba060e00290708002902e2ffba0456ffba
045400290454002902e2ffba02e2ffba045400290454002902e2ffba02e2
ffba045400290454002902e2ffba02e2ffba060e00290708002902e2ffba
0456ffba060e00290708002902e2ffba0456ffba060e00290708002902e2
ffba0456ffba060e00290708002902e2ffba0456ffba060e002907080029
02e2ffba0456ffba039c0023039c002301e0ffba01e0ffba039c0023039c
002301e0ffb101e0ffb1039c0023039c002301e0ffba01e0ffba039c0023
039c002301e0ffba01e0ffba0454003e0454003e022cffba022cffba0454
003e0454003e0454003e0454003e0454003e0454003e022cffba022cffba
0454003e0454003e049e0034047800300430ffba0430ffba02be00580352
0003031a001a031a001a031a001a039c0006039c0006039c0006039c0006
039c0006039c0006039c0006039c0006039c0006039c0006039c0006039c
0006039c0006039c0006039c0006039c000605280042046fffd905280097
046f001e022cffba022cffba039c0006039c000605280097046f000a022c
ffba022cffba05280097046f000a067f0044067f0045067f0044067f0045
01a800280000fe290000fe8c0000fec80000ff230000fefa0000ff7a0000
fe5908fc003408ad00320000ff880000ffaf0000ff3f0000ff590000fe59
0000ff1501b4000002f700000000fe850000ff0704cd00320000ff580000
ff580000ff59073200400732004004deffba04deffba0880004008800040
062cffba062cffba0454003403c000460454ffba02e2ffba03c0007e02e2
002102be0058022cffba0290ffba01f4002f01f4003b01f4001201f400b1
01f4006d060e002907080029027c00380000fee202bc000004f8003803e4
fff50454fff503e400220454001a03e400220454001a03e400220454001a
03e400220454001a03e400220454001a03e400220454001a047e0072047e
00bd03e4000f0454000f0473002b060a0000054a00220473009a054a0022
0473000a05c7007005c70051038d004e05c7002306880000054a00420473
004f042700540556005c0439004704e3ffc70639005305c7001006410046
0274002b031d00290639002e047300440239001703ee001c0786006105c7
ff5f047300460639005008730051062a004a058e00000473002704e30029
04730052031d0049053b000c041a000002aa00260556000002aa00260556
004a0668004b053700300653001a0400001105560021038d001504a70029
04a7004703ab003803a0001b04000032040900290314003502aa002604c5
004601c3009f029800a0023c001402aa00af0b1d001b0954001b0800004f
095600260800002604e3002b09c7001d0871001d071d0046038d003805c7
00100400005c0000ff0905c700100400005c0800ffe905c7005a06390053
0400001b063900530400004d0639002e04730044063900500400004a0639
00500400004a04a7002903ab001b02aaffc70b1d001b0954001b0800004f
063900530400004d07c3002b052a003405c7001d0473004605c700100400
005c05c700100400005c05560029038d003c05560029038d004f031dffec
0239ff88031d00290239ffea063900500400004a063900500400004a05c7
0026038d004605c70026038d004b05c700300473003f05c700300473003f
0473006a031d00510556004a02aa0026046e007002fe001b0639002b0473
004605df002b056900470403004905560021038d001505c700100400005c
05560029038d004f063900500400004a0000feec063900500400004a0639
00500400004a063900500400004a05c7001204000011040000220499005c
049900220473009a038d002e038d00480473004f0473004f038d00300504
004f036b0041036b002f04be002f03a8004a02aaff680469005c0469005c
04bb004a04000013042400130473003b047300460473004602390017027b
002c024d002a0239ffde0239fffe0239002b04db002b06aa003506aa0035
06aa004c0473ff85047300460430002a0400004a0613004a05d9004f05c7
0049038d001f038d001f038d001f038d004b038d004b0335002b0335001f
0499002a0499002a031d0051026bff8502aaff6802cfff9a028eff8502aa
001402aa00260473003f04f000700430002c0400001205c7001504000013
04440013038d0015041b001503ab001b03ab0060038d004a038d004e038d
004a03fb004e063900500452004903a8004904bb004a049c004602aaff75
0473ffed040e00460473004e038d004a038d004e06e3004f06fa004f0771
004f052f0026044b002605a9002606cb004204f9002b04c4002b04190014
03d9003c029a001e029a001e0172ffe20209001e0209000a0221000a02c9
001e0375000a0264000a024000c603f800c602aa009802aa009802aa0098
02aa00ec02aa00ec0203001e0203001e048f0029048f0029048f0062048f
006202aa012102aa00e402aa002602aa012102aa001402aa002602aa00e4
023900a2023900a202aa00ec02aa00ec02aa009902aa009902aa009902aa
001402aaffec030e002d0265000a016b001e01bd001e024a000a0203001e
031000960310009603100096031000960310009602aa006202aa006202aa
001502aa0014040000530457009604570096045700960457009604570043
04570043045700430457004304570043031000430457002f0457002f0457
002f0457002f0457002f0310002f04570025045700250457002504570025
045700250310002f0457001a0457001a0457001a0457001a0457001a0310
001a04570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
0042031000420457002f0457002f0457002f0457002f0457002f0310002f
0457002f0457002f0457002f0457002f0457002f0310002f045700260457
002604570026045700260457002603100026045700420457004204570042
045700420457004203100042045700960457009604570096045700960457
004204570042045700420457004204570042031000420457002604570026
045700260457002604570026031000260457002304570023045700230457
002304570023031000230457002f0457002f0457002f0457002f0457002f
0310002f0457004b0457004b0457004b0457004b0457004b0310004b0457
009604570096045700960457009604570042045700420457004204570042
04570042031000420457001a0457001a0457001a0457001a0457001a0310
001a0457002404570024045700240457002404570024031000240457002f
0457002f0457002f0457002f0457002f0310002f0457004e0457004e0457
004e0457004e0457004e0310004e04570096045700960457009604570096
0000febd0000fec20000fdef0000fed20000ff6f0000febf0000ff310000
fec00000febd0000ffce0000ff660000fec00000fed20000fed20000ff41
0000ff430000ff43000000000000ff2f0000ff300000ff440000ff440000
fe87000000000000ff940000ff440000ff440000ff440000febf0000feda
000000000000febf0000ff310000ff7a0000ff540000ff3c0000ffce0000
fe870000febb0000febd0000febd0000fed20000fed20000febd0000fec2
0000fdef0000febf0000febd0000fec20000fdef0000fe160000fee00000
ff940000fe870000ff440000feba0000ff230000ff860000fdef0000fe5f
000000000000feb90000ff430000fe2e0000ff640000fe870000fddf0000
ff660000ff440000feb90000feb90000feb90000ff030000ff440000fd1f
0000ffb70000ffcb0000ff530256001e0212001e016b001e024b001e029a
001e0213001e029c001e029a001e03ef001e0209001e01b2001e0265000a
024a000a02aa00e402aa002602aa00bd0437006404cb003d05c700120763
000005c7001204fe005005d9000004a3001e063900500400004a05c70075
0360001b04e3002e045f004604c3001403b0001e0603000a046f000a06f6
003206aa003705cd005004b0004a05eb0036038d00130500004b04b1004b
0574001e04d8001e05cc0049042000490452001e039a001e04a3001e0400
0049038d004e02aaffc706390050035e0049035e00490556002906390020
038d004f049c00460a01005304f30011061c004a04cd0025080f0029054f
002a05c7000b0400000908c900290630002a07e9001f05cd000c0ae10029
07fd002a0439000903370000063d000b05810021063900500400004a0686
002d04d7003b0686002d04d7003b091e0050075c004a0697002104af0021
09e40049067600490000fe150a01005304f3001105c70051038d004e02b4
000a0000fea60000febc0000ff7a0000ff900000fc2b0000fc4c06390020
049c0046054a0022043b002b04e300340473002705c60029049d00480439
00290337001b05cd0023049c004506a1004a050b0024075f002b05560046
08eb002906c0004605d6003d0445003005c70051038d004e0556004a03ee
002506f0004a04df002405df000c04830034070b000004830000070b0000
04830000031d002907e9001f05cd000c05e6002a04bf004705f6000c047d
000c0639002b049c00460639002b049c004605df000c04830034078d0029
0573004902aafff905c700100400005c05c700100400005c0800ffe905c7
005a05560029038d004f05e90050038d003807e9001f05cd000c04390029
0337001b0439002903ab001b06390020049c004606390020049c00460639
00500400004a063900500400004a056d00610375001c05df001204000011
05df00120400001105df00120400001105df000c0483003407db0023063f
004e054a00420473004f06d100420640004f0660006b056d004c04c2006b
03af004c077c000c063c000c07c3002b065900460639005304bb004a05ba
004a04f100250000ff430000ff300000ff6d0000ffad0000ff460000ff56
0000ff730000fed70000fe5c000000630000ff460000ff56000000500000
fef90000fe4f0000ff3e0000ff560000ff7c0000ff690000ff560000fef9
0000ff780000ff560000ff3e0000ff430000ff690000ff7c000000500000
fddd0000ff750000ffad0000ff090000ff090000fee00000fee00000ff78
0000ff210000ff0905c700100400005c0556002b0473002b0556002b0473
002b0556002b0473002b05c70051038d004e05c7001b0473004f05c7001b
0473004f05c7001b0473004f05c7001b0473004f05c7001b0473004f0556
0029038d004f05560029038d004f05560029038d004f05560029038d004f
05560029038d004f04e3002e02aa0042063900530400004d0639002b0473
00460639002b047300460639002b047300460639002b047300460639002b
04730046031d00290239ffe2031d00290239ffe20639002e047300440639
002e047300440639002e04730044055600260239002b055600260239ffe7
055600260239ffe6055600260239ffec078d002906aa004c078d002906aa
004c078d002906aa004c05c7001d0473004605c7001d0473004605c7001d
0473004605c7001d04730046063900500400004a063900500400004a0639
00500400004a063900500400004a04e300340473002704e3003404730027
05c70026038d004b05c70026038d004b05c70026038d004b05c70026038d
004b0473006a031d00510473006a031d00510473006a031d00510473006a
031d00380473006a031d00510556004a02aa00260556004a02aa00260556
004a02aa00260556004a02aa002605c700300473003f05c700300473003f
05c700300473003f05c700300473003f05c700300473003f05c700100400
001305c70010040000130800001205c700110800001205c7001105c7000e
0400002f05c7000e0400002f05c700120400001105560021038d00150556
0021038d001505560021038d00150473004602aa001605c7001104000011
0400005c0239000704770057047700570477005704770057047700570477
0057047700570477005705c7001005c70010066700000667000005f90000
05f9000005c7001005c70010036b0041036b0041036b0041036b0041036b
0041036b0041066900000669000007ea000007ea000007ea000007ea0000
048b0012048b0012048b0012048b0012048b0012048b0012048b0012048b
0012074c0000074c000008cd000008cd000008cd000008cd000008cd0015
08cd0015027b002c027b002c027bffd2027bffd2027b0000027b0000027b
ffdf027bffdf043000000430000005b1000005b1000005b1000005b10000
05b1001505b100150400004a0400004a0400004a0400004a0400004a0400
004a0701000507010005087d0000087d000007e7000007e700000427000a
0427000a0427000a0427000a0427000a0427000a0427000a0427000a06ee
0000085b0000085b0000085b001505d9004f05d9004f05d9004f05d9004f
05d9004f05d9004f05d9004f05d9004f0717000007170000089800000898
0000081600000816000008160015081600150477005704770057036b0041
036b0041048b0012048b0012027bfff9027b002c0400004a0400004a0427
000a0427000a05d9004f05d9004f04770057047700570477005704770057
0477005704770057047700570477005705c7001005c70010066700000667
000005f9000005f9000005c7001005c70010048b0012048b0012048b0012
048b0012048b0012048b0012048b0012048b0012074c0000074c000008cd
000008cd000008cd000008cd000008cd001508cd001505d9004f05d9004f
05d9004f05d9004f05d9004f05d9004f05d9004f05d9004f071700000717
000008980000089800000816000008160000081600150816001504770057
04770057047700570477005704770057047700570477005705c7001005c7
001005c7001005c7001005c7001002aa00e102aa00be02aa00e102aa0015
02aa0015048b0012048b0012048b0012048b0012048b001206c0000006d4
000007a3000007c100000639002b02aa000002aa000002aa0015027b0000
027bfff0027bffed027bfff0027bffec027bffeb031d0029031d00290487
000004a5000002aa000002aa000002aa00150427000a0427000a0427000a
0427000a04480065044800650427000a0427000a05c7001205c70012076d
00000777000005f6000002aaff8402aaff8402aa002605d9004f05d9004f
05d9004f05d9004f05d9004f076700000681000007960000069c00000668
004b02aa00e402aa00e10518004905c7005105c7005106aa004c05c7001d
09b50026080000120639002e0556004a08f000290400003004c100660000
ffcb0000ffcb0000ffb70000ffb70239001702aaffc70400ffec04e30034
0473004f023900210473004602e300260555001f0555001f02aa007e02aa
007e02aa00d102aa00d102aa008402aa002602aa000c02aa000302aa000e
02aa00af02aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa
003a0000ff7b0000ff970000fed20000ff230000ff7b0000ff7b0000feb2
0000ff970000ffcb0000ffcb0000ffcb04e30029047300270426000505a0
000505c7005a045200430430004a049e0046049e004603d500460337001b
0239002a032f001904e8004603df004605730049049c00460400004a0430
00460473004a0473004a0473004a05c70046040300490400004a0400004a
043b004d045400230454002303ee0025045f0046044f004605b50046044f
00460400001305c70011038d0015035d002f03b5004a045a000f03a20048
03e50005049c0046043b004d04cb0004047d000c036a000504c60005032b
001e032b001e0370001e031f001e031f001e03b9001e03c7001e01e5001e
028e001e03d1001e032d001e0495001e0386001e03d4001e039c001e0324
001e02e7001e038e001e0315001e0382001e04c200050256001e0256001e
02b3001e035a001e0298001e029c001e0212001e0212001e0205001e0205
001e025e001e016b001e02b1001e03ef001e0274001e024b001e0213001e
024a001e024a001e029b001e01b2001e029a001e027d001e03ef001f0265
000a029400050256001e02400005025b001e02db001e02460005016b001e
0209001e029a001e0265000a0256001e02400005024b001e02db001e0246
0005077d00460a98004602a700460a7800460541ffba01e9001e04540010
0000ff0d0000ff350000fece0000feb70000fec90000ffc70000ff4f0000
ff9e0000fef002be006902be00690376000a0376000a03c0ffba039cffba
03c0ffba039cffba0563002c04e3003d0545003d04be002704a7ffdf0543
004f04e2003805510016048f00280000000000000000000000000400ffef
04000051046b001c01e0ffba01e0ffb101e0ffba01e0ffba06d0002e0984
00230400000008000000040000000800000002ab00000200000001550000
0400000002000000019a000000ab00000000000005c70051078d00290573
00490602003f0695004f0695004e05c7001005c700510400008005560023
0556004a031d004a038d001504420036000001020000ff420000fe840000
ff3a0000ffcb0448001705c7008705c7005105c700870517002903a20048
0000ff430000ffae0000ffae02870054000000000298ffba033d001e0000
ff3a0000ff480000ff490000ff7e0000ff4f0000ff4a0000fe9e05320039
05320039022cffb6022cffb60532003c0532003c022cffba022cffba0532
003905320039022cffba022cffba0532003905320039022cffba022cffba
0532003905320039022cffba022cffba0532003905320039022cffba022c
ffba0532003905320039022cffba022cffba049e0034047800300430ffba
0430ffba049e0034047800300430ffba0430ffba02be004f02be004f02be
006902be00690376000a0376000a073200400732004004deffba04deffba
0454003403c000460454ffba02e2ffba0454003403c000460454ffba02e2
ffba0454003403c000460454ffba02e2ffba0610002f0610002f0270ffba
0298ffba0610002f0610002f0270ffba0298ffba060e00290708002902e2
ffba0456ffba060e00290708002902e2ffba0456ffba060e002907080029
02e2ffba0456ffba02e2002102e200210352ffba0352ffba02e2002102e2
00210352ffba0352ffba0454003e0454003e022cffba022cffba0454003e
0454003e022cffba022cffba0454003e0454003e022cffba022cffba039c
0023039c002301e0ffba01e0ffba0376000a0376000a0376000a0376000a
073200400732004004deffba04deffba0473ffe60473004f02aa000f06aa
0016047300070473ffde038dfffc0335ffe8031d000b02aafff2038d0015
0400002502aa001e0427004a06c30026024d0017027b001704730017045f
003504f000170473002b0473004f02aa004204df004d047300440239002b
06aa004c0473004604730027038d004b031d005103a9ff85040000130400
002f038d00150400005c0499005c0473004f038d004f036b0041036b002f
038d00380239002a038d002e02e600000473003f03ab001b02b3001e0213
001e0213001f024b001e0205001e0190001e0190ffa60242001e029a001e
016b0012019b001e016b001e016b001201d60000016b001e016b001e0268
001e03ef001e03ef001f029affaa029a001d0296001e024b001e035b001e
01bd001e016bffba01b2001e029a001e02da001e029a00180279001e0265
000a023d001e023d001e028c001e023e001e025a001e0000fe1e0000fe1e
0000ff730000febc02aa00bf0256001e0212001e024b001e024a000a0212
001e0639005305c700100473002005c7005102aa00320477005704770057
047700570477005704770057047700570477005704770057027bffb0027b
ffd8027bffc4027bffd8027bffc4027bffeb027bffc4027bffeb0427000a
0427000a0427000a0427000a0427000a0427000a0427000a0427000a027b
ffd8027bffd8027bffda027bffda0427000a0427000a0427000a0427000a
03e400220454001a03ba00290556002b05c7003005bc000905560029038d
004f0400001602aaffc7069900510473004e05c70026038d004b05c70012
04000011038d002e038d004e038d002e0239002b0517002303a2002205c7
000e0400002f05c7000e0400002f043900470337003805f6000c047d000c
0000fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff140000
ff7b0000feb20758000503d50046038d002e055600230239001705560026
04e3003405c700260400ffff02aa00000639002b047300460639002e0473
004405560021038d001503ef003e052d002b03de004604fe00500000ff3b
0000ff510000ff080000fef90000fea40000fea40239002a0627002c05c7
001d0627002c0000fecb0000ff1d0000fef10000fef30000feec0000feec
0000fee80000fee60000feef0000fee80000fdb4063900500473004e0800
001205c700110610002b0000fe730696005004e5001308b8001206b10011
02aa00af02ff00230239008c0239008c040000990400009902aa00af02aa
00af02aa00af02aa00140000004600000036000000310000005600000044
000000560000004a00000049055600550400003403e100420368004c03e1
004003c1001d03fe002603dc002f0400004c03e7003b03f400430400003f
0439006702c1ffe70400003203b8001c0400003303e100450400004c03b8
001b040000480400003f0239002a04b0001c06630010067800100479003b
069000100439000a040600140444004e04a4001903c3000e038d000e04a4
004e04e70014025400170342001904a6001403c3000e05790010047bfff0
04f2004803fc001404f20048048900140393004803d1001d04830012043d
00120623001d0431000c043100120425001d05a4000005f6004803c30002
04f2004803fc001404a40019049d001f0439000a0439000a0439000a0439
000a0439000a0439000a0444004e03c3000e03c3000e03c3000e03c3000e
02540014025400170254ffe40254ffeb047bfff004f2004804f2004804f2
004804f2004804f200480483001204830012048300120483001204310012
0439000a0439000a0439000a0444004e0444004e0444004e0444004e04a4
001904a4001903c3000e03c3000e03c3000e03c3000e03c3000e04a4004e
04a4004e04a4004e04a4004e04e7001404e700040254ffe80254ffea0254
fffd0254001702540017059200170342001904a6001403c3000e03c3000e
03c3000e03c3000e047bfff0047bfff0047bfff004bc001404f2004804f2
004804f20048048900140489001404890014039300480393004803930048
039300480393004803d1001d03d1001d03d1001d03d1001d048300120483
0012048300120483001204830012048300120623001d0623001d0623001d
0623001d0431001204310012043100120425001d0425001d0425001d0439
000a05a4000004f200480439000a04060014038d000e03a6000a03c3000e
0425001d04e7001404f200480254001704a600140439000a05790010047b
fff003e9003704f2004804e7001403fc001403e9000c03d1001d04310012
0548002f0431000c0500001404c500270439000a03c3000e04e700140254
001704f2004804c50027043100120254ffeb0431001203c3000e0506001d
038d000e0444004e03930048025400170254ffeb03420019063f000a063f
00140500001d047900140468001004d500140439000a0414000804060014
038d000e045e000003c3000e063900000354002704d5001f04d5001f0479
00140496000a0579001004e7001404f2004804e7001403fc00140444004e
03d1001d046800100548002f0431000c04d70014047bfffe06d7001406d9
001404bc001d060c000e041d000e044800480704001404890000038d000e
02a8001e02a8007002a8004402a8004602a8003f02a8003f02a8003b02a8
003902a8004202a8003b02a8001f02a8007102a8004502a8004702a80040
02a8004002a8003c02a8003a02a8004302a8003c0481002f08c4004a05a0
002e04ed009d04ed009d069b002a04d5008505e30085023200a302320096
0232004e023200200232006702320031023200390232001e0232001e0232
00420232001c023200250232002e023200170232000b0d6500460e320046
0000ffba0f6200460000ff640000ff9a0000ffb40000ff9c049e00340478
00300430ffba0430ffba049e0034047800300430ffba0430ffba07320040
0732004004deffba04deffba0376000a0376000a049e0034047800300430
ffba0430ffba01bcffcc01e0ff6801bcffe601e0ff8205280097046f001e
022cffba022cffba05280097046f001e022cffba022cffba05280097046f
001e022cffba022cffba039c0006039c0006039c0006039c0006067f0044
067f0045067f0044067f0045049e0034047800300430ffba0430ffba0732
00400732004004deffba04deffba073200400732004004deffba04deffba
045400290454002902e2ffba02e2ffba044dffcb04a5ffcc043effd504a2
ffcd07b9003205ef003207230032051700350b75fb8b0000fe2c0000fffc
0000006b000000730000006b05280097046f001e022cffba022cffba060e
00290708002902e2ffba0456ffba060e00290708002902e2ffba0456ffba
05280097046f001e022cffba022cffba05280097046f001e022cffba022c
ffba05280097046f001e022cffba022cffba01a8fff504dd002b03d60012
0592004a042d00230639002004a4002c0639002e040000230a6600440471
00260473000508b7000c05fc000c07670034066000270815ffee05d30023
0639002e04e800460857000c06a3000c089d002b06bf004606390029049c
004605df002b0473004602aa004202aa00420427004a07d600290469002b
047a005003f9004c053500240450ffd8078d002905c70017069600260488
004f038d001f0428004a03d500050172ffe2040000130473006a05560021
0239002a0a03006f0a0bffa70bcf000009fa00320f6200440196ffba0196
ffba0196ffba01e0000201a8003201a800460196ffba01a8001a0251003a
01a8002901a800460196ffba01a800480196ffba01a800290196ffba01a8
00460196ffba01a8006e0196ffba01f4006501f4001601f4001601f40011
01f4ffd2022e008d01f400430199004602bf004d02bf005504000009062f
002605c7002606590062067a003a05bf002605b500930518003a05c70026
07850026064f0062058b003a0489003a07dd003a05e6005005c8001c04fd
ffd305cf00820628001205c1007d06c9002605a100780618000605a10086
05d100260593008d06cd000005ca00a606ac002605d10026062800120565
0078057700260586005104bd003a074500780670ffda06180064073b008c
0199000c01fe004a0154ffd100f7ffd201a8ffa501daffd204750024068f
003504670045049b006204a2004c046f0000049b006203e80000046f0035
05df003504a9006e046f000002740046069600000465006d048600000486
0017043e005604a2004c046e0074048600350263ff9e0486004903590001
0486004c026d002106960035040e007104c9004c04860035048b0035067f
003504800046047e00610321004c067f003504a10024043b00500600005a
05350000023900af02f40010077a0045077a00450616000a090c003508f5
003508de0035091100350b1c003502f8001a02f8001a0463000304630003
056200060562000605620006056200060562000605620006056200060562
0006046c000a046c000a043affba046c000a046c000a043affba05320039
05320039022cffba022cffba049e0034047800300430ffba0430ffba0430
ffba0430ffba0430ffba0430ffba0610002f0610002f0270ffba0298ffba
04e6002704e600270270ffba0298ffba039c0023039c002301e0ffba01e0
ffba02e2002102e200210352ffba0352ffba05280097049e0011022cffba
022cffba05280097049e0011022cffba022cffba0339001903390019039c
0006039c0006036b002f036b002f0000ff1e0000ff480000ff1e0000fee7
0000ff4f0000fef90000ffb50000ff520000ff470000ffb50000ff520000
ff470000ff010000fea60000ff010000ff230000ff240000ff570000ff57
0000ff920000ff920000ff920000ff920000ff2f0000fed70000ff340000
ff3103e400220454001a0000ffae02ef002103b7003d0419003d04250016
0000ffad0000fefe028d00ab028d00a00479001904790019047900190479
0019047900190479001904790019047900190479001904e60027028d00ab
0327002202300014017a002e0000ff750400001606d0002e080000000000
00000000ff4d0532003905320039022cffba022cffba0156008802be0069
02be00690880004008800040062cffba062cffba060e00290708002902e2
ffba0456ffba02ad003901e900390376000a0376000a0000ffce04000016
0639ffc4049cff890bb900000895000005df000c0471003405f6000c047d
000c059e00400652004a04d1003b0572005102aa003202aa003202cd004d
02ab00af055500af0200005908000000080000000aa7003b0240003503f8
0035046b0015027f00250800014b07a7001407a7001402cd000007820072
02aa003202aa00d602aa00430774007d060b007d060100af03e7003b0452
fffd03f3004d03f3003c0400007202aa009707a7001404000072048f0050
0459000c07a7001404000062049700af05e5001d053900af053900af02aa
00af085a00d1053900af02aa00af01c70000000000000800000008000000
08000000080000000800000008000000080000000800000005f400760454
003403c000460454ffba02e2ffba045400290454002902e2ffba02e2ffba
0000ff530266001d0155001902660018026600210266001d026600200266
00230266001d026600170266001702660017019900310199000f0266001d
0266004a026600180266000f02660018026600210266001d026600200266
00230266001d026600170266001702660017019900310199000f029a001e
02b1001e016b001e03ef001e02ab002a029b001e01bd001e01b2001e06aa
004506aa004505c7005108a7003b05b700490719003704660047056c004c
07d2003b0414ffb0073f001107e700350639002b04730019047300190581
fff2046d001605aa004406e3002b05c7001d05fa003b05ec004404e30034
06390050076a0072065c004b05c7002605c7002605c7002607990032099e
001405c700100556002103ab001f0668004b05b50014027b00060639002e
05c70010076a00b8052b00560314002404ec00800581003004e3003d08ec
0035033f0031052f008c04840030039c00290492004b029d002a07370050
09e900140462000f03be0003051700290639002905d6002b0639007c04e3
003e04e3003e0556fffe05c7ffb604000029038d002d023900290239feb6
059d002006aa0059071200280af600280600004806000048081d00480600
0048060000180600000f06000018060000480600002103ac0048031d002c
061e002c091f002c08e4002c05c7001008df00100be000100ee1001008e6
002c05c7000e08e6000e0be7000e0556002605c7005105c7001b078d0029
0239002a046e002a06a3002a0612002a0400001306390013086e00130aa3
00130630002a0400002f062a002f085f002f0239002b038d004e0473004f
06aa004c0895005605c7001b0895005605c70070060000510582003205c7
001b089500560600001d02aa008002aa008002aa008002aa004a02aa0080
02aa004a0375004a0375004a035c004a035c004a035c004a035f004a035f
004a035f004a06b500320000fc000000fc000000fbff020000600464000f
0556004b0556003e048f0029040000230400006102aa001504640012035f
004a035f004a046400120464001202aa00d602aa004b02aa00d602aa0043
02aa00d602aa004305f4004605f400460461005204610019053900b00539
00af053900af0539004b0400007302aa00dd02d6004d02ab00d102000043
0200005a0200004202aa0097040000630400017a040000640400005c0800
ffed0800ffed02000023023900b00239008305c7005102aa003202000043
040000510400006404000076000000460225006401c400640225006401c4
00640639002b04730046067e004a050c0026043900470439004703e50033
03e50033048b0033048b0033038d000e03930048094b001005f5005c0911
001005f5005c087300100617005c071200100590005c071200100590005c
071200100590005c05c7006f038d004e06390029047300440639002e0473
00440639002904730044069c00260351002b055600260239001406f7000a
048c000a06aa00500483004a0a7000500649004a04e30034047300170584
000a054fffe206d8000a067bffdb063900500473004e07470050052b004e
05650032043d0032051800320476004005c70010040000130800001205c7
0011045d00280403002804e300290473002704e300290473001704970028
0374002a039c0035039c0035049a0023049a00230400003f0400003f027d
002705c7004f03ab002b0803004c05c7004603b5004b05a9001405e00026
03d90030063900250400004a0435002b038d004b04510050045100500451
005005560026023900170627002c04b9004b0435002b038d004b05560051
0372004e0639002b03ea000a05c7001d0473004605c7ffcc038dffdf038d
004e047300460600000a0590003204e3ffc702aa0042063e0050045e004a
06250050042c004a06a4002a046b00230639001404000011063900140473
001405c7001d0473001405c70020038d001604730046031d004506ea0000
043900290696005005eb000a063900060556004a040000770594002b0556
00280437006607b3005005d9004f0574001403c7001e03c9001e06aa004c
04e3002e04e30034078d0029031d0029094f00060477ffed0598005c039d
0047038dfff70497000002aa00420473004e0322000a029e000d0279000a
06aa004c04810046045600460424004e0424004e0400006005ec004a05c7
004605c700460649004a0649004a04410032048900140328004b04cd004b
03e000140520001403f8002805a50028026bff850473003f0473003f06aa
004c06aa004c04a9000903b2000f03b2000f03b2ff8b0400002f0400fefc
0400fefc0400feab0400001102aa00270292001e01f1000a01f1002d029f
ffe40669004f0581002a0592004e0673003f0477005704c500270556002b
0556004a0532003905320039022cffba022cffba0532003905320039022c
ffba022cffba05320039053200390319ffba0319ffba0376000a0376000a
05280097049e0011022cffba022cffba0610002f0610002f0270ffba0298
ffba04e6002704e600270270ffba0298ffba0454003e0454003e022cffba
022cffba0000fecf0000fef60000ff300000fdea0000fe6d0000ff430000
ff110000ff070000ff070000fd5d0000fc330000fc4c0000fd3c0000fe04
0000fd9b0000fef90000fe6703fc00ee098200420042000000>
<000000000000006c0000006c0000006c0000006c00000146000001fc0000
03d8000005d40000080400000a1a00000a7200000b0e00000bac00000d6a
00000df400000e7600000eac00000efc00000f5200001128000011fa0000
1342000014920000156400001724000018720000193c00001b2200001c62
00001ce200001da600001e5800001ec800001f840000208e000023340000
24e0000026ce00002860000029f000002bd000002d7400002f800000317c
000032660000333a0000354e000036500000384400003a2200003c420000
3d8400003fd6000041de000043b4000044c600004652000047e200004a8c
00004ce200004ecc00005032000050d60000512a000051ba000052560000
528a000052de000055e8000057b60000591400005b1a00005cb800005e64
0000610e00006374000064ac0000661a000068960000699400006cac0000
6f34000070f6000072f8000074ee00007692000079d200007abe00007cbc
00007ea40000818e00008504000086fe0000896c00008ad400008b120000
8c9000008d3e00008d8a00008dbe00008dfc00008e4200008e7200008eb0
00008ee600008f2000008f6200008f9600008fe400009022000090640000
90a2000090d20000910a0000913a00009178000091a6000091d60000921a
00009256000092a0000092de00009318000093480000937c000093c80000
94020000944000009486000094e00000963800009716000098e000009a9c
00009d3000009d8400009e2c00009fd80000a25e0000a3ea0000a6200000
a6780000a6fa0000a7f40000aa5c0000ac7c0000add80000ae9e0000af74
0000b04a0000b2840000b3ce0000b4ee0000b5e20000b6b20000b8260000
b9920000bb620000bbf20000bdac0000bffe0000c1f00000c30a0000c3dc
0000c4420000c4fa0000c6ba0000c80e0000c8b20000c9d00000ca9c0000
cb4a0000cb8e0000cbe60000cc260000ceec0000d0da0000d1100000d146
0000d24c0000d3480000d3da0000d4660000d51a0000d6100000d6760000
d6c60000d7260000d9180000d9ba0000da400000dbba0000dd480000dfc8
0000e0200000e0ac0000e1a80000e51e0000e5560000e5900000e5c80000
e60e0000e6400000e6700000e6a00000e7020000e7340000e76e0000e79e
0000e7ce0000e8120000e8720000e8ae0000e9840000e9e00000ea820000
eab60000eb440000eb920000ec060000ec9a0000ed320000eda80000ee08
0000ef600000f08c0000f0c60000f1000000f1480000f1960000f2040000
f3be0000f5320000f5720000f5ae0000f6e00000f8520000f89e0000f9b2
0000fa7a0000fb8e0000fcd80000fed00001009a000102e6000104d00001
05060001054200010574000105ba000105fe0001063600010678000106b8
000106f0000108ea00010924000109680001099e000109d2000109f80001
0a1e00010a5200010c4a00010e0400010e2c00010e5200010eb200010ee4
00010f1c00010f4c000110b0000111b0000111fe00011230000112680001
12a4000112d400011318000113600001139c000113e40001142200011468
000114a2000114e40001151e00011544000115680001159c000116ce0001
17000001173400011770000117a4000117f40001184e00011886000118d2
0001198400011ae600011c5c00011dc200011eee00012078000121500001
222000012350000123be000123d6000124f8000127ba000127fa0001283a
0001287a000128b80001291600012974000129e200012a0200012b060001
2b9200012bc800012c3200012c7c00012cc600012ce200012cfe00012d1e
00012d3e00012d5e00012d7e00012da400012dca00012df000012e160001
2e4600012e6e00012e9600012ec200012eee00012f2200012f4c00012f78
00012fae00012fd8000130040001303a000130640001308e000130c20001
30f2000131260001316a0001319a000131ce000132100001324400013276
000132b8000132ec0001331c0001335e000133a2000133e8000134440001
34600001347c00013498000134b4000134d00001363e000138e800013b58
00013b7400013b8e00013baa00013bc600013be200013bfe00013c5a0001
3c9400013cfe00013dd600013e7a00013f5200013fd20001405a000140ce
00014164000141c20001420800014266000142c8000143080001435c0001
43c8000144260001445e0001461c00014776000147a0000147bc000147e8
000148200001486c000148a2000148d20001490200014932000149680001
499a000149de00014a0c00014a5800014a8600014acc00014b0200014b46
00014b8a00014bc800014bf800014c1e00014e8c00014ebc00014ef00001
50b4000152f200015322000153580001538a000153f00001542600015466
0001548c000154b0000154f4000156540001567a000156a0000158860001
58ac000158d0000158f60001591c00015aaa00015cc000015cf200015d22
00015d5200015d8200015da800015dcc00015e0200015e3c00015f5e0001
605400016084000160b4000160e60001611a000161540001619a000161c0
000161e60001621e0001625a00016290000162c8000163b2000163ea0001
642e0001646400016494000164ca0001650a0001655400016584000165bc
000165f00001662c00016672000166be000166f600016736000167ac0001
67d8000169a400016adc00016d0c00016fd8000172460001747e000174fc
00017568000175780001763a00017674000178a800017aba00017be40001
7d1c00017f680001815200018190000181a0000181b000018296000182a6
000182b6000182c6000182d6000182e60001840600018416000184260001
857a0001858a0001859a000185aa000186ba000186ca000186da000186ea
000188e800018a6e00018ab000018aec00018b1c00018b5800018b900001
8bbe00018bf400018d5200018e6a00018fe80001910000019200000192c4
0001948c0001960c0001974e0001985a00019a5c00019a6c00019b600001
9c7400019d5800019ede0001a02c0001a1ca0001a2380001a2740001a2ae
0001a2ea0001a32a0001a37e0001a50a0001a53c0001a66a0001a67a0001
a68a0001a6cc0001a6dc0001a88a0001aab20001ac3c0001ac720001ae38
0001afa20001afb20001b0e80001b0f80001b1080001b2340001b2440001
b5560001b6740001b8160001ba360001bc280001bd640001bd740001bd84
0001bd940001bec00001bed00001bee00001bef00001c0480001c1c20001
c1d20001c3240001c4840001c6200001c7de0001c9160001cac80001cbf2
0001cc1e0001cdc80001cdfe0001ce0e0001cf7e0001d0d60001d1a80001
d2d80001d2e80001d69e0001d7e00001d9740001db840001dda80001df14
0001e0a60001e1e80001e1f80001e3060001e3160001e3260001e40c0001
e41c0001e5ae0001e5be0001e6f60001e8420001ea300001ec360001ed6e
0001ef380001f04a0001f07c0001f1fe0001f3960001f3ca0001f5980001
f5d20001f6e40001f6f40001f7040001f7540001f7640001f8ea0001fa9a
0001fcd20001fd120001ff2e000200900002013e00020208000202380002
042400020572000206100002075c0002080e0002090400020956000209f4
00020ad400020b0a00020b8a00020bde00020cce00020d2200020d5c0002
0d9400020dcc00020e0800020e5200020e9a00020f28000211580002120c
00021314000213d2000214ee000215740002163e000217520002185e0002
18f00002199000021a2200021b2a00021bec00021d1200021dcc00021e90
00021f540002212400022232000223440002249c00022602000226ee0002
27760002297200022a5000022a8a00022abc00022aee00022b3e00022b74
00022c8200022c9a00022cb200022cca00022ce200022d0000022e580002
2e7000022e8800022ea800022ec800022ee000022ef80002317000023288
000233f00002340600023590000235a8000235c000023738000237500002
3766000238600002387600023a2200023b5200023c9200023e0400023f6e
000241480002428a000242a0000244ec000246220002463a000246520002
466a00024682000249040002493400024a4800024b0e00024bcc00024c60
00024d2e00024e6a00024e7a00024eae00024f720002512e0002520c0002
527a000253a4000254060002551c000255ee0002567a000256f8000257d4
0002591400025a0e00025ac400025bb000025c7800025d5600025e260002
5f0400025f7c000261a8000261d2000261fc0002620c0002623600026370
0002648e0002659e000265c8000265f20002661c00026646000266700002
685800026882000268ac000268d6000269000002692a000269540002697e
000269a8000269dc00026a0600026a3000026a5a00026bf400026c040002
6d3c00026d4c00026d7600026da000026dca00026df400026f8e00027208
0002736600027376000274e8000274f8000276560002783a0002793c0002
7ac200027c8c00027ee00002804e000282420002825200028262000283c6
000283f00002841a000284440002846e00028498000284c2000284ec0002
8516000285400002856a00028594000285be000285e8000286120002863c
000288f400028adc00028c6600028ea60002901e00029048000290720002
909c000290c6000290f00002911a000291440002916e00029198000291c2
000291ec00029216000292400002926a00029294000292be000292e80002
93120002944200029788000297b2000297dc00029806000298300002985a
00029884000298ae000298d8000299020002992c00029956000299800002
99aa000299d4000299fe00029a2800029a5200029a7c00029aa600029ad0
00029afa00029b2400029b4e00029b7800029ba200029bcc00029bf60002
9c2000029dac00029f3a00029f6400029f8c0002a0960002a0c00002a0ea
0002a2cc0002a4a00002a6be0002a6ce0002a8760002aa0e0002ac800002
aed20002b04a0002b05a0002b1060002b1b00002b2ec0002b2fc0002b3c8
0002b3d80002b57a0002b7620002b8ce0002b8de0002b9e60002b9f60002
bb700002bb800002bcae0002bcbe0002bdfa0002bfae0002c0a60002c0b6
0002c1a80002c3060002c3b20002c3c20002c5040002c6b20002c7a80002
c7b80002c85c0002c86c0002c9540002c9640002ca2e0002ca3e0002cb54
0002cb640002cd2a0002cd3a0002cea80002ceb80002d12a0002d13a0002
d34a0002d35a0002d4d40002d4e40002d6160002d6260002d7e40002d7f4
0002d96a0002d97a0002dae80002daf80002db080002db180002dcd80002
dce80002dcf80002dd080002de580002df900002e0a80002e1a20002e344
0002e4d60002e63e0002e78c0002e9540002e9640002eab60002ec180002
edfe0002ee160002ef9e0002f1420002f37c0002f38c0002f39c0002f3ac
0002f5160002f5260002f5f80002f6080002f7400002f7500002f8360002
f8460002f97e0002f98e0002fa480002fa580002fb7e0002fce20002fe50
0002fffe0003012e0003013e000302b8000303fa0003061a000307ec0003
08fc0003090c000309380003096400030c2e00030e8a0003114a0003138c
0003154a000316a4000316ce000316f80003170800031718000317420003
176c00031796000317a6000317b6000317e00003180a0003181a0003182a
000318540003187e000318a8000318b8000318c8000318d8000318e80003
18f8000319080003193200031942000319520003197c000319a6000319d0
000319fa00031a2400031a4e00031a7800031aa200031acc00031af60003
1b2000031b4a00031b7400031b9e00031bc800031bf200031c1c00031c46
00031c7000031c9a00031cc400031cee00031d1800031d4200031d6c0003
1d9600031dc000031dea00031e1400031e3e00031e6800031e9200031ebc
00031ee600031f1000031f3a00031f6400031f8e00031fb800031fe20003
200c00032036000320600003208a000320b4000320de0003210800032132
0003215c00032186000321b0000321da000322040003222e000322d60003
231a00032390000323ba000323e40003240e00032438000324620003248c
000324b6000324e00003250a000325340003255e00032588000325b20003
25dc00032606000326300003265a00032684000326ae000326d800032702
0003272c00032756000328080003283c00032870000328a400032a0e0003
2bb200032d4800032f4200032fc600033046000330ae00033130000331b0
00033218000332d6000333de0003349c000335a2000335c2000336900003
376c0003385a00033910000339b200033af800033d1e00033fb40003401c
00034084000340ec0003415400034212000342d0000342f2000343140003
4336000343580003437a0003439c000343ae000343c0000343d2000343e4
000343f60003445e000344c6000344e8000344fa0003450c0003451e0003
452e00034540000345520003456400034576000345880003459a00034666
0003468800034754000347760003484e0003487c000348a8000348ce0003
491200034962000349d200034a2000034a8e00034aea00034b4a00034b92
00034c0400034c5400034c9a00034cec00034d3800034d8a00034dda0003
4e3c00034e8200034ed000034f1600034f6400034fb000034fd600034ffc
000350220003506000035090000350c0000351240003518a000351ee0003
5250000352b80003531a0003537a000353ea00035446000354a0000354c6
000355080003552e000355540003557a000355a0000355c6000356000003
564400035692000356ce00035714000357580003579e000357e000035842
0003587a000358ba000358ee000359240003595800035992000359b80003
59f200035a2200035a5200035a7800035a9e00035ac400035aea00035b10
00035b5800035b9400035bdc00035c2200035c6800035c8e00035cd60003
5d0600035d3a00035d6000035d8600035dac00035dd200035df800035e2e
00035e5e00035e8e00035ec200035efc00035f3000035f7200035fa20003
5fd60003600a000360660003609000036182000361ac000362bc000362e6
000363dc0003640600036532000366260003676c000368dc00036a0c0003
6b0200036c1a00036f46000372ea000374ee00037742000379a000037c86
00037ea20003801400038024000381aa000383c600038584000387e40003
8b4e00038d1600038ed40003902e0003903e0003912200039290000393ae
000394f4000395ea0003966000039788000398a200039a2a00039aac0003
9b9c00039c9200039d8a00039e1c0003a02e0003a1be0003a2440003a3c6
0003a4320003a49c0003a51e0003a6e00003a8a80003a9380003a9840003
a9c20003aa040003aa4c0003aa780003aabe0003aaf40003ab300003ab6e
0003abac0003ac340003acbc0003acfe0003ad360003ad700003adaa0003
add20003adfa0003ae3e0003ae820003aec00003aefe0003af2e0003af5e
0003af840003afaa0003afec0003b02e0003b0740003b0ba0003b1120003
b16a0003b1c60003b2220003b27e0003b2da0003b3280003b3760003b39e
0003b3c60003b3ec0003b4120003b4560003b49a0003b4e60003b5320003
b57c0003b5c60003b6140003b6620003b6a20003b7420003b7680003b78e
0003b7d80003b8480003b8700003b8980003b8de0003b9240003b97a0003
b9d00003ba1e0003bad80003bb000003bb280003bb7c0003bbd00003bc10
0003bc500003bc760003bc9c0003bd020003bd680003bdaa0003bdec0003
be120003be380003be8e0003bee40003bf400003bf9c0003bff00003c044
0003c0920003c0e00003c12a0003c1740003c1ce0003c2280003c27c0003
c2d00003c3120003c3540003c3f20003c4900003c4da0003c5240003c576
0003c5c80003c62e0003c6940003c6ec0003c7440003c7700003c79c0003
c7c80003c7f40003c8200003c84c0003c8780003c8a40003c8ca0003c8f0
0003c91c0003c9480003c9960003c9e40003ca300003ca7c0003cacc0003
cb1c0003cb960003cbf80003cc700003ccba0003ce4c0003ce800003ceb4
0003ceea0003cf0e0003cf2e0003cf4e0003cfd00003d0380003d0800003
d0c80003d1140003d17e0003d1a60003d1ce0003d1f40003d21a0003d26a
0003d2ba0003d34e0003d3a00003d3fe0003d4160003d47c0003d4940003
d57a0003d68a0003d7580003d8520003d8be0003d9240003d9820003d9e4
0003da6a0003daf00003db540003dbb80003dc240003dc900003dce60003
dd3c0003dd6e0003dda00003ddc60003ddec0003de580003debe0003df1c
0003df7e0003e0900003e19c0003e2aa0003e3ae0003e3d40003e3fc0003
e4200003e4440003e46c0003e4940003e4ba0003e4e00003e6020003e73e
0003e86c0003e9980003ea520003eb0c0003ebcc0003ec8c0003ed700003
ee540003ef500003f04c0003f1300003f2140003f2ea0003f3c00003f40a
0003f4540003f47a0003f4a00003f4f00003f5400003f5640003f5880003
f65e0003f66e0003f6c20003f7160003f7740003f7d20003f8120003f852
0003f89c0003f8e60003f9360003f9860003f9dc0003fa320003fa840003
fac20003fb3c0003fb7e0003fbc20003fc500003fcde0003fe900003fea0
0003feda0003ff140003ff440003ff740003ffa80003ffdc000400160004
0050000400a4000400f80004015a000401bc0004036c000404f400040530
00040568000405b2000405fc0004064200040688000406d8000408fe0004
09240004094a0004099e00040c4800040d1a00040db600040e0400040e42
00040e74000410620004131e000413cc000415300004166a000417160004
18ac00041bfe00041e3a00041eae00041f2200041fb4000420a6000420c4
0004213e000422640004234000042352000424b2000426380004265e0004
271c0004273a0004276000042786000427ac000427d2000427f80004281e
000428440004286a000428b6000429160004293e0004296400042ac20004
2c9e00042cae00042d7e00042e8e00042eec000430040004319200043238
0004337e000433d0000434220004343a00043488000434b0000435c40004
35f00004362c00043686000436d00004371c0004378c00043852000438ce
0004398e00043a0600043ae000043b7000043baa00043be600043d5e0004
3e4e00043e9800043ede0004403c000441d2000441e20004431a0004440e
0004454200044602000447160004485e0004486e0004497a00044abc0004
4be800044d1600044f0000045046000451ae0004533a00045532000456be
000457840004584e00045a7600045cc400045daa00046006000461ea0004
63100004649a000464aa000465de0004673600046896000469fa00046bfe
00046dac00046fc600046fd6000470e0000471fc000472d60004740e0004
75020004765600047790000478b000047a7c00047bde00047d3600047e4a
00047f74000480a4000482440004837000048466000485a6000487000004
87f2000488260004886a000489000004891000048986000489fc00048a8a
00048ae400048b1e00048b8600048bd000048c1800048c6600048dc00004
8dfc00048eb600048f6e00048f960004904400049088000490ba00049252
000494bc000494f2000495220004956200049592000495b8000495de0004
962200049664000496ae000496fa0004975000049792000497de00049842
0004987a000498ae00049a8200049b6400049b9c00049bdc00049c140004
9c5a00049c9400049cd000049d0a00049d4400049d8800049db800049dee
00049e2400049e5400049e9400049eda00049f0e00049f3e00049f6e0004
9faa00049fe00004a01a0004a0500004a0980004a0de0004a1120004a158
0004a1900004a1c20004a1e80004a20e0004a3420004a4700004a4a00004
a4e00004a5fe0004a7bc0004a9640004aa3e0004ab280004ab6c0004ab9e
0004adfc0004afcc0004aff60004b0aa0004b21e0004b2460004b2be0004
b2f00004b3200004b3480004b3f00004b4260004b4560004b6120004b77e
0004b8d40004ba260004bb1c0004bc680004bdca0004bf1c0004c06e0004
c27a0004c3e00004c55e0004c7560004c8cc0004c9f40004cbac0004cd06
0004ce300004cfcc0004d11c0004d2b20004d48e0004d66a0004d7920004
d8740004d9220004da760004dba60004dc860004de180004e0360004e258
0004e46a0004e61a0004e7da0004e9340004e9440004eb240004ec260004
ed620004ee4c0004ef360004f0860004f1ae0004f2ee0004f40c0004f504
0004f6b20004f8600004fac20004fbea0004fd500004fe6e0004ffbc0005
007600050134000502b20005037c00050490000505be000507f200050964
00050abe00050c2200050db400050ee600051098000511b4000512d80005
13fa000514de000515f60005160600051762000518e8000518f800051a12
00051c2800051d1000051e8e00051ff4000521660005231a000525460005
2774000529ee00052bc400052dcc00053002000532ae00053400000536b6
000537620005390400053ae400053c1200053d0200053df800053f120005
40e4000542a2000543fc0005444a000544d800054550000545c40005464a
000546d20005475c00054808000548b80005496c00054a2200054ac60005
4b6a00054bac00054c1800054c7c00054cc800054cf200054d6200054dd8
00054e4c00054ea400054f3200054fc000055040000550ca000551660005
519000055210000552860005542e000554c2000556ba00055920000559fa
00055a3000055a7400055ab800055afc00055b3200055b6400055ba60005
5c3000055c7a00055d5600055dce00055e5400055ec400055f2600055fac
0005600c00056076000560ea0005615a000561b80005625e000562f60005
6362000563f00005644a000564b800056562000566080005669e0005670e
00056790000567f4000568a00005695e00056a0a00056a9c00056afa0005
6b6600056bbc00056c3e00056cbc00056d4200056dce00056e2800056e94
00056f0400056f7200056fe200057066000570f60005715c000571d60005
7252000572ca000573700005740800057498000574f60005759400057610
000576a200057746000577f000057888000578e400057938000579a00005
7a4600057af000057bba00057c6000057cc200057d1a00057d7a00057e08
00057e8e00057f1c00057f7c00057fe00005804a000580b20005811a0005
81920005821a000582ae0005831a00058382000583e60005849200058552
000586000005868e000586ec00058758000587c80005886c000589120005
89d600058a7800058adc00058b6c00058bde00058c7600058cf400058d6e
00058dda00058e6800058ec400058f2200058fa8000590240005908c0005
90f000059144000591b20005921a000592980005930e0005938800059408
00059464000594ca0005952e000595ce000596700005972e000597de0005
983a000598b2000599100005999a00059a3200059ac000059b2600059b84
00059c1200059c8400059d1e00059db200059e2200059e9200059f0a0005
9f6800059fc80005a0420005a09c0005a0fc0005a1560005a1b20005a21a
0005a2980005a2d00005a3160005a38e0005a3d60005a44a0005a4c20005
a53a0005a5b80005a5ec0005a63a0005a6aa0005a76a0005a7dc0005a84a
0005a8b40005a9220005a9880005a9f00005aa460005aacc0005ab560005
ab900005abf80005ac9e0005ad280005adb60005ae640005ae8c0005af06
0005af820005aff60005b0d80005b1820005b1ec0005b2600005b29e0005
b2ec0005b3940005b4320005b4ce0005b54c0005b5cc0005b6720005b69a
0005b6c40005b72a0005b7ce0005b7fa0005b8240005b8740005b8ca0005
b9600005b9ac0005b9f40005ba9e0005bb120005bb800005bbd60005bc1e
0005bc6a0005bd0e0005bd780005be480005bea00005bee20005bf480005
bfa00005c00c0005c0e80005c20a0005c3460005c3b40005c41c0005c746
0005c7f40005c8580005c8ba0005ca200005cb240005cc220005ccda0005
ce2e0005cf160005d0400005d0500005d2640005d2740005d3460005d486
0005d4960005d5020005d5620005d5c00005d6cc0005d7e20005d90a0005
d97e0005d9b40005da900005dba60005dd360005de880005e0200005e0d6
0005e1da0005e2fe0005e3ea0005e5720005e6380005e7440005e8360005
ea600005ec5e0005ed900005eec00005effe0005f1480005f2ce0005f41c
0005f5980005f74c0005f8540005f9360005fa780005fb7c0005fcb80005
fdf20005feb00005fec00005fed00005ff70000600120006004a0006007e
000600ba000600ee000602c6000604840006063a0006079c000609440006
0b2e00060c9800060e1400060ff80006120c000613fc000615e400061890
00061b5600061d3400061ee2000620da0006223600062394000624de0006
25be000626b8000627e00006290400062ab000062c5600062da000062ee0
000630b20006321600063290000632be000632ec0006340c000635300006
368a000637220006377a000638060006388c00063a4000063c7e00063ee6
000641340006422c0006434e000644b2000646280006478a000648cc0006
4a7400064c5000064e9e0006514a0006538e000656600006580a00065996
00065b5c00065d0a00065e3400065f54000660c40006626c000663620006
646e00066624000667da0006695400066b1600066c5600066dfe00066f1e
0006703600067046000670740006709a000672800006748a000676080006
77c00006795800067ae800067c6e00067df600067f6e00068130000682ce
000684b80006852e0006856200068590000685cc000685fe0006860e0006
861e0006865a00068688000686be000686ee0006872400068760000687a2
000687d6000689340006894400068976000689a6000689e200068a180006
8a5400068a8a00068ac600068afc00068b4600068b8200068bb400068be4
00068c1a00068c5400068c9400068cd600068d0c00068d4200068d780006
8daa00068ee000068ef0000690b40006922c00069394000695480006964c
000697c0000699a400069b6a00069d3600069f160006a0400006a1680006
a2e40006a41e0006a4760006a53a0006a6120006a67e0006a70c0006a74c
0006a7c00006a8d20006a9100006a9be0006aa2c0006aa6c0006aaac0006
ab200006acf60006adf20006ae740006aeb00006af5e0006af9e0006b012
0006b0b20006b0f20006b1e80006b2400006b2fc0006b33e0006b37e0006
b48a0006b5220006b56a0006b64c0006b7320006b8a60006ba420006bb36
0006bc540006bd4c0006bd7a0006bda20006bdda0006be100006be380006
be660006be8c0006bebc0006bf1c0006bf860006bfb80006c00a0006c032
0006c0620006c08a0006c0b60006c0e20006c10c0006c1400006c16c0006
c1a60006c21e0006c2580006c2cc0006c2fe0006c3240006c3580006c37e
0006c3c20006c3f40006c43a0006c46e0006c4a00006c4d80006c50a0006
c5420006c5680006c58e0006c5c40006c6040006c62c0006c6520006c678
0006c69e0006c6c40006c6ee0006c7180006c7dc0006c8180006c8480006
c87c0006c8a80006c8d60006c8fc0006c9220006c9480006c98c0006c9e2
0006ca080006ca2e0006ca540006ca7a0006cabc0006caf60006cb300006
cb600006cb920006cbb80006cbea0006cc1a0006cc400006cc660006cc96
0006ccbc0006cce20006cd080006cd300006cda00006cdca0006ce420006
ce6a0006ceda0006cf020006cf660006cf940006cfc60006cffc0006d034
0006d0720006d0a60006d0ce0006d0f40006d13a0006d17a0006d1a00006
d1c60006d1f80006d2360006d2700006d29c0006d2d20006d3400006d36e
0006d3d40006d4320006d47a0006d4ac0006d4e80006d50e0006d5340006
d55a0006d5800006d5a60006d5cc0006d5f40006d61c0006d6480006d66e
0006d6940006d6ba0006d6ea0006d7640006d7920006d83a0006d8680006
d8980006d8be0006d8ee0006d91e0006d94e0006d9740006d99a0006d9cc
0006da000006da360006da6e0006daa00006dace0006db160006db620006
db880006dbb00006dbd60006dbfc0006dc220006dc620006dc980006dcca
0006dcfa0006dd340006dd640006dd9e0006ddcc0006ddf60006de2a0006
de5e0006de9e0006dede0006df140006df620006dfc80006e02e0006e084
0006e0dc0006e1160006e1680006e18c0006e1b00006e1d80006e2000006
e22e0006e25c0006e28a0006e2b80006e30e0006e3620006e3b00006e3fe
0006e42e0006e45e0006e48c0006e4ba0006e4e80006e5160006e5460006
e5740006e5c00006e6100006e65e0006e6b00006e7020006e7540006e7a6
0006e7f80006e81c0006e8400006e8660006e88e0006e8b60006e8de0006
e9140006e94a0006e9980006e9e60006ea400006ea9a0006eb0a0006eb7a
0006ebce0006ec220006ec480006ec6e0006ec960006ecbe0006ecec0006
ed1c0006ed600006eda40006edf00006ee3e0006eea40006ef0a0006ef36
0006ef620006ef8e0006efba0006eff40006f0380006f0660006f09c0006
f1280006f17c0006f1ce0006f2240006f24e0006f2780006f2a00006f2c8
0006f3000006f3380006f3600006f3880006f3c60006f4040006f43e0006
f4780006f4da0006f53c0006f5a40006f6000006f63a0006f66a0006f69e
0006f6e40006f72a0006f75a0006f78a0006f7b80006f7f20006f82c0006
f85e0006f89a0006f8de0006f91c0006f95e0006f9aa0006f9ea0006fa26
0006fa6a0006faae0006fb000006fb520006fba00006fc060006fc840006
fd020006fd700006fde00006fe320006fe9c0006fede0006ff200006ff60
0006ffa00006ffe00007002000070062000700a20007011e0007019e0007
021a0007029c0007031e000703a000070422000704a4000704fe00070558
000705b0000706080007066e000706d40007072c00070784000707ee0007
0858000708be00070924000709b200070a4000070ad200070b5a00070b92
00070bd000070c1c00070c4200070c8400070cc600070d1800070d520007
0d8800070dbe00070e0a00070e3600070ebc00070f1a00070fa00007103a
000711420007119a000711c0000712020007124000071290000712f00007
136c000713c800071430000714740007156000071656000717a2000717de
00071814000718c60007196e000719a400071a2a00071a6000071a920007
1ae400071b5000071c4200071d5000071ea000071ede00071f1c00071fda
0007208a000720b0000720d60007210800072196000721c6000721fa0007
2256000722cc00072316000723cc0007249a000724ea0007255c000725a0
0007260c0007263c0007269a000726f60007274a000727a2000727fa0007
283a000728a60007293a00072b0c00072cd200072e720007309e00073270
000732a2000735b0000737e0000739b400073ba600073ce000073ef60007
3f4600073f9400074002000740800007416000074238000744500007462a
0007479a0007489200074a7a00074b8a00074cb600074dfa00074e500007
4ea200074ef000074f380007501a00075068000750d80007514a000751ec
0007526a000752ac000752ec0007532a00075368000753c0000754100007
5476000754c0000755440007560200075664000756b2000756f80007578c
000758060007586c00075896000758c0000758d0000758e000075a520007
5c3200075e4e00075fc8000760880007616800076272000763da000763ea
000764f0000765d80007681e0007698400076994000769a4000769b40007
6a7200076b8400076c5e00076dea00076fb2000770960007711c000771a2
000772ca000772da000774d0000774e0000776080007770e000778740007
7a5000077a6000077a7000077a8000077b8200077c9800077dc000077dd0
00077ef400077f0400077f14000780ae000780be000782900007849a0007
85de000787560007883c000789a600078b0200078c5000078da800078e52
00078f560007919e00079280000794720007960a000797b6000798800007
998200079aa600079c6a00079d5200079e9c0007a0e20007a0f20007a27a
0007a3ce0007a5ee0007a7220007a7320007a7420007a84e0007a9bc0007
ab2e0007acfa0007ae1c0007b02c0007b03c0007b2120007b2220007b332
0007b3ce0007b46a0007b5d20007b5e20007b5f20007b7120007b9360007
b9460007ba3c0007bbb00007bcf40007be540007bf820007c1160007c136
0007c1540007c1720007c1900007c1b00007c1ce0007c2f20007c3120007
c3300007c3900007c4dc0007c5820007c6440007c6f00007c7380007c92e
0007c9e40007cbd20007cd2e0007cecc0007cfce0007d0340007d1760007
d1ee0007d37e0007d3b40007d3ea0007d43c0007d48e0007d4c60007d506
0007d53e0007d57e0007d7920007d8580007d9720007da0a0007db200007
dbe60007dc740007dd6e0007ddcc0007ddec0007de0c0007de2c0007de62
0007de880007ded20007df920007e08e0007e1640007e18a0007e1ba0007
e2160007e2260007e2360007e2460007e2560007e2660007e2760007e286
0007e2960007e2a60007e2b60007e2c60007e2c60007e3400007e45e0007
e5f20007e71e0007e8c80007ea960007ecc40007ee600007efe80007f0d8
0007f26a0007f4f00007f60c0007f6fa0007f73e0007f7d80007f9000007
f9500007f9b00007faf80007fb9a0007fc9a0007fd860007fe5e0007ff64
0007ffbc000800020008004400080104000801880008030a000803e80008
042800080492000804fc00080534000806820008077800080886000808be
000808f60008091c0008094200080972000809a2000809c6000809ea0008
0a1600080a4200080a8800080ace00080afa00080b2600080b6c00080bb2
00080c0e00080c6a00080c8e00080cb200080d0a00080d6200080da80008
0dee00080e2400080e5a00080e9000080ec600080f2800080f9200080ff2
000810520008109e0008116c00081198000811c4000812300008129c0008
12ea000813380008143e0008144e00081498000814e20008152a00081572
000815d0000816320008168c000816de0008172000081786000817f60008
1868000819200008199c00081a2800081a8e00081ab400081ada00081afe
00081b2200081b5600081b8a00081bb000081bd600081c4200081cae0008
1d1a00081d8200081dd400081e2600081e7c00081ece00081ef600081f1e
00081f5000081f7e00081fd40008202a00082086000820e2000821080008
212e0008215a00082186000821ee000822560008227a0008229e00082358
00082412000825e4000825f400082658000826bc0008271e000827800008
29440008295400082a6200082a7200082acc00082b2600082b7e00082bd6
00082c3a00082c9e00082ce200082d2600082ee800083092000832620008
35360008378a0008398e00083b5e00083d2c00083fa60008410400084328
00084502000846cc000847e600084b3400084c1600084d3200084ea80008
501a0008520800085390000854f8000856940008593600085b9e00085cae
00085f2200086128000862da00086474000866fe000868d800086a9c0008
6d7c00086ee2000870fc000872c60008747a000876560008783000087a20
00087c1200087d8e00087ef00008806e00088220000883f4000885500008
8560000886b800088850000888600008896800088a8a00088bcc00088d68
00088e8e00088f5a0008900c000890d40008925800089346000894480008
953800089788000899ac00089b9e00089d8800089ee800089fca0008a16a
0008a3ac0008a4aa0008a5c00008a75c0008a91e0008aa7a0008ab920008
ad180008ae140008af620008b1040008b23e0008b3300008b3e20008b494
0008b5880008b5de0008b7480008b7680008b7880008b7a80008b7c60008
b7e60008b9980008bbfe0008be860008bfde0008c0640008c0fe0008c192
0008c2320008c2c00008c3160008c3740008c3d80008c42e0008c4c80008
c55c0008c5f60008c6860008c6da0008c7360008c79e0008c7f20008c888
0008c91c0008c9bc0008ca4a0008caa20008cb040008cb6c0008cbc40008
cc980008cd700008ce460008cf280008cff80008d0cc0008d1a80008d284
0008d44c0008d5ae0008d68a0008d7c60008d8d40008d8e40008da780008
dbe00008dcc40008ddb60008de8c0008df6c0008e0900008e16e0008e302
0008e4980008e53c0008e5800008e5c00008e5d00008e6c60008e7b60008
e9560008eb200008ece40008eec60008eed60008efae0008f0980008f178
0008f1ba0008f1fe0008f2400008f2840008f2f60008f3620008f4000008
f4460008f4be0008f7300008f80e0008f81e0008f90e0008f9d20008fadc
0008fbbc0008fcde0008fe8e0008ff840008ff940009009e0009020a0009
0368000904000009048e000905f4000906b8000907680009081a00090868
000909140009096400090994000909d800090a1a00090a4800090b500009
0c6000090d6e00090de600090e5800090ef600090fe0000910540009110a
000911b400091208000912fe000913a60009141800091428000914380009
1448000914580009153a0009154c0009162a0009171e0009192400091aea
00091b5600091b9a00091be000091c2600091c7600091cc600091d3e0009
1db600091e2e00091eca00091fd800092100000922800009241e000925de
000926d0000927e20009292e0009298a00092a8000092b2e00092bba0009
2c9200092cb000092d3800092d5600092d6600092dce00092dec00092e0c
00092e1c00092e2e00092e3e00092e4e00092e5e00092e6e00092e7e0009
2e8e00092e9e00092eae00092ebe0009304c000932420009341c0009355c
000937780009388a0009397e00093a3e00093ae800093c0200093cec0009
3dd800093ee000093f6a0009401e0009417e0009421c0009430a000943e2
000944980009455e0009465c0009475e000948a40009496400094a1c0009
4af800094c2200094dca00094eda00094f6c000950fc000952540009533a
000954660009555600095628000957100009574000095770000957a00009
57d0000958040009582c0009585200095882000958b2000958e200095916
0009594400095972000959a0000959d200095a0200095a3200095a620009
5a9200095ac200095af600095b2600095b5600095b8600095bba00095bea
00095c1a00095c4a00095c7000095ca000095cd000095d0000095d300009
5d6000095d7000095da000095dd000095e0000095e2600095e5600095e86
00095eb600095edc00095f0c00095f3c00096084000960b2000960e00009
610e000961320009616000096178000961a8000961ce000961fc00096222
0009623a0009625200096282000962a8000962d800096410000964400009
6470000964a4000964d4000964fa0009652a0009655a00096588000965ac
000965dc00096600000966260009664c0009667c00096746000967760009
67a6000967d60009680a0009683e0009696200096992000969c2000969f2
00096a2600096a5600096a8a00096aba00096aea00096b1a00096b4a0009
6b8e00096bbe00096bee00096bfe00096c0e00096ca600096d3400096d44
00096d5400096d6400096e7200096e8200096e9200096f6e00096f7e0009
6f8e000970b8000970c80009719e000971ae0009726e0009727e0009728e
000973a6000973b6000975500009766200097692000976c2000976f20009
77200009775000097780000977b0000977e2000978160009784a00097990
000979be00097a9000097aa000097ab000097ae200097af200097c480009
7da200097eae00097ede00097f0e00098034000980440009813c0009814c
0009815c0009825200098262000985280009865200098770000987a00009
893000098a3c00098a4c00098a5c00098a6c00098a7c00098a8c00098a9c
00098aac00098bfc00098c0c00098c1c00098d3400098e4800098f900009
90f4000991ea0009934000099428000995040009962600099742000997d6
000997e8000997fa0009980c0009981e0009983000099842000998540009
9866000998780009988a0009989c000998ae000998c0000998d2000998e4
000998f6000999080009991a0009992c0009993e00099aee00099c460009
9dfc00099f3a0009a0700009a1e40009a2f00009a4320009a4820009a4da
0009a5760009a6400009a6ec0009a7780009a81c0009a8980009a9180009
a9c00009aa8e0009ab460009abdc0009aca80009ad3e0009ad9e0009aef8
0009af2a0009afee0009b0da0009b1600009b2140009b2c40009b2fa0009
b3320009b3740009b3b60009b40a0009b45e0009b4bc0009b51a0009b55e
0009b5a20009b5e60009b62a0009b66e0009b6b20009b6e20009b7120009
b7420009b7720009b7a00009b7ce0009b7fa0009b8260009b8520009b87e
0009b8ac0009b8da0009b9060009b9320009b95e0009b98a0009b9b60009
b9e20009ba360009ba8a0009bab80009bae60009bb120009bb3e0009bb6a
0009bb980009bbc40009bbf20009bc1e0009bc4a0009bc900009bcd60009
bd020009bd2e0009bd5a0009bd860009bdb20009bdde0009be0a0009be36
0009be6e0009bea60009bed20009befe0009bf2c0009bf5a0009bf860009
bfb20009c1720009c81e0009d01c0009d3a60009d7680009d87c0009d92e
0009d9780009da400009da880009daa00009dbd60009dbee0009dc060009
dc380009dc6a0009dc9c0009dcce0009dcfe0009dd2e0009dd5e0009dd8c
0009ddb80009dde40009de100009de3c0009de680009de940009dec00009
deec0009df1c0009df4c0009df7c0009dfac0009dfbe0009e0620009e100
0009e1860009e23c0009e2e60009e38a0009e54a0009e6700009e7da0009
e89c0009eae20009ed140009ef400009f0e60009f2ba0009f46a0009f5da
0009f7b00009f97a0009fafe0009fc380009fdf20009ff3c000a000c000a
00d0000a01da000a02e0000a03fe000a04ee000a04fe000a0606000a06f4
000a07b6000a0874000a09d8000a0b3e000a0c58000a0d7a000a0e46000a
0f80000a1044000a113a000a121a000a12c2000a1372000a150c000a15f0
000a1614000a196a000a1d80000a20e8000a22b2000a241c000a2434000a
244c000a2464000a247c000a2494000a24a6000a24be000a24d0000a2536
000a2546000a2558000a2570000a2582000a259a000a25aa000a25c0000a
25d2000a25ea000a25fc000a2614000a2626000a2638000a264a000a265c
000a266e000a26a8000a26ba000a26cc000a26de000a26f0000a2872000a
2a50000a2b68000a2c76000a2d8c000a2e9c000a2fb0000a3096000a3188
000a32c4000a33cc000a34da000a3592000a36d4000a3818000a391e000a
3a08000a3b90000a3c84000a3d8e000a3e94000a401e000a4140000a42a2
000a438e000a44bc000a45c4000a46ee000a4818000a4902000a4a20000a
4b96000a4c5e000a4dc4000a4e88000a4fb8000a5118000a51d6000a5320
000a5386000a53f0000a5432000a54ce000a5522000a559e000a55d8000a
572e000a5808000a58f6000a5a0a000a5af8000a5bc0000a5c80000a5d6a
000a5ed0000a5fb6000a60c6000a612a000a628a000a63cc000a64c6000a
65de000a6728000a680e000a6960000a6a98000a6b6a000a6cc0000a6da4
000a6eac000a6fa2000a710c000a7238000a732c000a73fe000a74e6000a
764c000a7746000a7870000a78e4000a7a5c000a7bba000a7c90000a7de0
000a7ebc000a7ecc000a7f38000a8164000a839c000a84f0000a8778000a
89b8000a8bfa000a8e28000a90b2000a91d8000a91e8000a9398000a93a8
000a9532000a9542000a955a000a9572000a958a000a95a2000a95ba000a
95d2000a9792000a97a2000a97b8000a9940000a9950000a9a72000a9a8a
000a9aa2000a9aba000a9ad2000a9aea000a9b02000a9b1a000a9b32000a
9b4a000a9b62000a9b7a000a9b92000a9bb2000a9bd2000a9bf0000a9c0e
000a9c26000a9c46000a9c5c000a9c72000a9d9e000a9dae000a9e90000a
9ea0000a9eb8000a9ed0000a9ee8000a9f00000a9f18000a9f30000a9f48
000a9f60000a9f78000a9f90000a9fa8000a9fc0000aa0ce000aa0de000a
a0f6000aa10e000aa25e000aa26e000aa2f8000aa3da000aa3ec000aa4f8
000aa69c000aa6ae000aa6d6000aa71c000aa7b0000aa7c2000aa7d4000a
a7e6000aa800000aa81a000aa834000aa846000aa936000aa950000aa96a
000aa9b4000aa9fe000aaa10000aaa22000aaa38000aaa58000aaa70000a
aa8a000aac2e000aad74000aad84000aad9c000aadb4000aadcc000aade4
000aadf4000aae0e000aae74000aaf14000aafda000ab098000ab0b0000a
b0c8000ab0e0000ab0f8000ab1ea000ab202000ab21a000ab30c000ab370
000ab3cc000ab400000ab468000ab4b6000ab59c000ab5b4000ab7c0000a
b82a000ab850000ab868000ab880000ab896000ab8ac000ab902000ab91a
000ab932000ab94a000ab962000ab97a000ab992000abaa4000abbf4000a
bcd2000abdec000abea0000abf32000abf52000abf72000abfc2000abfd2
000ac0ca000ac1a0000ac346000ac4a8000ac5ce000ac6dc000ac7b2000a
c862000ac9b2000aca34000acb14000acc98000accbc000acce0000acd08
000acd3e000acd98000acdce000acfd4000ad204000ad386000ad3c2000a
d422000ad4a4000ad4d4000ad5d2000ad61c000ad664000ad69e000ad8ae
000ad8d2000ad92c000ad988000adaa2000adba6000adcaa000adcf8000a
dd5a000addc0000ade26000adee2000adf60000adfe4000ae144000ae1c0
000ae224000ae270000ae37e000ae408000ae4b2000ae562000ae636000a
e692000ae738000ae814000ae8a2000ae8a2000ae8a2000aea9c000aebe0
000aed18000aee46000aefcc000af152000af2f8000af482000af568000a
f580000af598000af5b0000af5c6000af5de000af5f6000af60c000af622
000af6ba000af732000af7be000af814000af8ac000af962000af9a4000a
fa3a000afaee000afb26000afb48000afb82000afbd4000afc24000afc9c
000afd0c000afd8e000afe3a000afe90000aff26000affdc000b001e000b
00b4000b0168000b01a0000b01c2000b01f8000b024a000b029a000b02b8
000b02d6000b02f4000b0312000b03ec000b040c000b042a000b0448000b
058c000b06fe000b07b2000b0892000b0994000b0a8e000b0b3c000b0bf8
000b0ce8000b0da0000b0f0c000b1026000b114e000b120c000b12e2000b
13b2000b1478000b1596000b1698000b1748000b185a000b1952000b1a30
000b1b5c000b1cce000b1e06000b1f26000b202a000b214e000b2288000b
23f2000b24b2000b2528000b25c0000b2678000b275e000b27b2000b287e
000b295e000b2ad2000b2ba2000b2c20000b2d18000b2e58000b2ef2000b
3014000b3074000b3180000b31f8000b3290000b330c000b3380000b3428
000b3606000b370c000b37ec000b3876000b3942000b39d4000b3a68000b
3a9e000b3ad2000b3b22000b3c34000b3dc6000b3ef4000b400e000b4172
000b4246000b434e000b4442000b45d4000b4690000b47be000b4910000b
4a20000b4b46000b4c96000b4d8e000b4ebe000b5016000b50a0000b5116
000b51ea000b531e000b540a000b5496000b5586000b56d4000b5882000b
59d0000b5abe000b5c0e000b5dbc000b5e48000b5ed8000b5f74000b6042
000b60c4000b61a6000b62e6000b63d2000b6450000b653c000b6688000b
6832000b697a000b6a56000b6b9e000b6d46000b6d96000b6e1a000b6eca
000b6fc6000b70b6000b71b0000b732a000b73b8000b748c000b7504000b
7646000b784c000b7978000b79a4000b79f8000b7a2a000b7a5e000b7ac0
000b7b24000b7b58000b7bb4000b7c6c000b7d02000b7d98000b7dce000b
7dfa000b7e26000b804e000b8072000b80b8000b80fe000b814a000b81c8
000b8244000b82c2000b8358000b8452000b85e2000b864e000b870a000b
8734000b8760000b87f4000b888a000b88be000b88f6000b892c000b8962
000b8996000b89cc000b8a2a000b8a88000b8b2c000b8bce000b8c4e000b
8cd0000b8d78000b8e42000b8eea000b8f58000b8fb0000b8fe6000b9042
000b9078000b90d0000b9152000b9208000b92ca000b93b8000b9492000b
94b8000b94de000b9548000b96bc000b9862000b9908000b993e000b999a
000b9a40000b9abc000b9b5a000b9c2a000b9cc2000b9d5a000b9dae000b
9e02000b9ef6000b9fda000ba0ce000ba1b0000ba278000ba294000ba320
000ba33e000ba422000ba442000ba452000ba462000ba562000ba6e6000b
a7d2000ba912000ba9f6000bab38000babec000bad08000badda000baf12
000bb004000bb172000bb260000bb334000bb438000bb520000bb63a000b
b734000bb862000bb974000bba1a000bba8a000bbb2e000bbb9e000bbc3e
000bbcee000bbdd6000bbeb4000bbfa2000bc098000bc164000bc23e000b
c346000bc46e000bc578000bc688000bc76c000bc838000bc946000bca4a
000bcaf2000bcb94000bcc76000bcd54000bce12000bceb8000bcfe8000b
d0fe000bd1e8000bd2d6000bd3bc000bd49c000bd582000bd662000bd6fe
000bd794000bd86c000bd888000bd948000bda08000bdaae000bdaca000b
db48000bdc4a000bdcec000bde4e000bdf58000be03a000be13e000be212
000be2e0000be37c000be42a000be4de000be58c000be644000be6fe000b
e71c000be7ae000be802000be8d0000be994000bea3a000bead8000beb5e
000bebd6000bec8e000bed82000bee48000bef16000befe2000bf09a000b
f17c000bf282000bf3b2000bf4b8000bf566000bf632000bf724000bf80c
000bf8d8000bf99c000bfaa4000bfb7c000bfc90000bfe14000bff44000c
0062000c0168000c026e000c0396000c0466000c059e000c06b2000c07be
000c07ce000c08a2000c09b6000c0aa4000c0b24000c0bd8000c0cce000c
0dc8000c0dd8000c0eee000c0efe000c0f70000c107c000c116c000c1282
000c133e000c13ee000c14bc000c1532000c162a000c1726000c1878000c
191a000c19e0000c1ac2000c1ad2000c1bee000c1cd2000c1cf2000c1dbc
000c1f08000c1ffa000c2128000c21ea000c22dc000c23c0000c24d6000c
2646000c277e000c287c000c29ca000c2a38000c2b38000c2bd8000c2cae
000c2d86000c2e94000c2f14000c2fde000c2fee000c3088000c3136000c
328a000c33e2000c34b0000c34c0000c359a000c3610000c3738000c3820
000c394e000c3a3c000c3ae2000c3b70000c3c44000c3d16000c3e1c000c
3ec8000c3f9a000c40a8000c41d0000c42de000c43a6000c43b6000c44ca
000c454e000c456e000c458e000c45ac000c45ca000c45ea000c460a000c
4628000c4646000c465e000c4676000c476c000c477c000c4794000c47ac
000c47c4000c47dc000c47fa000c4818000c4828000c4838000c484e000c
4864000c4874000c4884000c489c000c48b4000c48c4000c48d4000c48e4
000c48f4000c49bc000c4a84000c4afc000c4cfc000c4df2000c4eaa000c
4f90000c4faa000c4fc4000c5238000c5512000c574a000c5948000c5a88
000c5c86000c5d00000c5d82000c5e2c000c6124000c636600010000124d
02d2003c00d7000600020010002f00560000089b02c40005000200000053
03ea0000000300000000021a00000000000300000001001e021a00000003
000000020008023800000003000000030052024000000003000000040028
02520000000300000005001802920000000300000006002c02aa00000003
00000007007602d600000003000000080030000e00000003000000090086
034c000000030000000d0e0403d20001000000000000010d11d600010000
00000001000f12e30001000000000002000412f200010000000000030029
12f60001000000000004001412ff0001000000000005000c131f00010000
000000060016132b0001000000000007003b134100010000000000080018
11dd00010000000000090043137c000100000000000d070213bf00030001
04030002000e1ac10003000104030004002e1acf0003000104050002000a
1afd0003000104050004002a1b07000300010406000200061b3100030001
0406000400261b37000300010407000200081b5d00030001040700040028
1b650003000104080002000c1b8d0003000104080004002c1b9900030001
04090000021e1bc50003000104090001001e021a00030001040900020008
023800030001040900030052024000030001040900040028025200030001
04090005001802920003000104090006002c02aa00030001040900070076
02d600030001040900080030000e00030001040900090086034c00030001
0409000d0e141de300030001040a0002000e2bf700030001040a0004002e
2c0500030001040b000200122c3300030001040b000400322c4500030001
040c000200082c7700030001040c000400282c7f00030001040e00020010
2ca700030001040e000400302cb7000300010410000200122ce700030001
0410000400322cf9000300010413000200062d2b00030001041300040026
2d310003000104140002000e2d570003000104140004002e2d6500030001
0415000200142d93000300010415000400342da70003000104160002000e
2ddb0003000104160004002e2de9000300010419000200142e1700030001
0419000400342e2b00030001041b0002000a2e5f00030001041b0004002a
2e6900030001041d000200061b5d00030001041d000400261b6500030001
041f0002000a2e9300030001041f0004002a2e9d0003000104240002000c
2ec70003000104240004002c2ed300030001042a000200082eff00030001
042a000400282f0700030001042d0002000a2f2f00030001042d0004002a
2f3900030001080a0002000e2bf700030001080a0004002e2c0500030001
08160002000e2ddb0003000108160004002e2de9000300010c0a0002000e
2bf7000300010c0a0004002e2c05000300010c0c000200082c7700030001
0c0c000400282c7f00a90020003200300031003700200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e0020000d000d
0048006500620072006500770020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200063
006f0070007900720069006700680074002000a900200032003000300033
0020002600200032003000300037002c002000520061006c007000680020
00480061006e0063006f0063006b002000260020004a006f0068006e0020
0048007500640073006f006e002e002000540068006900730020006c0061
0079006f007500740020006c006f00670069006300200066006f00720020
004200690062006c006900630061006c0020004800650062007200650077
0020006900730020006f00700065006e00200073006f0075007200630065
00200073006f00660074007700610072006500200075006e006400650072
00200074006800650020004d004900540020004c006900630065006e0073
0065003b002000730065006500200065006d006200650064006400650064
0020006c006900630065006e007300650020006400650073006300720069
007000740069006f006e00200066006f0072002000640065007400610069
006c0073002e00540069006d006500730020004e0065007700200052006f
006d0061006e0042006f006c0064004d006f006e006f0074007900700065
003a00540069006d006500730020004e0065007700200052006f006d0061
006e00200042006f006c006400200028004d006900630072006f0073006f
00660074002900560065007200730069006f006e00200037002e00300030
00540069006d00650073004e006500770052006f006d0061006e00500053
002d0042006f006c0064004d005400540069006d006500730020004e0065
007700200052006f006d0061006e00200069007300200061002000740072
006100640065006d00610072006b0020006f006600200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e002e004d006f006e006f00740079007000650020
0054007900700065002000440072006100770069006e00670020004f0066
00660069006300650020002d0020005300740061006e006c006500790020
004d006f007200690073006f006e002c00200056006900630074006f0072
0020004c0061007200640065006e007400200031003900330032004d0069
00630072006f0073006f0066007400200073007500700070006c00690065
006400200066006f006e0074002e00200059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f0020006300720065006100740065002c00200064006900730070
006c00610079002c00200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d00730020006f00720020
007400650072006d00730020006f00660020007500730065002c0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000700072006f0064007500630074002c002000730065007200760069
00630065002c0020006f007200200063006f006e00740065006e00740020
0069006e0020007700680069006300680020007400680069007300200066
006f006e0074002000770061007300200069006e0063006c007500640065
0064002e00200059006f00750020006d006100790020006f006e006c0079
002000280069002900200065006d00620065006400200074006800690073
00200066006f006e007400200069006e00200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
00620079002000740068006500200065006d00620065006400640069006e
00670020007200650073007400720069006300740069006f006e00730020
0069006e0063006c007500640065006400200069006e0020007400680069
007300200066006f006e0074003b00200061006e00640020002800690069
0029002000740065006d0070006f0072006100720069006c007900200064
006f0077006e006c006f006100640020007400680069007300200066006f
006e007400200074006f002000610020007000720069006e007400650072
0020006f00720020006f00740068006500720020006f0075007400700075
0074002000640065007600690063006500200074006f002000680065006c
00700020007000720069006e007400200063006f006e00740065006e0074
002e00200041006e00790020006f00740068006500720020007500730065
002000690073002000700072006f0068006900620069007400650064002e
000d000d00540068006500200066006f006c006c006f00770069006e0067
0020006c006900630065006e00730065002c002000620061007300650064
0020006f006e00200074006800650020004d004900540020006c00690063
0065006e00730065002000280068007400740070003a002f002f0065006e
002e00770069006b006900700065006400690061002e006f00720067002f
00770069006b0069002f004d00490054005f004c006900630065006e0073
00650029002c0020006100700070006c00690065007300200074006f0020
0074006800650020004f00700065006e00540079007000650020004c0061
0079006f007500740020006c006f00670069006300200066006f00720020
004200690062006c006900630061006c0020004800650062007200650077
0020201c004c00610079006f007500740020004c006f006700690063201d
0020006100730020006a006f0069006e0074006c00790020006400650076
0065006c006f007000650064002000620079002000520061006c00700068
002000480061006e0063006f0063006b00200061006e00640020004a006f
0068006e00200048007500640073006f006e002e0020000d000d00500065
0072006d0069007300730069006f006e0020006900730020006800650072
0065006200790020006700720061006e007400650064002c002000660072
006500650020006f00660020006300680061007200670065002c00200074
006f00200061006e007900200070006500720073006f006e0020006f0062
007400610069006e0069006e00670020006100200063006f007000790020
006f006600200074006800650020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
00720065007700200061006e00640020006100730073006f006300690061
00740065006400200064006f00630075006d0065006e0074006100740069
006f006e002000660069006c00650073002000280074006800650020201c
004c00610079006f007500740020004c006f00670069006300200053006f
006600740077006100720065201d0029002c00200074006f002000640065
0061006c00200069006e00200074006800650020004c00610079006f0075
00740020004c006f00670069006300200053006f00660074007700610072
006500200077006900740068006f00750074002000720065007300740072
0069006300740069006f006e002c00200069006e0063006c007500640069
006e006700200077006900740068006f007500740020006c0069006d0069
0074006100740069006f006e002000740068006500200072006900670068
0074007300200074006f0020007500730065002c00200063006f00700079
002c0020006d006f0064006900660079002c0020006d0065007200670065
002c0020007000750062006c006900730068002c00200064006900730074
007200690062007500740065002c0020007300750062006c006900630065
006e00730065002c00200061006e0064002f006f0072002000730065006c
006c00200063006f00700069006500730020006f00660020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f006600740077006100720065002c00200061006e006400200074006f
0020007000650072006d0069007400200070006500720073006f006e0073
00200074006f002000770068006f006d00200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
00770061007200650020006900730020006600750072006e006900730068
0065006400200074006f00200064006f00200073006f002c002000730075
0062006a00650063007400200074006f002000740068006500200066006f
006c006c006f00770069006e006700200063006f006e0064006900740069
006f006e0073003a000d000d005400680065002000610062006f00760065
00200063006f00700079007200690067006800740020006e006f00740069
0063006500200061006e0064002000740068006900730020007000650072
006d0069007300730069006f006e0020006e006f00740069006300650020
007300680061006c006c00200062006500200069006e0063006c00750064
0065006400200069006e00200061006c006c00200063006f007000690065
00730020006f00720020007300750062007300740061006e007400690061
006c00200070006f007200740069006f006e00730020006f006600200074
006800650020004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065002e000d000d005400480045
00200053004f004600540057004100520045002000490053002000500052
004f0056004900440045004400200027004100530020004900530027002c
00200057004900540048004f00550054002000570041005200520041004e
005400590020004f004600200041004e00590020004b0049004e0044002c
002000450058005000520045005300530020004f005200200049004d0050
004c004900450044002c00200049004e0043004c005500440049004e0047
00200042005500540020004e004f00540020004c0049004d004900540045
004400200054004f0020005400480045002000570041005200520041004e
00540049004500530020004f00460020004d00450052004300480041004e
0054004100420049004c004900540059002c0020004600490054004e0045
0053005300200046004f0052002000410020005000410052005400490043
0055004c0041005200200050005500520050004f0053004500200041004e
00440020004e004f004e0049004e004600520049004e00470045004d0045
004e0054002e00200049004e0020004e004f0020004500560045004e0054
0020005300480041004c004c002000540048004500200041005500540048
004f005200530020004f005200200043004f005000590052004900470048
005400200048004f004c00440045005200530020004200450020004c0049
00410042004c004500200046004f005200200041004e005900200043004c
00410049004d002c002000440041004d00410047004500530020004f0052
0020004f00540048004500520020004c0049004100420049004c00490054
0059002c0020005700480045005400480045005200200049004e00200041
004e00200041004300540049004f004e0020004f004600200043004f004e
00540052004100430054002c00200054004f005200540020004f00520020
004f00540048004500520057004900530045002c00200041005200490053
0049004e0047002000460052004f004d002c0020004f005500540020004f
00460020004f005200200049004e00200043004f004e004e004500430054
0049004f004e00200057004900540048002000540048004500200053004f
0046005400570041005200450020004f0052002000540048004500200055
005300450020004f00520020004f00540048004500520020004400450041
004c0049004e0047005300200049004e002000540048004500200053004f
004600540057004100520045002ea9203230313720546865204d6f6e6f74
79706520436f72706f726174696f6e2e20416c6c20526967687473205265
7365727665642e200d0d486562726577204f70656e54797065204c61796f
7574206c6f67696320636f7079726967687420a920323030332026203230
30372c2052616c70682048616e636f636b2026204a6f686e20487564736f
6e2e2054686973206c61796f7574206c6f67696320666f72204269626c69
63616c20486562726577206973206f70656e20736f7572636520736f6674
7761726520756e64657220746865204d4954204c6963656e73653b207365
6520656d626564646564206c6963656e7365206465736372697074696f6e
20666f722064657461696c732e54696d6573204e657720526f6d616e426f
6c644d6f6e6f747970653a54696d6573204e657720526f6d616e20426f6c
6420284d6963726f736f66742956657273696f6e20372e303054696d6573
4e6577526f6d616e50532d426f6c644d5454696d6573204e657720526f6d
616e20697320612074726164656d61726b206f6620546865204d6f6e6f74
79706520436f72706f726174696f6e2e4d6f6e6f74797065205479706520
44726177696e67204f6666696365202d205374616e6c6579204d6f726973
6f6e2c20566963746f72204c617264656e7420313933324d6963726f736f
667420737570706c69656420666f6e742e20596f75206d61792075736520
7468697320666f6e7420746f206372656174652c20646973706c61792c20
616e64207072696e7420636f6e74656e74206173207065726d6974746564
20627920746865206c6963656e7365207465726d73206f72207465726d73
206f66207573652c206f6620746865204d6963726f736f66742070726f64
7563742c20736572766963652c206f7220636f6e74656e7420696e207768
696368207468697320666f6e742077617320696e636c756465642e20596f
75206d6179206f6e6c792028692920656d626564207468697320666f6e74
20696e20636f6e74656e74206173207065726d6974746564206279207468
6520656d62656464696e67207265737472696374696f6e7320696e636c75
64656420696e207468697320666f6e743b20616e6420286969292074656d
706f726172696c7920646f776e6c6f6164207468697320666f6e7420746f
2061207072696e746572206f72206f74686572206f757470757420646576
69636520746f2068656c70207072696e7420636f6e74656e742e20416e79
206f74686572207573652069732070726f686962697465642e0d0d546865
20666f6c6c6f77696e67206c6963656e73652c206261736564206f6e2074
6865204d4954206c6963656e73652028687474703a2f2f656e2e77696b69
70656469612e6f72672f77696b692f4d49545f4c6963656e7365292c2061
70706c69657320746f20746865204f70656e54797065204c61796f757420
6c6f67696320666f72204269626c6963616c2048656272657720d24c6179
6f7574204c6f676963d3206173206a6f696e746c7920646576656c6f7065
642062792052616c70682048616e636f636b20616e64204a6f686e204875
64736f6e2e200d0d5065726d697373696f6e206973206865726562792067
72616e7465642c2066726565206f66206368617267652c20746f20616e79
20706572736f6e206f627461696e696e67206120636f7079206f66207468
65204f70656e54797065204c61796f7574206c6f67696320666f72204269
626c6963616c2048656272657720616e64206173736f6369617465642064
6f63756d656e746174696f6e2066696c6573202874686520d24c61796f75
74204c6f67696320536f667477617265d3292c20746f206465616c20696e
20746865204c61796f7574204c6f67696320536f66747761726520776974
686f7574207265737472696374696f6e2c20696e636c7564696e67207769
74686f7574206c696d69746174696f6e207468652072696768747320746f
207573652c20636f70792c206d6f646966792c206d657267652c20707562
6c6973682c20646973747269627574652c207375626c6963656e73652c20
616e642f6f722073656c6c20636f70696573206f6620746865204c61796f
7574204c6f67696320536f6674776172652c20616e6420746f207065726d
697420706572736f6e7320746f2077686f6d20746865204c61796f757420
4c6f67696320536f667477617265206973206675726e697368656420746f
20646f20736f2c207375626a65637420746f2074686520666f6c6c6f7769
6e6720636f6e646974696f6e733a0d0d5468652061626f766520636f7079
7269676874206e6f7469636520616e642074686973207065726d69737369
6f6e206e6f74696365207368616c6c20626520696e636c7564656420696e
20616c6c20636f70696573206f72207375627374616e7469616c20706f72
74696f6e73206f6620746865204c61796f7574204c6f67696320536f6674
776172652e0d0d54484520534f4654574152452049532050524f56494445
4420274153204953272c20574954484f55542057415252414e5459204f46
20414e59204b494e442c2045585052455353204f5220494d504c4945442c
20494e434c5544494e4720425554204e4f54204c494d4954454420544f20
5448452057415252414e54494553204f46204d45524348414e544142494c
4954592c204649544e45535320464f52204120504152544943554c415220
505552504f534520414e44204e4f4e494e4652494e47454d454e542e2049
4e204e4f204556454e54205348414c4c2054484520415554484f5253204f
5220434f5059524947485420484f4c44455253204245204c4941424c4520
464f5220414e5920434c41494d2c2044414d41474553204f52204f544845
52204c494142494c4954592c205748455448455220494e20414e20414354
494f4e204f4620434f4e54524143542c20544f5254204f52204f54484552
574953452c2041524953494e472046524f4d2c204f5554204f46204f5220
494e20434f4e4e454354494f4e20574954482054484520534f4654574152
45204f522054484520555345204f52204f54484552204445414c494e4753
20494e2054484520534f4654574152452e004e0065006700720065007400
6100540069006d006500730020004e0065007700200052006f006d006100
6e0020004e00650067007200650074006100740075010d006e00e9005400
69006d006500730020004e0065007700200052006f006d0061006e002000
740075010d006e00e900660065006400540069006d006500730020004e00
65007700200052006f006d0061006e002000660065006400460065007400
7400540069006d006500730020004e0065007700200052006f006d006100
6e00200046006500740074038803bd03c403bf03bd03b100540069006d00
6500730020004e0065007700200052006f006d0061006e0020038803bd03
c403bf03bd03b100a9002000320030003100370020005400680065002000
4d006f006e006f007400790070006500200043006f00720070006f007200
6100740069006f006e002e00200041006c006c0020005200690067006800
740073002000520065007300650072007600650064002e0020000d000a00
0d000a0048006500620072006500770020004f00700065006e0054007900
7000650020004c00610079006f007500740020006c006f00670069006300
200063006f0070007900720069006700680074002000a900200032003000
3000330020002600200032003000300037002c002000520061006c007000
68002000480061006e0063006f0063006b002000260020004a006f006800
6e00200048007500640073006f006e002e00200054006800690073002000
6c00610079006f007500740020006c006f00670069006300200066006f00
720020004200690062006c006900630061006c0020004800650062007200
6500770020006900730020006f00700065006e00200073006f0075007200
63006500200073006f00660074007700610072006500200075006e006400
65007200200074006800650020004d004900540020004c00690063006500
6e00730065003b002000730065006500200065006d006200650064006400
6500640020006c006900630065006e007300650020006400650073006300
720069007000740069006f006e00200066006f0072002000640065007400
610069006c0073002e004d006900630072006f0073006f00660074002000
73007500700070006c00690065006400200066006f006e0074002e002000
59006f00750020006d006100790020007500730065002000740068006900
7300200066006f006e007400200074006f00200063007200650061007400
65002c00200064006900730070006c00610079002c00200061006e006400
20007000720069006e007400200063006f006e00740065006e0074002000
6100730020007000650072006d0069007400740065006400200062007900
200074006800650020006c006900630065006e0073006500200074006500
72006d00730020006f00720020007400650072006d00730020006f006600
20007500730065002c0020006f006600200074006800650020004d006900
630072006f0073006f00660074002000700072006f006400750063007400
2c00200073006500720076006900630065002c0020006f00720020006300
6f006e00740065006e007400200069006e00200077006800690063006800
20007400680069007300200066006f006e00740020007700610073002000
69006e0063006c0075006400650064002e00200059006f00750020006d00
6100790020006f006e006c0079002000280069002900200065006d006200
6500640020007400680069007300200066006f006e007400200069006e00
200063006f006e00740065006e0074002000610073002000700065007200
6d0069007400740065006400200062007900200074006800650020006500
6d00620065006400640069006e0067002000720065007300740072006900
6300740069006f006e007300200069006e0063006c007500640065006400
200069006e0020007400680069007300200066006f006e0074003b002000
61006e006400200028006900690029002000740065006d0070006f007200
6100720069006c007900200064006f0077006e006c006f00610064002000
7400680069007300200066006f006e007400200074006f00200061002000
7000720069006e0074006500720020006f00720020006f00740068006500
720020006f00750074007000750074002000640065007600690063006500
200074006f002000680065006c00700020007000720069006e0074002000
63006f006e00740065006e0074002e00200041006e00790020006f007400
68006500720020007500730065002000690073002000700072006f006800
6900620069007400650064002e000d000a000d000a005400680065002000
66006f006c006c006f00770069006e00670020006c006900630065006e00
730065002c0020006200610073006500640020006f006e00200074006800
650020004d004900540020006c006900630065006e007300650020002800
68007400740070003a002f002f0065006e002e00770069006b0069007000
65006400690061002e006f00720067002f00770069006b0069002f004d00
490054005f004c006900630065006e007300650029002c00200061007000
70006c00690065007300200074006f00200074006800650020004f007000
65006e00540079007000650020004c00610079006f007500740020006c00
6f00670069006300200066006f00720020004200690062006c0069006300
61006c00200048006500620072006500770020201c004c00610079006f00
7500740020004c006f006700690063201d0020006100730020006a006f00
69006e0074006c007900200064006500760065006c006f00700065006400
2000620079002000520061006c00700068002000480061006e0063006f00
63006b00200061006e00640020004a006f0068006e002000480075006400
73006f006e002e0020000d000a000d000a005000650072006d0069007300
730069006f006e0020006900730020006800650072006500620079002000
6700720061006e007400650064002c002000660072006500650020006f00
660020006300680061007200670065002c00200074006f00200061006e00
7900200070006500720073006f006e0020006f0062007400610069006e00
69006e00670020006100200063006f007000790020006f00660020007400
6800650020004f00700065006e00540079007000650020004c0061007900
6f007500740020006c006f00670069006300200066006f00720020004200
690062006c006900630061006c0020004800650062007200650077002000
61006e00640020006100730073006f006300690061007400650064002000
64006f00630075006d0065006e0074006100740069006f006e0020006600
69006c00650073002000280074006800650020201c004c00610079006f00
7500740020004c006f00670069006300200053006f006600740077006100
720065201d0029002c00200074006f0020006400650061006c0020006900
6e00200074006800650020004c00610079006f007500740020004c006f00
670069006300200053006f00660074007700610072006500200077006900
740068006f00750074002000720065007300740072006900630074006900
6f006e002c00200069006e0063006c007500640069006e00670020007700
6900740068006f007500740020006c0069006d0069007400610074006900
6f006e002000740068006500200072006900670068007400730020007400
6f0020007500730065002c00200063006f00700079002c0020006d006f00
64006900660079002c0020006d0065007200670065002c00200070007500
62006c006900730068002c00200064006900730074007200690062007500
740065002c0020007300750062006c006900630065006e00730065002c00
200061006e0064002f006f0072002000730065006c006c00200063006f00
700069006500730020006f006600200074006800650020004c0061007900
6f007500740020004c006f00670069006300200053006f00660074007700
6100720065002c00200061006e006400200074006f002000700065007200
6d0069007400200070006500720073006f006e007300200074006f002000
770068006f006d00200074006800650020004c00610079006f0075007400
20004c006f00670069006300200053006f00660074007700610072006500
20006900730020006600750072006e006900730068006500640020007400
6f00200064006f00200073006f002c0020007300750062006a0065006300
7400200074006f002000740068006500200066006f006c006c006f007700
69006e006700200063006f006e0064006900740069006f006e0073003a00
0d000a000d000a005400680065002000610062006f007600650020006300
6f00700079007200690067006800740020006e006f007400690063006500
200061006e0064002000740068006900730020007000650072006d006900
7300730069006f006e0020006e006f007400690063006500200073006800
61006c006c00200062006500200069006e0063006c007500640065006400
200069006e00200061006c006c00200063006f0070006900650073002000
6f00720020007300750062007300740061006e007400690061006c002000
70006f007200740069006f006e00730020006f0066002000740068006500
20004c00610079006f007500740020004c006f0067006900630020005300
6f006600740077006100720065002e000d000a000d000a00540048004500
200053004f00460054005700410052004500200049005300200050005200
4f0056004900440045004400200027004100530020004900530027002c00
200057004900540048004f00550054002000570041005200520041004e00
5400590020004f004600200041004e00590020004b0049004e0044002c00
2000450058005000520045005300530020004f005200200049004d005000
4c004900450044002c00200049004e0043004c005500440049004e004700
200042005500540020004e004f00540020004c0049004d00490054004500
4400200054004f0020005400480045002000570041005200520041004e00
540049004500530020004f00460020004d00450052004300480041004e00
54004100420049004c004900540059002c0020004600490054004e004500
53005300200046004f005200200041002000500041005200540049004300
55004c0041005200200050005500520050004f0053004500200041004e00
440020004e004f004e0049004e004600520049004e00470045004d004500
4e0054002e00200049004e0020004e004f0020004500560045004e005400
20005300480041004c004c00200054004800450020004100550054004800
4f005200530020004f005200200043004f00500059005200490047004800
5400200048004f004c00440045005200530020004200450020004c004900
410042004c004500200046004f005200200041004e005900200043004c00
410049004d002c002000440041004d00410047004500530020004f005200
20004f00540048004500520020004c0049004100420049004c0049005400
59002c0020005700480045005400480045005200200049004e0020004100
4e00200041004300540049004f004e0020004f004600200043004f004e00
540052004100430054002c00200054004f005200540020004f0052002000
4f00540048004500520057004900530045002c0020004100520049005300
49004e0047002000460052004f004d002c0020004f005500540020004f00
460020004f005200200049004e00200043004f004e004e00450043005400
49004f004e00200057004900540048002000540048004500200053004f00
46005400570041005200450020004f005200200054004800450020005500
5300450020004f00520020004f0054004800450052002000440045004100
4c0049004e0047005300200049004e002000540048004500200053004f00
4600540057004100520045002e004e006500670072006900740061005400
69006d006500730020004e0065007700200052006f006d0061006e002000
4e006500670072006900740061004c0069006800610076006f0069007400
7500540069006d006500730020004e0065007700200052006f006d006100
6e0020004c0069006800610076006f006900740075004700720061007300
540069006d006500730020004e0065007700200052006f006d0061006e00
200047007200610073004600e9006c006b00f6007600e900720054006900
6d006500730020004e0065007700200052006f006d0061006e0020004600
e9006c006b00f6007600e900720047007200610073007300650074007400
6f00540069006d006500730020004e0065007700200052006f006d006100
6e002000470072006100730073006500740074006f005600650074005400
69006d006500730020004e0065007700200052006f006d0061006e002000
560065007400480061006c007600660065007400540069006d0065007300
20004e0065007700200052006f006d0061006e002000480061006c007600
66006500740050006f00670072007500620069006f006e00610054006900
6d006500730020004e0065007700200052006f006d0061006e0020005000
6f00670072007500620069006f006e0061004e0065006700720069007400
6f00540069006d006500730020004e0065007700200052006f006d006100
6e0020004e00650067007200690074006f041f043e043b04430436043804
40043d044b043900540069006d006500730020004e006500770020005200
6f006d0061006e0020041f043e043b0443043604380440043d044b043900
540075010d006e00e900540069006d006500730020004e00650077002000
52006f006d0061006e002000540075010d006e00e9004b0061006c013100
6e00540069006d006500730020004e0065007700200052006f006d006100
6e0020004b0061006c0131006e004b007200650070006b006f0054006900
6d006500730020004e0065007700200052006f006d0061006e0020004b00
7200650070006b006f011100e20323006d00540069006d00650073002000
4e0065007700200052006f006d0061006e0020011100e20323006d004c00
6f00640069006100540069006d006500730020004e006500770020005200
6f006d0061006e0020004c006f00640069006100000000>
<410c00540415029a001d001f0415041504140413003c001f0413b3061d1f
20b8040cb30c0e3220b8040cb2131732b8040bb328201f0f411004120080
04120002000f0412003f0412005f04120003005f0412000100400412b278
3340b80412b2723340b80412b26e3340b80412b26a3340b80412b2543340
bc0412004a0033ffc00412b317183240b80412b30a0c3280b80412b30809
3240b80411b25a33404109041100560033ffc0041100530033ffc00411b2
503340b80411b24d3340bc041100470033ffc00411b344453240b80411b2
423340bc0411003e0033ffc00411b23a331f412404110020041100400411
0070041100af041100f004110006000f0411002f04110090041100ff0411
0004002f041100400411007f0411008f041100a0041100e004110006ffc0
0411b208330f411b0410008f04100002000f0410001f0410002f04100003
00600409000100b004090001000f0408003f0408004f0408009f04070004
040ab2006c1fb9ffc00403b345453240b80403b32b2e3240b80403b22829
32b9ffc00403b21a1c32bd040302990027001fffc00401b2161b32b9ffc0
0400b2424232b9ffc00400b2363832b9ffc00400b32a2d32df410a040000
ef04000002040004010028001fffc00401b3282e32f0bf0401000103fe00
0f0101001fffc003fcb310143240b803fdb30f133240411003f9005003f9
000200b003b100c003b10002006f03f5007f03f50002ffc003afb22d3132
b9ffc003afb30a0e3210411003ef002003ef008003ef000300a003ef0001
002003ef004003ef0002ffc003efb313163240b803e7b20f1132b9ffc003
dfb2303432b9ffc003dfb310183250411403dc000103c903d20023001f03
e203d2001e001f03c703d2001d001f03c603c8000d001fffc003a4b30f10
3280411003a3000103a303790029001f03a5037a0032001f03a8037e001b
001fffc003d9b20e1132b9ffc003d9b2282a32410a03a7037c0032001f03
7303710034001f036c036bb2321f20bb03a40001004003ecb3090b3240b8
03ecb2101532bd03e9036b0014001f03e4036bb2171f0fbd036e002f036e
0002ffc003b8b3090d3290410c03b800a003b80002001f03d20001009f03
d20001004003d2b2090b32410a03a903800016001f03cf03810015001f03
aa0382b2151fc0bb03f70001004003f6b3090d3240b803a2b2083340b803
a2b30d0e32c0410903a2000100b003f200c003f20002ffc003f4b3263832
004126038c0030038c0002002003e3003003e30002001003ee003003ee00
5003ee006f03ee007f03ee009f03ee0006000003ed003003ed0002002f03
de007003db009003db009f03de0004ffc00379b20f1032b9ffc00379b224
2832b9037d037cb2321f10bb037e0001ffc0037eb3090e3240b8037cb212
1332b9ffc0037cb30c0e323fbd03d7004f03d70002004003d8b31718326f
bb038e000100400390b3181b3240b803d4b2090c32bd037b037a0032001f
ffc0037ab20e1132bd038003820016001f03810382b2151fb0be03820001
000f03830001004003ffb30c11327f411403540001006f0354008f035400
d0035400ef03540004000f0354002f0354005f0354000300400350b30e0f
320fbb035a000100400349b20e331fbd0348007f03480002ffc00348b215
2232b9ffc00347b2152232b9ffc0040fb21b1e32beffc0040f002d010000
32040e0406b22f1f51bb034b0001034f034eb2641f40b80351b20e0f32b9
ffc0034eb3383a3230bb034e0001ffc0034eb21f2332b9ffc0034eb21319
32b9ffc00346b2091132b9ffc00343b30a11320fbb03440001ffc0032bb2
080e32b9ffc0032bb2161b32b9ffc0032ab31417321f4110033a0001000f
03330001000003370020033700300337008003330004ffc00332b3101232
50416403320001004003320060033200a0033200b0033200040010033200
3003320050033200e003320004000f0336007f033600ff03360003007003
3600f003360002000f0331003f0331008f033100bf033100e00331000500
0f0331006003310002008f03300001006003300090033000020050032f00
010010032f0040032f0060032f0080032f00a0032f00c0032f00f0032f00
0700cf032d00ff032d00020030032d0080032d00b0032d00df032d000400
6f032c007f032c00020012032000fd0800001f007f0299403a017f007f01
7f027f037f047f057f107f11084035252c32406a252c32402e252c324028
252c323760097009800903300940095009031009200902b8ffc0b2073a33
b8ffc04012063a33da4dea4dfa4d0312379006900702cf410c011100df01
1100ef0111000300cf011000df011000ef0110408703cf3edf3eef3e03cf
4ddf4def4d03cfdedfdeefde03cf2ddf2def2d03404d1b3a32375f016f01
7f018f01041f012f013f014f01045f036f037f038f03041f032f033f034f
0304600b700b800b03300b400b500b03100b200b02900ba00bb00bc00bd0
0b05b006c006d006e006f0060550066006700680069006a006061f072f07
3f07400604f0414302db000100a002db00b002db0002008002db009002db
0002001002db000100c002db00d002db0002009002db0001006002db0070
02db0002004002db005002db0002002302db003002db000202db002300a0
02da0001008002da009002da0002004002da0001002302da003002da0002
02da0023000002d90001007002d9009002d9000202d9401c223024402402
1024202402002401f02401d024e02402b024c02402c0413a02d8000100a0
02d800b002d80002008002d8009002d80002002302d8003002d8000202d8
002300c002d7000100a002d700b002d70002008002d7009002d7000200a0
02d700b002d70002008002d7009002d70002006002d7007002d700020040
02d7005002d70002002302d7003002d7000202d7b223370f4117029b0001
005f029b009f029b00df029b0003002f029b003f029b006f029b0003001f
029b0001029b029b0040029ab3272c3280b8029ab2263340b8029ab22233
40b8029ab21e3340b8029ab21c3340b8029ab3191a325f410f029a009f02
9a00df029a0003000f029a001f029a003f029a0003ffc00299b2443340b8
0299b23d3340b80299b23a33df413902990001005f029900af0299000200
4f0299009f02990002002f0299003f0299000200af02990001000f029900
3f0299000200b0029900e0029900020070029900a002990002004f029900
5f02990002000f0299001f0299002f0299003f02990004029a029a029902
99000f027a002f027a400b0200161600000012110812b802bab269121fb8
02b4b228101fb802b3b228101fb802b2b228101f411302030023000d01ee
0023000d01ae0023000d019f0023000d01940023000d01570023000d010f
400b230df9230dc5230da7230d410a024a0024000d01f00024000d01e900
24000d016a400e240de8240dc6240da3240da2240dbb01e30022000d0121
401a220de5220ddd220db7220daa220d93220d5c220d51220d4c220d410a
02280020000d021d0020000d015e0020000d011c4017200dfc200de1200d
cb200dc8200da1200d59200d3a200d410a01f20034000d019c0034000d01
970034000d0135b7340d1f340d1d340dba0202000f015bb20f0009bb0202
015b000d030ab22a3e1fb80309b22a3e1fb80221b24d251fb8021cb24d41
1fb8021bb24d521fb8021ab24d721fb80213b24d931f4109020f01b10401
001f020e01b10801001f020cb22a811fb8020bb22a811fb80208b22a5e1f
b80205b22a391fb801feb22a231fb801fbb2661d1fb801fab2661e1fb801
f6b266341fb801f5b266341fbc01f300660201001f01f1b2669e1f410901
ea00280801001f01e7002602ab001f01b8b24d3f1fb801b7b24d931f4109
01b4003e0125001f01b200400401001f01acb22a721fb801a8b22a281fb8
01a7b22a241fb801a6b22a241fb801a3b22a1f1fb801a1b2662e1fb8019e
b266931fb8019db266e41fb8019ab2286c1f4109019900280401001f0198
00260401001f0173b24d1b1fb80171b24d241fb80170b24d2f1fb8016fb2
4d351fb8016bb23ecd1fb80169b23ee41f4109016701b1019a001f016600
2a02ab001f0161b2662a1fb8015fb2669e1f4109015d0028019a001f015c
00350401001f0147b24d391fb80146b23ecd1f410d0145003e0125001f01
4401430101001f014201b102ab001f0140b22a301fb8013eb22a261fb801
3db2661d1fb8013cb2662b1fb80138b228811fb80137b2289e1fbc013600
28019a001f0129b24d721fbc0124002a0201001f0123b22aab1fb8011fb2
66291fb8011eb266451fb8011bb228811f41090113003e0125001f011200
3e0401001f0111b22a291fb80110b22a201fbe010b0066019a001f010a00
26019ab61ffd4d721ffb3eb80156b21ffa40b80801b21ff728b80801b61f
ec4d621feb4db80401b21fea40b802abb61fdf4d721fde3eb802ab400b1f
dc2ae41fdb66221fca2ab80401401b1fc92a2e1fc326791fb828bb1fb34d
1e1fb166291fb066621faf66b80401b21fae26b802abb21fa828b8020140
0b1fa0664c1f982a2b1f9726b8019ab61f9266291f8740b802ab401b1f85
2a791f8226811f754d931f744d891f732a1d1f70285e1f6a28b804014017
1f692a521f682a201f6766291f6566671f612a931f6035b80801b61f5e2a
cd1f5335b80801b21f4b66b80156b21f493eb80801b61f4866521f4626b8
0201b21f3f66b80156400b1f3b66341f322a931f2e35bb0401001f002d01
43b3cd1f5537bc022f0007018000070172402e07bd077e07620754074207
2f072707250721071e071408120810080e080c080a080808060804080208
0008000214b8ffe0402b0000010014061000000100060400000100041000
0001001002000001000200000001000002010802004a00b013034b024b53
42b0372b4bb807ff52b0382b4bb008505b58b101018e59014bb0c063004b
6220b0f65323b8010a515ab005234201b0124b004b544218b0382bb00288
b801005458b801ffb101018e851bb0124358b90001012c858d1bb9000101
46858d59590016763f183f123e113946443e113946443e113946443e1139
46443e11394660443e113946604445442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff
1d594bb02953205c58b9026c026a4544b9026b026a45445958b90168026c
455258b9026c01684459594bb03b53205c58b9003e026b4544b9004d026b
45445958b9025c003e455258b9003e025c4459594bb03b53205c58b901b1
003e4544b13e3e45445958b9024f01b1455258b901b1024f4459594bb05a
53205c58b90143003e4544b13e3e45445958b9038b0143455258b9014303
8b4459594bb09e53205c58b9002a026c4544b90040026c45445958b9056c
002a455258b9002a056c4459594bb01853205c58b126264544b166264544
5958b13226455258b126324459594bb05153205c58b126264544b1282645
445958b1ad26455258b126ad4459594bb8010153205c58b126264544b135
2645445958b902280026455258b9002602284459592b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b33d766e58456523456023
456560234560b08b766818b080622020b16e764565234520b00326606263
6820b003266165b076236544b06e234420b13d584565234520b003266062
636820b003266165b058236544b03d2344b10058455458b158406544b23d
403d4523614459b34e813871456523456023456560234560b089766818b0
80622020b138814565234520b003266062636820b003266165b081236544
b038234420b14e714565234520b003266062636820b003266165b0712365
44b04e2344b10071455458b171406544b24e404e45236144594b5242014b
5058b108004259435c58b108004259b3020b0a124358601b215942161070
3eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b012
4358b92d412d411bba04000400000b2b59b00e2342b00f2342b0124358b9
187e3b211bba01a80400000b2b59b0102342b01123420074184569444569
44737373737474757575752b2b2b73732b2b2b2b2b2b1845694473737374
2b4544737373737374747445447374747474747475757545447375454473
73747445447373737373747474740075757575757575757575752b2b7474
7474747400732b4358b14d4d451869441bb8ffc0b34d1b3a322b5973002b
2b7575752b2b2b2b2b0073732b435c58b8ffc0b2071633b8ffc0400b0616
33d54de54df54d03c0410c011100d0011100e00111000300c0011000d001
1000e00110401e03c03ed03ee03e03c04dd04de04d03c0ded0dee0de03c0
2dd02de02d03372b74747474747473002b2b590173737473747374737473
747374752b737573002b2b2b01732b2b2b2b752b2b2b732b2b2b002b2b74
2b732b7373742b73732b2b2b2b2b2b732b732b2b2b742b2b2b7373737373
2b73732b2b2b73002b2b2b2b7374732b732b2b2b2b752b2b2b2b2b2b2b2b
752b2b2b2b2b732b2b2b2b7374752b2b7373732b2b2b752b2b732b2b2b2b
2b2b2b2b2b2b73747573742b7374752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b7374752b2b2b002b2b4569442b2b00>
[15749 16185 13769 16257 15969 16245 15969 15353 14957 16085 16221 15837 16313
16081 16109 16337 15041 16089 16333 14797 16253 16297 16357 15105 15905 16265
16021 16313 16317 15741 15937 16161 16345 16253 15853 15017 15769 15917 16373
16237 14981 16221 16137 16377 16253 16137 14953 15513 16321 16381 16523 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

3 0 3 <> GAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
3 0 0 <0002011c0000051c0500000300070042b40201c30607b803084013000504
c303000a0704c3010019080605c30203bc014100090125015600182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
011c0400fc2003c0fc400500fb002004c000>GAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
GAAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/space 3 def
end
GAAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 32 /space put
pop
end
%ADOEndSubsetFont
/ZNINMT+TimesNewRomanPS-BoldMT /GAAAAA+TimesNewRomanPS-BoldMT findfont ct_VMDictPut
/ZNINMT+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /space 223{/.notdef}rp]
ZNINMT+TimesNewRomanPS-BoldMT nf
ZNINMT+TimesNewRomanPS-BoldMT*1 [7.5 0 0 -7.5 0 0 ]msf
54.569 43.3762 mo
( )sh
/ZNINMQ+Times-Italic*1 uf
/ZNINMR+TradeGothic*1 uf
/ZNINMR+TradeGothic uf
/GAAAAA+TradeGothic uf
/ZNINMT+TimesNewRomanPS-BoldMT*1 uf
/ZNINMT+TimesNewRomanPS-BoldMT uf
/GAAAAA+TimesNewRomanPS-BoldMT uf
/ZNINMS+MinionPro-Bold*1 uf
/ZNINMS+MinionPro-Bold uf
/GAAAAA+MinionPro-Bold uf
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINMU+Times-Italic /BFLGAB+Times-Italic findfont ct_VMDictPut
/ZNINMU+Times-Italic*1 
[84{/.notdef}rp /T 171{/.notdef}rp]
ZNINMU+Times-Italic nf
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
57.0054 43.3762 mo
(T)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
57.0054 43.3762 mo
(T) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /GAAAAA+TradeGothic def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Trade Gothic is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (TradeGothic) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
def
/UniqueID 526877 def
/FontBBox {-167 -224 1000 960} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 0 722 732 520 530] def
/OtherBlues [286 292 408 414 -192 -192] def
/BlueScale 0.0562916 def
/StdVW [72] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/two <1C60D8A8C9B7D8BE6A16EB6F26215E3460D9BD553069FBCE3D662EB4B0
33EC1E293A52834839B8C8514D60BE86370A06DBB3EF6ED80F53DE8BAE1E836F
1D502D95C0DF09545D0B1E5CF33471EDCC2A7D2A4E7EB0884476D1> |-
/.notdef <1C60D8A8C9B83BB89A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZNINMV+TradeGothic /GAAAAA+TradeGothic findfont ct_VMDictPut
/ZNINMV+TradeGothic*1 
[50{/.notdef}rp /two 205{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
61.2269 45.3685 mo
(2)sh
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
61.2269 45.3685 mo
(2) false chp
.143 lw
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
18.6399 48.3685 mo
(T)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
18.6399 48.3685 mo
(T) false chp
.214 lw
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7D8BE6A16EB6EA25D4E089C590D9B7881D3E9C27DB0133A
B45CC9CDC1FCE4323F9FF09E6247DC742E7A7D7395CE295B809B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
22.8099 50.3685 mo
(1)sh
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
22.8099 50.3685 mo
(1) false chp
.143 lw
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
82.0569 48.3685 mo
(T)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
82.0569 48.3685 mo
(T) false chp
.214 lw
@
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
86.2269 50.3685 mo
(2)sh
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
86.2269 50.3685 mo
(2) false chp
.143 lw
@
74.9124 58.7431 mo
74.9124 58.4671 75.1364 58.2431 75.4124 58.2431 cv
75.6884 58.2431 75.9124 58.4671 75.9124 58.7431 cv
75.9124 59.0191 75.6884 59.2431 75.4124 59.2431 cv
75.1364 59.2431 74.9124 59.0191 74.9124 58.7431 cv
cp
f
.5 lw
74.9124 58.7431 mo
74.9124 58.4671 75.1364 58.2431 75.4124 58.2431 cv
75.6884 58.2431 75.9124 58.4671 75.9124 58.7431 cv
75.9124 59.0191 75.6884 59.2431 75.4124 59.2431 cv
75.1364 59.2431 74.9124 59.0191 74.9124 58.7431 cv
cp
@
.25 lw
75.4124 58.7431 mo
85.0564 58.7431 li
85.0564 49.4931 li
@
32.0154 58.7431 mo
32.0154 58.4671 31.7903 58.2431 31.5154 58.2431 cv
31.2384 58.2431 31.0154 58.4671 31.0154 58.7431 cv
31.0154 59.0191 31.2384 59.2431 31.5154 59.2431 cv
31.7903 59.2431 32.0154 59.0191 32.0154 58.7431 cv
cp
f
.5 lw
32.0154 58.7431 mo
32.0154 58.4671 31.7903 58.2431 31.5154 58.2431 cv
31.2384 58.2431 31.0154 58.4671 31.0154 58.7431 cv
31.0154 59.0191 31.2384 59.2431 31.5154 59.2431 cv
31.7903 59.2431 32.0154 59.0191 32.0154 58.7431 cv
cp
@
.25 lw
31.5154 58.7431 mo
21.8703 58.7431 li
21.8703 49.4931 li
@
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINMU+Times-Italic*1 
[84{/.notdef}rp /T 28{/.notdef}rp /q 142{/.notdef}rp]
ZNINMU+Times-Italic nf
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
89.0659 86.2855 mo
(q)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
89.0659 86.2855 mo
(q) false chp
.214 lw
@
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINMU+Times-Italic*1 
[34{/.notdef}rp /quotedbl 49{/.notdef}rp /T 28{/.notdef}rp /q 142{/.notdef}rp]
ZNINMU+Times-Italic nf
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
92.6468 86.2852 mo
(")sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
92.6468 86.2852 mo
(") false chp
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
174.693 82.2055 mo
(q)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
174.693 82.2055 mo
(q) false chp
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
178.274 82.2052 mo
(")sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
178.274 82.2052 mo
(") false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B7D8BE600025B32219B727C3BC054FE0EB977609E6B55AD285
B0CE7D07A8A292C8401AE0B02EA97D83FF28311B64F188A5B5404E2F84B0D26D
C41A6562F1F61BB5FA36D4AEA0B3785D3F29391A72877A54467CB977B37C914C
1F8F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 67 /C put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[49{/.notdef}rp /one /two 16{/.notdef}rp /C 188{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
14.5569 12.3685 mo
(C)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
14.5569 12.3685 mo
(C) false chp
.2 lw
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7A73DCF2A0DC57F4091A4EED0296A95D086B05E2D1DB92600
4FB8362356EBABBC9B53B98E8EB2AC96E43286F54AE60A39F3538AF702059C4C
BD7C43D8C9FEFF8CF0CF4751C7FBF2E8A133FE428C91930E7101> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 111 /o put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[49{/.notdef}rp /one /two 16{/.notdef}rp /C 43{/.notdef}rp /o 144{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
18.8339 12.3685 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
18.8339 12.3685 mo
(o) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/n <1C60D8A8C9B7EF327C10274AC23FBD884ED888AC1F530A1D9928420B6F5E
33B60232D96BFCD169E762F11F103B2F0FA03A399527137EF70CF09EC9CB92BE
C50432E1807CFDFD432B336631EA30A84EE39A57397EFCE48721B2EC8B2F1CCD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 110 /n put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[49{/.notdef}rp /one /two 16{/.notdef}rp /C 42{/.notdef}rp /n /o 
144{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
22.3339 12.3685 mo
(n)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
22.3339 12.3685 mo
(n) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7EF325DAEDA03421739FDE27F3796A0DE82BC38205786F474
DC85A101BB86ADEE38D90AE9E3894E8BC25223E3C0B10D8733863317757B43CD
66E78FE5F810A6BAAC803F91504554E356AF5561E4A97B163AA0C8827C6A14EB
2C02A2F35125F15D024E55979719D61309B31DA54E6C929A696B32C95C3100F3
7E9133075A03576F9FF3101D359C6FA9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[49{/.notdef}rp /one /two 16{/.notdef}rp /C 32{/.notdef}rp /d 9{/.notdef}rp 
/n /o 144{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
26.2259 12.3685 mo
(d)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
26.2259 12.3685 mo
(d) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/u <1C60D8A8C9B7EF327C10274AC23FBD94556E06D6D6428B3DA39E3B324C40
BB88EA8592C3DAE9FA2621C761FDA82E3DA4E5A575268335D9140898C9F8C243
3BD98409D203AD7276E0F4EC5CDB9155AF55445D732BDC35C1A03063E3F260E8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 117 /u put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[49{/.notdef}rp /one /two 16{/.notdef}rp /C 32{/.notdef}rp /d 9{/.notdef}rp 
/n /o 5{/.notdef}rp /u 138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
30.1179 12.3685 mo
(u)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
30.1179 12.3685 mo
(u) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B7A73DCF2A0DC57F4091A77BEB081941FD8CBA8E813F7862F5
BF587F8A81525E56C988CC32214B2A44F57D5102C8AD21BE3E7668885BCD8247
70EFDBF82132E464D1D5D6D83E39285AD61BDEE0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[49{/.notdef}rp /one /two 16{/.notdef}rp /C 31{/.notdef}rp /c /d 
9{/.notdef}rp /n /o 5{/.notdef}rp /u 138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
34.0099 12.3685 mo
(c)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
34.0099 12.3685 mo
(c) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/t <1C60D8A8C9B81F2C4CF6C61447FCCB8F270BE492C714988F6BA7DA6A7301
B96586BA4BEBFEA469CA151C66CA8CE6417C67288D65582BF256CCC3E98243E9
06E08A021FDB468FA8C84D55B7D2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 116 /t put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[49{/.notdef}rp /one /two 16{/.notdef}rp /C 31{/.notdef}rp /c /d 
9{/.notdef}rp /n /o 4{/.notdef}rp /t /u 138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
37.5099 12.3685 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
37.5099 12.3685 mo
(t) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/i <1C60D8A8C9B854D0A3953AFCFA4D92FB69C2D75606586E172A6132B2EB04
58446FC37312829DE5EA1532F074C8D75BA6ED76B901> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 105 /i put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[49{/.notdef}rp /one /two 16{/.notdef}rp /C 31{/.notdef}rp /c /d 
4{/.notdef}rp /i 4{/.notdef}rp /n /o 4{/.notdef}rp /t /u 
138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
39.8408 12.3685 mo
(i)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
39.8408 12.3685 mo
(i) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
41.7868 12.3685 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
41.7868 12.3685 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
45.2868 12.3685 mo
(n)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
45.2868 12.3685 mo
(n) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B83BB89A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 32 /space put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 31{/.notdef}rp 
/c /d 4{/.notdef}rp /i 4{/.notdef}rp /n /o 4{/.notdef}rp 
/t /u 138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
49.1788 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
49.1788 12.3685 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
51.3138 12.3685 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
51.3138 12.3685 mo
(t) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/h <1C60D8A8C9B7EF327C10274A36ADFCA60060EFF63560D84E64853FFA3F88
68B9459C6D8812294C224E0C12F32F73BF5169CFD8ACC5A21479DD6D0EA7CF56
E2FAC5CEB62AB68ACC82450A238BB4EC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 104 /h put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 31{/.notdef}rp 
/c /d 3{/.notdef}rp /h /i 4{/.notdef}rp /n /o 
4{/.notdef}rp /t /u 138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
53.6447 12.3685 mo
(h)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
53.6447 12.3685 mo
(h) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/r <1C60D8A8C9B81F2C6DADD0309A2B2AF1BE95B5265065F0E68AD666B6A9D3
4683B4ED3D96101D83BE5D64189284C81BAC9AD9F3565F97122464BB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 114 /r put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 31{/.notdef}rp 
/c /d 3{/.notdef}rp /h /i 4{/.notdef}rp /n /o 
2{/.notdef}rp /r /.notdef /t /u 138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
57.5367 12.3685 mo
(r)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
57.5367 12.3685 mo
(r) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
59.8677 12.3685 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
59.8677 12.3685 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
63.3677 12.3685 mo
(u)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
63.3677 12.3685 mo
(u) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7A73DB5B817C8EE8D6B15B3431343D958CE9E89BE2E3A41DC
34AA647801E9DD446B430BF940E4DEF9054B5627469760CB21F942BDE44C9334
BFFA5107B7B10DE77DA972AD646B6A7903FF9665981EE1A92855B290D3C3FC64
776A7DF23551A6009AA4600C5BA8A3643F2586285C5FE56732BF6CED39D0DCDE
AF5B44241E3A4BCF909845B8F373BD3A0192AE57310514089BC29EC8F9A7F55A
BFA3314F4C5C2E51A2AF066655E3F847254F14D7E3F9186F12524AF43614BD7F
3184732D921BBBE1313C116712366243057070E9CB641A0DDB2F7D06ACC88362
A216229D9BB2A5F1F47E997362E9C52F367EC8192F3558A4579880B97B95963C
F7A1738CCE65463E0ACF9B12D11F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 103 /g put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 31{/.notdef}rp 
/c /d 2{/.notdef}rp /g /h /i 4{/.notdef}rp /n 
/o 2{/.notdef}rp /r /.notdef /t /u 138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
67.2597 12.3685 mo
(g)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
67.2597 12.3685 mo
(g) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
70.7597 12.3685 mo
(h)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
70.7597 12.3685 mo
(h) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
74.6517 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
74.6517 12.3685 mo
( ) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7A73DCF2A0DC57F4091A101EAE88E6236A6B4AD1418868FE5
2FC061050CFF2EFABA65DB091A10B78E8DA0BD23937163F09CB9573D0C19237D
2019329107024B7E1CBEAF3F4A2B6C684CBA4CF6997AEB97E142F9693416D208
9DB28CC1940A7B7150CA7579DDCF6D457931928D623538D2764065C8E47FB27F
347A0E2C8CA790A0A5C07569648B7B5552> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 97 /a put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 29{/.notdef}rp 
/a /.notdef /c /d 2{/.notdef}rp /g /h /i 
4{/.notdef}rp /n /o 2{/.notdef}rp /r /.notdef /t /u 
138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
76.7866 12.3685 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
76.7866 12.3685 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
80.2866 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
80.2866 12.3685 mo
( ) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B77FE2B8A9DAB5B2AF5C423072E3EC66200218BDA3E7EA9E11
C1FED73E0BAF5EDAA6E89BD867B69683C0722A790C2230190A9129C2FEBA4E18
13151E0E0572BADBCC0EDA90C41473ED86362C11972C78E13F24A478825275E3
BAE7E66E1305> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 115 /s put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 29{/.notdef}rp 
/a /.notdef /c /d 2{/.notdef}rp /g /h /i 
4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t /u 
138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
82.4216 12.3685 mo
(s)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
82.4216 12.3685 mo
(s) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
85.5296 12.3685 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
85.5296 12.3685 mo
(o) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/l <1C60D8A8C9B854D0A3953AFD522A4328128F4700148A29F14B25442E044F
A905> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 108 /l put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 29{/.notdef}rp 
/a /.notdef /c /d 2{/.notdef}rp /g /h /i 
2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s 
/t /u 138{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
89.0296 12.3685 mo
(l)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
89.0296 12.3685 mo
(l) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
90.9756 12.3685 mo
(i)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
90.9756 12.3685 mo
(i) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
92.9216 12.3685 mo
(d)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
92.9216 12.3685 mo
(d) false chp
@
%ADOBeginSubsetFont: GAAAAA+MinionPro-Bold Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /GAAAAA+MinionPro-Bold def
/FontInfo 7 dict dup begin
/Notice (Copyright 1990, 1991, 1992, 1994, 1997, 1998, 2000, 2002, 2004 Adobe Systems Incorporated. All rights reserved. Minion is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
def
/FontBBox {-319 -360 1684 1024} def
end
systemdict begin
dup /Private
16 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 442 458 475 488 623 636 650 665 691 703] def
/OtherBlues [-244 -230] def
/FamilyBlues [-15 0 437 453 464 478 623 636 650 665 701 712] def
/FamilyOtherBlues [-257 -240] def
/BlueScale 0.046875 def
/BlueFuzz 0 def
/StdHW [41] def
/StdVW [128] def
/StemSnapH [41] def
/StemSnapV [128] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/space <1C60D8A8C9B893A7FD> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4A980A717C67
5DD749FCAD021C86E4A82A71450A60069401092D2766EC2A38FB4B27A723A2EF
044B6549AE7BD225531C9BFBD9FDEC4C158C539EAA9E47425F43D2DE9C2FA717
B7B8B00C9770334A66> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZNINMW+MinionPro-Bold /GAAAAA+MinionPro-Bold findfont ct_VMDictPut
/ZNINMW+MinionPro-Bold*1 
[32{/.notdef}rp /space 223{/.notdef}rp]
ZNINMW+MinionPro-Bold nf
ZNINMW+MinionPro-Bold*1 [7 0 0 -7 0 0 ]msf
96.8134 12.3682 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
14.5564 20.0262 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
14.5564 20.0262 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
18.0564 20.0262 mo
(r)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
18.0564 20.0262 mo
(r) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
20.3874 20.0262 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
20.3874 20.0262 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
22.5223 20.0262 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
22.5223 20.0262 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
26.0223 20.0262 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
26.0223 20.0262 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
28.1573 20.0262 mo
(s)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
28.1573 20.0262 mo
(s) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
31.2653 20.0262 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
31.2653 20.0262 mo
(t) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
33.5962 20.0262 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
33.5962 20.0262 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
37.0962 20.0262 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
37.0962 20.0262 mo
(t) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
39.4272 20.0262 mo
(i)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
39.4272 20.0262 mo
(i) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
41.3732 20.0262 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
41.3732 20.0262 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
44.8732 20.0262 mo
(n)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
44.8732 20.0262 mo
(n) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
48.7652 20.0262 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
48.7652 20.0262 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
52.2652 20.0262 mo
(r)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
52.2652 20.0262 mo
(r) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B77FE2C225BA4155BBC87DE0E997AD2FBF67AAD8D658BD1F92
088CB94154E34804FD134E2B9BF377F064F7EC62EEF6AE1F0ADAFCD0E017B443
8A939F41B69421470ABC4FE05B66476E4660437A4C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 29{/.notdef}rp 
/a /.notdef /c /d 2{/.notdef}rp /g /h /i 
2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s 
/t /u 3{/.notdef}rp /y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
54.5961 20.0262 mo
(y)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
54.5961 20.0262 mo
(y) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
57.7041 20.0262 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
57.7041 20.0262 mo
( ) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B81F2C6DADD03098956E92CE957C228CDB17408C09C40BEB5A
6F374BB8AC78EA96FB4A9F084021FDE9EC1CCEEF7A607BF493081E8AB16E522B
5FA15FC22F7958E638D5AF0F89D97E5BFB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 102 /f put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 29{/.notdef}rp 
/a /.notdef /c /d /.notdef /f /g /h 
/i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
59.8391 20.0262 mo
(f)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
59.8391 20.0262 mo
(f) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
62.17 20.0262 mo
(l)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
62.17 20.0262 mo
(l) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
64.116 20.0262 mo
(u)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
64.116 20.0262 mo
(u) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
68.008 20.0262 mo
(i)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
68.008 20.0262 mo
(i) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
69.954 20.0262 mo
(d)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
69.954 20.0262 mo
(d) false chp
@
gsave
2.62935 1.50909 mo
338.629 1.50909 li
338.629 137.519 li
2.62935 137.519 li
cp
eclp
.5 lw
3.55635 128.869 mo
112.556 128.869 li
112.556 2.86813 li
3.55635 2.86813 li
cp
112.556 128.869 mo
cp
4.05635 24.8681 mo
112.056 24.8681 li
@
grestore
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
123.557 12.3685 mo
(C)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
123.557 12.3685 mo
(C) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
127.834 12.3685 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
127.834 12.3685 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
131.334 12.3685 mo
(n)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
131.334 12.3685 mo
(n) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v <1C60D8A8C9B77FE2B26F7955A88520EEF9B4F0850706D74A429BDF2E5A58
1EE43B09C9D57A86D959D9761B846D90BFED6B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 118 /v put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 29{/.notdef}rp 
/a /.notdef /c /d /.notdef /f /g /h 
/i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r 
/s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
135.226 12.3685 mo
(v)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
135.226 12.3685 mo
(v) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/e <1C60D8A8C9B7A73DCF2A0DCA95830AADA2ED924424FF499C21A1431D1BAC
6C10906C5D078A97E7A3D46D87BB75FCA03EF3C2A5ECF76C8711C2CED9C3CB54
445529E3B0785F6E2FE6DAC7DEBA4F3C89B812C96B8744AD6727A6F54A673C94
6CCF1EB12C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 101 /e put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 29{/.notdef}rp 
/a /.notdef /c /d /e /f /g /h 
/i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r 
/s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
138.334 12.3685 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
138.334 12.3685 mo
(e) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
141.834 12.3685 mo
(c)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
141.834 12.3685 mo
(c) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
145.334 12.3685 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
145.334 12.3685 mo
(t) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
147.665 12.3685 mo
(i)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
147.665 12.3685 mo
(i) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
149.611 12.3685 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
149.611 12.3685 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
153.111 12.3685 mo
(n)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
153.111 12.3685 mo
(n) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
157.003 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
157.003 12.3685 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
159.138 12.3685 mo
(f)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
159.138 12.3685 mo
(f) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
161.469 12.3685 mo
(r)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
161.469 12.3685 mo
(r) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
163.8 12.3685 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
163.8 12.3685 mo
(o) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/m <1C60D8A8C9B6B41C9140C58F1D78A1EAE1314823CFC5335FCC5410B70E36
0470E7C1CD94343A468667CF3252F5D303347B16AF9AC3AF3595653CF181E167
3221F009260E1BD02AF45C044113F9699B0D467CF55484EED6210A7D84BD167E
7276761CA24A570EF2E4E831A1159A15526A442AF67CC30ABFBB49609B41CABA
DBA28D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 109 /m put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 29{/.notdef}rp 
/a /.notdef /c /d /e /f /g /h 
/i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r 
/s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
167.3 12.3685 mo
(m)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
167.3 12.3685 mo
(m) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
173.131 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
173.131 12.3685 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
175.266 12.3685 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
175.266 12.3685 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
178.766 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
178.766 12.3685 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
180.9 12.3685 mo
(s)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
180.9 12.3685 mo
(s) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
184.009 12.3685 mo
(u)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
184.009 12.3685 mo
(u) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
187.9 12.3685 mo
(r)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
187.9 12.3685 mo
(r) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
190.231 12.3685 mo
(f)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
190.231 12.3685 mo
(f) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
192.562 12.3685 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
192.562 12.3685 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
196.062 12.3685 mo
(c)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
196.062 12.3685 mo
(c) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
199.562 12.3685 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
199.562 12.3685 mo
(e) false chp
@
ZNINMW+MinionPro-Bold*1 [7 0 0 -7 0 0 ]msf
203.062 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
123.557 20.0265 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
123.557 20.0265 mo
(t) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
125.888 20.0265 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
125.888 20.0265 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
129.388 20.0265 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
129.388 20.0265 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
131.523 20.0265 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
131.523 20.0265 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
135.023 20.0265 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
135.023 20.0265 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
137.158 20.0265 mo
(m)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
137.158 20.0265 mo
(m) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
142.989 20.0265 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
142.989 20.0265 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
146.489 20.0265 mo
(v)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
146.489 20.0265 mo
(v) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
149.597 20.0265 mo
(i)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
149.597 20.0265 mo
(i) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
151.543 20.0265 mo
(n)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
151.543 20.0265 mo
(n) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
155.435 20.0265 mo
(g)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
155.435 20.0265 mo
(g) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
158.935 20.0265 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
158.935 20.0265 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
161.07 20.0265 mo
(f)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
161.07 20.0265 mo
(f) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
163.401 20.0265 mo
(l)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
163.401 20.0265 mo
(l) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
165.347 20.0265 mo
(u)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
165.347 20.0265 mo
(u) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
169.239 20.0265 mo
(i)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
169.239 20.0265 mo
(i) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
171.185 20.0265 mo
(d)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
171.185 20.0265 mo
(d) false chp
@
.5 lw
112.556 128.869 mo
221.556 128.869 li
221.556 2.8681 li
112.556 2.8681 li
cp
221.556 128.869 mo
cp
113.056 24.8681 mo
221.056 24.8681 li
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/N <1C60D8A8C9B6079F3517E074EADE028435C7B6B71E0E82F041BCB96545F7
12D36ED956F65EFEC612029F92D7BF6201A389FE5E63F7776C5B2F7DA704D3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 78 /N put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 10{/.notdef}rp 
/N 18{/.notdef}rp /a /.notdef /c /d /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v 2{/.notdef}rp /y 
134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
232.557 12.3685 mo
(N)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
232.557 12.3685 mo
(N) false chp
.2 lw
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
237.611 12.3685 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
237.611 12.3685 mo
(e) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
241.111 12.3685 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
241.111 12.3685 mo
(t) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
243.442 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
243.442 12.3685 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
245.577 12.3685 mo
(r)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
245.577 12.3685 mo
(r) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
247.908 12.3685 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
247.908 12.3685 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
251.408 12.3685 mo
(d)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
251.408 12.3685 mo
(d) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
255.3 12.3685 mo
(i)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
255.3 12.3685 mo
(i) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
257.246 12.3685 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
257.246 12.3685 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
260.746 12.3685 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
260.746 12.3685 mo
(t) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
263.077 12.3685 mo
(i)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
263.077 12.3685 mo
(i) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
265.023 12.3685 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
265.023 12.3685 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
268.523 12.3685 mo
(n)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
268.523 12.3685 mo
(n) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
272.415 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
272.415 12.3685 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
274.55 12.3685 mo
(h)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
274.55 12.3685 mo
(h) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
278.442 12.3685 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
278.442 12.3685 mo
(e) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
281.942 12.3685 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
281.942 12.3685 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
285.442 12.3685 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
285.442 12.3685 mo
(t) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
287.773 12.3685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
287.773 12.3685 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
289.908 12.3685 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
289.908 12.3685 mo
(e) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B77FE299176F63B3DF45E0FD06B1807968656251BBA1F133ED
1346E704EFBFB1011B5C1B7F9456BA1576C821E895175C06A750B2131158B995
B11076C38D1E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 10{/.notdef}rp 
/N 18{/.notdef}rp /a /.notdef /c /d /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /.notdef /x 
/y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
293.408 12.3685 mo
(x)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
293.408 12.3685 mo
(x) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
296.516 12.3685 mo
(c)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
296.516 12.3685 mo
(c) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
300.016 12.3685 mo
(h)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
300.016 12.3685 mo
(h) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
303.908 12.3685 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
303.908 12.3685 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
307.408 12.3685 mo
(n)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
307.408 12.3685 mo
(n) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
311.3 12.3685 mo
(g)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
311.3 12.3685 mo
(g) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
314.8 12.3685 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
314.8 12.3685 mo
(e) false chp
@
ZNINMW+MinionPro-Bold*1 [7 0 0 -7 0 0 ]msf
318.3 12.3685 mo
( )sh
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7EF325DAEDA03421739FDE27F37CC2DB7819A1DDD59EB9FD9
0FDD2A451AB9EC80D3DA1C21F9A15EA170C6FC31FC8EE8A197CABADBDFB15E72
1ABEDE4CFC67AF101CA4FD32C764086B33109810A5AFBAD0A8D95B784C4E0BD9
84711BAFB17E0CFC276277F03044D4A1AB97371B1B28662AFC1EDB706655486C
33312E551C4B3D58CADD36D3A8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 10{/.notdef}rp 
/N 18{/.notdef}rp /a /b /c /d /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /.notdef /x 
/y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
232.557 20.0265 mo
(b)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
232.557 20.0265 mo
(b) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
236.449 20.0265 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
236.449 20.0265 mo
(e) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
239.949 20.0265 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
239.949 20.0265 mo
(t) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/w <1C60D8A8C9B64EDFA3F30AEB2B3BEE8CD0167BEBD924246C96DCF46A2161
A4D9D789F7E3D0FD616DE225F6FD2859BC60799BEAB5EB8D023E0B3E4389E303
DF75E3601274C24B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 119 /w put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 10{/.notdef}rp 
/N 18{/.notdef}rp /a /b /c /d /e /f 
/g /h /i 2{/.notdef}rp /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /x 
/y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
242.28 20.0265 mo
(w)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
242.28 20.0265 mo
(w) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
246.949 20.0265 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
246.949 20.0265 mo
(e) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
250.449 20.0265 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
250.449 20.0265 mo
(e) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
253.949 20.0265 mo
(n)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
253.949 20.0265 mo
(n) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
257.841 20.0265 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
257.841 20.0265 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
259.976 20.0265 mo
(t)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
259.976 20.0265 mo
(t) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
262.307 20.0265 mo
(w)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
262.307 20.0265 mo
(w) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
266.976 20.0265 mo
(o)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
266.976 20.0265 mo
(o) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
270.476 20.0265 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
270.476 20.0265 mo
( ) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
272.611 20.0265 mo
(s)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
272.611 20.0265 mo
(s) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
275.719 20.0265 mo
(u)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
275.719 20.0265 mo
(u) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
279.611 20.0265 mo
(r)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
279.611 20.0265 mo
(r) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
281.942 20.0265 mo
(f)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
281.942 20.0265 mo
(f) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
284.273 20.0265 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
284.273 20.0265 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
287.773 20.0265 mo
(c)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
287.773 20.0265 mo
(c) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
291.273 20.0265 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
291.273 20.0265 mo
(e) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
294.773 20.0265 mo
(s)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
294.773 20.0265 mo
(s) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B7D8BE600025B2C2175FEA9AF7FC20A65BA49439E034D52C1F
F9263C8714002E1C25F2F48F050CAB6B94CED4718BB7E54DD898D2C0CB952E3F
3DCEDE6E4CA6921EBEA8D399363331BFF955C2CD3EA45720E041C38E25CF2A6F
5058CAC3EAF786C41EA791D317> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 83 /S put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one /two 16{/.notdef}rp /C 10{/.notdef}rp 
/N 4{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d 
/e /f /g /h /i 2{/.notdef}rp /l /m 
/n /o 2{/.notdef}rp /r /s /t /u /v 
/w /x /y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
286.4 48.3205 mo
(S)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
286.4 48.3205 mo
(S) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
290.677 48.3205 mo
(u)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
290.677 48.3205 mo
(u) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
294.569 48.3205 mo
(r)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
294.569 48.3205 mo
(r) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
296.9 48.3205 mo
(f)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
296.9 48.3205 mo
(f) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
299.231 48.3205 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
299.231 48.3205 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
302.731 48.3205 mo
(c)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
302.731 48.3205 mo
(c) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
306.231 48.3205 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
306.231 48.3205 mo
(e) false chp
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B83BB81FFC90B93821818FE0F3FE2A7390ABE078B86385
2329E9226C717C4E58BE78> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 44 /comma put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 4{/.notdef}rp /one /two 16{/.notdef}rp 
/C 10{/.notdef}rp /N 4{/.notdef}rp /S 13{/.notdef}rp /a /b 
/c /d /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o 2{/.notdef}rp /r /s /t 
/u /v /w /x /y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
309.731 48.3205 mo
(,)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
309.731 48.3205 mo
(,) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
311.866 48.3205 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
311.866 48.3205 mo
( ) false chp
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
314.005 48.3201 mo
(T)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
314.005 48.3201 mo
(T) false chp
.214 lw
@
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
318.175 50.3191 mo
(1)sh
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
318.175 50.3191 mo
(1) false chp
.143 lw
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
286.648 74.1185 mo
(S)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
286.648 74.1185 mo
(S) false chp
.2 lw
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
290.925 74.1185 mo
(u)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
290.925 74.1185 mo
(u) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
294.817 74.1185 mo
(r)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
294.817 74.1185 mo
(r) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
297.148 74.1185 mo
(f)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
297.148 74.1185 mo
(f) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
299.479 74.1185 mo
(a)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
299.479 74.1185 mo
(a) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
302.979 74.1185 mo
(c)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
302.979 74.1185 mo
(c) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
306.479 74.1185 mo
(e)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
306.479 74.1185 mo
(e) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
309.979 74.1185 mo
(,)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
309.979 74.1185 mo
(,) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
312.114 74.1185 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
312.114 74.1185 mo
( ) false chp
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
314.25 74.1182 mo
(T)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
314.25 74.1182 mo
(T) false chp
.214 lw
@
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
318.42 76.1182 mo
(2)sh
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
318.42 76.1182 mo
(2) false chp
.143 lw
@
.5 lw
221.556 128.869 mo
330.556 128.869 li
330.556 2.8681 li
221.556 2.8681 li
cp
330.556 128.869 mo
cp
222.056 24.8681 mo
330.056 24.8681 li
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
150.232 42.8685 mo
(T)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
150.232 42.8685 mo
(T) false chp
.214 lw
@
%%IncludeResource: font BFLGAB+Times-Italic
/ZNINMU+Times-Italic*1 
[34{/.notdef}rp /quotedbl 49{/.notdef}rp /T 28{/.notdef}rp /q /.notdef /s 
140{/.notdef}rp]
ZNINMU+Times-Italic nf
ZNINMU+Times-Italic*1 [5 0 0 -5 0 0 ]msf
154.402 44.8685 mo
(s)sh
ZNINMU+Times-Italic*1 [5 0 0 -5 0 0 ]msf
154.402 44.8685 mo
(s) false chp
.143 lw
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
156.347 42.8685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
156.347 42.8685 mo
( ) false chp
.2 lw
@
%ADOBeginSubsetFont: GAAAAA+TradeGothic AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ZNINMV+TradeGothic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/greater <1C60D8A8C9B7C3C9B5778CA731CAD16A384D4E61D577EC8915BA2D
0B84774F6E6693925ED26562832C2053A08F00EC4A5E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ZNINMV+TradeGothic /Encoding get
dup 62 /greater put
pop
%ADOEndSubsetFont
/ZNINMV+TradeGothic*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 4{/.notdef}rp /one /two 11{/.notdef}rp 
/greater 4{/.notdef}rp /C 10{/.notdef}rp /N 4{/.notdef}rp /S 13{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r 
/s /t /u /v /w /x /y 134{/.notdef}rp]
ZNINMV+TradeGothic nf
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
158.29 42.8685 mo
(>)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
158.29 42.8685 mo
(>) false chp
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
162.298 42.8685 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
162.298 42.8685 mo
( ) false chp
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
164.24 42.8685 mo
(T)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
164.24 42.8685 mo
(T) false chp
.214 lw
@
%ADOBeginSubsetFont: GAAAAA+Symbol Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /GAAAAA+Symbol def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.000999999 0 0 0.000999999 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 165 /infinity put
def
/UniqueID 42996 def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 0 673 688 487 500] def
/StdHW [92] def
/StdVW [85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/infinity <1C60D8A8C9B63C43FBA047770B13264748A0124B85BE41D8AE12F
B9B51FE6F1790375EC2AC68DAF33744A37C58DC0D65A88B40CF623B818D724E5
2DD7F352F6E817ED69D10D34A89C96005D3D8D6C0AF0474088EA32A447391945
CEA011571846FE8663EAC056149699104C931C0922C82D7B8C790323011E4A62
CE029A4574A4FA86C07789139771AFC24279415E7A092F4198A2D> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZNINMX+Symbol /GAAAAA+Symbol findfont ct_VMDictPut
/ZNINMX+Symbol*1 
[165{/.notdef}rp /infinity 90{/.notdef}rp]
ZNINMX+Symbol nf
ZNINMX+Symbol*1 [5.5 0 0 -5.5 0 0 ]msf
168.411 44.8685 mo
(\245)sh
ZNINMX+Symbol*1 [5.5 0 0 -5.5 0 0 ]msf
168.411 44.8685 mo
(\245) false chp
.157 lw
@
209.542 107.368 mo
125.57 107.368 li
125.57 107.368 124.986 111.369 126.736 112.744 cv
127.891 113.712 130.999 113.619 133.32 113.619 cv
137.819 113.619 197.292 113.619 201.792 113.619 cv
204.114 113.619 207.221 113.712 208.376 112.744 cv
210.126 111.369 209.542 107.368 209.542 107.368 cv
false sop
1 /0 /CSD get_res sepcs
0 sep
f
125.57 107.368 mo
125.57 107.368 125.037 111.207 126.82 112.533 cv
127.974 113.464 131.007 113.38 133.32 113.38 cv
137.815 113.38 197.296 113.38 201.792 113.38 cv
204.105 113.38 207.138 113.464 208.292 112.533 cv
210.076 111.207 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.029 sep
f
125.57 107.368 mo
125.57 107.368 125.086 111.042 126.904 112.322 cv
128.057 113.216 131.016 113.142 133.32 113.142 cv
137.812 113.142 197.3 113.142 201.792 113.142 cv
204.096 113.142 207.056 113.216 208.209 112.322 cv
210.026 111.042 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.057 sep
f
125.57 107.368 mo
125.57 107.368 125.137 110.88 126.988 112.112 cv
128.139 112.968 131.025 112.904 133.32 112.904 cv
137.807 112.904 197.305 112.904 201.792 112.904 cv
204.087 112.904 206.973 112.968 208.124 112.112 cv
209.976 110.88 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.086 sep
f
125.57 107.368 mo
125.57 107.368 125.186 110.718 127.071 111.902 cv
128.222 112.718 131.034 112.666 133.32 112.666 cv
137.803 112.666 197.309 112.666 201.792 112.666 cv
204.078 112.666 206.89 112.718 208.041 111.902 cv
209.925 110.718 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.114 sep
f
125.57 107.368 mo
125.57 107.368 125.237 110.556 127.155 111.691 cv
128.305 112.47 131.043 112.428 133.32 112.428 cv
137.799 112.428 197.314 112.428 201.792 112.428 cv
204.069 112.428 206.808 112.47 207.957 111.691 cv
209.875 110.556 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.143 sep
f
125.57 107.368 mo
125.57 107.368 125.287 110.392 127.239 111.48 cv
128.387 112.222 131.052 112.189 133.32 112.189 cv
137.795 112.189 197.318 112.189 201.792 112.189 cv
204.06 112.189 206.725 112.222 207.874 111.48 cv
209.826 110.392 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.171 sep
f
125.57 107.368 mo
125.57 107.368 125.337 110.23 127.322 111.27 cv
128.47 111.974 131.061 111.953 133.32 111.953 cv
137.791 111.953 197.322 111.953 201.792 111.953 cv
204.051 111.953 206.642 111.974 207.79 111.27 cv
209.775 110.23 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.2 sep
f
125.57 107.368 mo
125.57 107.368 125.387 110.068 127.406 111.06 cv
128.553 111.724 131.07 111.714 133.32 111.714 cv
137.787 111.714 197.326 111.714 201.792 111.714 cv
204.042 111.714 206.56 111.724 207.707 111.06 cv
209.725 110.068 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.229 sep
f
125.57 107.368 mo
125.57 107.368 125.437 109.904 127.49 110.849 cv
128.636 111.476 131.079 111.476 133.32 111.476 cv
137.783 111.476 197.329 111.476 201.792 111.476 cv
204.033 111.476 206.476 111.476 207.622 110.849 cv
209.675 109.904 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.257 sep
f
125.57 107.368 mo
125.57 107.368 125.487 109.742 127.573 110.638 cv
128.718 111.228 131.088 111.238 133.32 111.238 cv
137.778 111.238 197.334 111.238 201.792 111.238 cv
204.024 111.238 206.394 111.228 207.538 110.638 cv
209.624 109.742 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.286 sep
f
125.57 107.368 mo
125.57 107.368 125.537 109.579 127.657 110.428 cv
128.801 110.98 131.097 110.999 133.32 110.999 cv
137.774 110.999 197.337 110.999 201.792 110.999 cv
204.015 110.999 206.312 110.98 207.455 110.428 cv
209.576 109.579 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.314 sep
f
125.57 107.368 mo
125.57 107.368 125.587 109.417 127.741 110.218 cv
128.884 110.73 131.106 110.761 133.32 110.761 cv
137.77 110.761 197.342 110.761 201.792 110.761 cv
204.006 110.761 206.228 110.73 207.371 110.218 cv
209.525 109.417 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.343 sep
f
125.57 107.368 mo
125.57 107.368 125.637 109.253 127.824 110.007 cv
128.966 110.482 131.115 110.523 133.32 110.523 cv
137.766 110.523 197.346 110.523 201.792 110.523 cv
203.997 110.523 206.146 110.482 207.288 110.007 cv
209.475 109.253 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.371 sep
f
125.57 107.368 mo
125.57 107.368 125.687 109.091 127.908 109.796 cv
129.049 110.234 131.124 110.285 133.32 110.285 cv
137.762 110.285 197.35 110.285 201.792 110.285 cv
203.988 110.285 206.063 110.234 207.204 109.796 cv
209.425 109.091 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.4 sep
f
125.57 107.368 mo
125.57 107.368 125.737 108.929 127.992 109.586 cv
129.132 109.986 131.133 110.046 133.32 110.046 cv
137.758 110.046 197.355 110.046 201.792 110.046 cv
203.979 110.046 205.98 109.986 207.121 109.586 cv
209.374 108.929 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.429 sep
f
125.57 107.368 mo
125.57 107.368 125.788 108.766 128.075 109.375 cv
129.215 109.736 131.142 109.808 133.32 109.808 cv
137.754 109.808 197.359 109.808 201.792 109.808 cv
203.97 109.808 205.898 109.736 207.037 109.375 cv
209.325 108.766 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.457 sep
f
125.57 107.368 mo
125.57 107.368 125.837 108.603 128.159 109.165 cv
129.297 109.488 131.151 109.57 133.32 109.57 cv
137.749 109.57 197.363 109.57 201.792 109.57 cv
203.961 109.57 205.815 109.488 206.953 109.165 cv
209.275 108.603 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.486 sep
f
125.57 107.368 mo
125.57 107.368 125.888 108.441 128.243 108.954 cv
129.38 109.24 131.16 109.332 133.32 109.332 cv
137.746 109.332 197.367 109.332 201.792 109.332 cv
203.953 109.332 205.732 109.24 206.87 108.954 cv
209.224 108.441 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.514 sep
f
125.57 107.368 mo
125.57 107.368 125.938 108.279 128.326 108.744 cv
129.463 108.991 131.169 109.095 133.32 109.095 cv
137.742 109.095 197.371 109.095 201.792 109.095 cv
203.943 109.095 205.65 108.991 206.787 108.744 cv
209.175 108.279 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.543 sep
f
125.57 107.368 mo
125.57 107.368 125.988 108.116 128.41 108.533 cv
129.545 108.742 131.178 108.857 133.32 108.857 cv
137.737 108.857 197.374 108.857 201.792 108.857 cv
203.935 108.857 205.567 108.742 206.703 108.533 cv
209.125 108.116 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.571 sep
f
125.57 107.368 mo
125.57 107.368 126.038 107.953 128.494 108.324 cv
129.628 108.494 131.187 108.619 133.32 108.619 cv
137.733 108.619 197.378 108.619 201.792 108.619 cv
203.925 108.619 205.484 108.494 206.619 108.324 cv
209.075 107.953 209.542 107.368 209.542 107.368 cv
125.57 107.368 li
1 /0 /CSD get_res sepcs
.6 sep
f
.5 lw
209.556 107.368 mo
125.556 107.368 li
true sop
1 /1 /CSD get_res sepcs
1 sep
@
305.784 84.6271 mo
250.079 110.853 li
250.079 110.853 251.247 114.722 253.416 115.224 cv
254.874 115.613 257.646 114.207 259.749 113.222 cv
263.823 111.312 297.345 95.4851 301.419 93.5751 cv
303.521 92.5901 306.374 91.3571 307.008 89.9891 cv
308.009 88.0012 305.784 84.6271 305.784 84.6271 cv
false sop
1 /0 /CSD get_res sepcs
0 sep
f
250.079 110.853 mo
250.079 110.853 251.224 114.553 253.403 114.998 cv
254.843 115.353 257.554 113.988 259.648 113.007 cv
263.718 111.099 297.246 95.2671 301.318 93.3591 cv
303.412 92.3781 306.195 91.1671 306.843 89.8341 cv
307.895 87.8741 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.014 sep
f
250.079 110.853 mo
250.079 110.853 251.201 114.384 253.389 114.771 cv
254.812 115.091 257.46 113.769 259.546 112.791 cv
263.613 110.884 297.15 95.0511 301.216 93.1441 cv
303.302 92.1661 306.013 90.9771 306.678 89.6781 cv
307.78 87.7491 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.029 sep
f
250.079 110.853 mo
250.079 110.853 251.177 114.216 253.375 114.546 cv
254.782 114.831 257.368 113.549 259.445 112.576 cv
263.508 110.67 297.053 94.8331 301.116 92.9282 cv
303.193 91.9542 305.834 90.7872 306.513 89.5231 cv
307.666 87.6232 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.043 sep
f
250.079 110.853 mo
250.079 110.853 251.154 114.048 253.362 114.32 cv
254.751 114.572 257.275 113.329 259.344 112.359 cv
263.404 110.457 296.955 94.6161 301.015 92.7131 cv
303.084 91.7432 305.653 90.5972 306.347 89.3682 cv
307.552 87.4971 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.057 sep
f
250.079 110.853 mo
250.079 110.853 251.129 113.88 253.349 114.093 cv
254.72 114.312 257.182 113.111 259.244 112.144 cv
263.299 110.244 296.858 94.3981 300.913 92.4971 cv
302.975 91.5311 305.472 90.4071 306.183 89.2131 cv
307.437 87.3711 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.071 sep
f
250.079 110.853 mo
250.079 110.853 251.106 113.711 253.335 113.867 cv
254.69 114.052 257.089 112.89 259.142 111.928 cv
263.195 110.029 296.761 94.1811 300.812 92.2821 cv
302.866 91.3191 305.292 90.2171 306.017 89.0591 cv
307.324 87.2451 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.086 sep
f
250.079 110.853 mo
250.079 110.853 251.082 113.542 253.322 113.641 cv
254.66 113.791 256.996 112.671 259.041 111.712 cv
263.089 109.816 296.663 93.9641 300.711 92.0661 cv
302.756 91.1071 305.112 90.0271 305.853 88.9031 cv
307.209 87.1191 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.1 sep
f
250.079 110.853 mo
250.079 110.853 251.058 113.375 253.308 113.416 cv
254.628 113.531 256.904 112.453 258.94 111.497 cv
262.984 109.601 296.566 93.7461 300.611 91.8501 cv
302.648 90.8961 304.931 89.8371 305.687 88.7481 cv
307.094 86.9931 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.114 sep
f
250.079 110.853 mo
250.079 110.853 251.035 113.204 253.294 113.189 cv
254.598 113.271 256.81 112.233 258.839 111.283 cv
262.88 109.388 296.468 93.5291 300.509 91.6351 cv
302.538 90.6841 304.75 89.6471 305.523 88.5931 cv
306.98 86.8671 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.129 sep
f
250.079 110.853 mo
250.079 110.853 251.011 113.037 253.281 112.962 cv
254.568 113.011 256.717 112.013 258.738 111.066 cv
262.775 109.173 296.371 93.3111 300.409 91.4191 cv
302.429 90.4721 304.571 89.4571 305.357 88.4381 cv
306.866 86.7411 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.143 sep
f
250.079 110.853 mo
250.079 110.853 250.988 112.869 253.267 112.737 cv
254.537 112.75 256.624 111.794 258.637 110.851 cv
262.67 108.96 296.274 93.0951 300.307 91.2041 cv
302.32 90.2611 304.39 89.2671 305.192 88.2831 cv
306.751 86.6151 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.157 sep
f
250.079 110.853 mo
250.079 110.853 250.964 112.701 253.253 112.511 cv
254.506 112.491 256.531 111.576 258.536 110.634 cv
262.566 108.746 296.177 92.8771 300.207 90.9881 cv
302.21 90.0491 304.21 89.0781 305.027 88.1281 cv
306.637 86.4891 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.171 sep
f
250.079 110.853 mo
250.079 110.853 250.94 112.531 253.24 112.285 cv
254.476 112.23 256.439 111.355 258.435 110.419 cv
262.46 108.533 296.079 92.6601 300.105 90.7721 cv
302.101 89.8371 304.029 88.8881 304.862 87.9731 cv
306.523 86.3631 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.186 sep
f
250.079 110.853 mo
250.079 110.853 250.917 112.363 253.226 112.058 cv
254.445 111.97 256.345 111.136 258.333 110.204 cv
262.356 108.318 295.982 92.4421 300.004 90.5571 cv
301.992 89.6251 303.849 88.6981 304.697 87.8171 cv
306.409 86.2371 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.2 sep
f
250.079 110.853 mo
250.079 110.853 250.892 112.195 253.212 111.833 cv
254.414 111.71 256.252 110.917 258.233 109.988 cv
262.251 108.105 295.884 92.2251 299.903 90.3421 cv
301.883 89.4131 303.668 88.5081 304.532 87.6631 cv
306.294 86.1111 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.214 sep
f
250.079 110.853 mo
250.079 110.853 250.869 112.027 253.199 111.607 cv
254.384 111.449 256.16 110.697 258.132 109.773 cv
262.146 107.891 295.788 92.0081 299.802 90.1261 cv
301.774 89.2021 303.488 88.3181 304.367 87.5071 cv
306.179 85.9851 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.229 sep
f
250.079 110.853 mo
250.079 110.853 250.845 111.857 253.185 111.38 cv
254.353 111.189 256.067 110.478 258.031 109.557 cv
262.041 107.677 295.69 91.7911 299.701 89.9102 cv
301.665 88.9902 303.308 88.1282 304.201 87.3522 cv
306.065 85.8591 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.243 sep
f
250.079 110.853 mo
250.079 110.853 250.822 111.689 253.171 111.154 cv
254.323 110.929 255.974 110.259 257.929 109.341 cv
261.937 107.463 295.592 91.5731 299.6 89.6951 cv
301.555 88.7781 303.127 87.9381 304.037 87.1971 cv
305.951 85.7321 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.257 sep
f
250.079 110.853 mo
250.079 110.853 250.798 111.521 253.158 110.928 cv
254.292 110.669 255.88 110.038 257.829 109.126 cv
261.832 107.249 295.496 91.3561 299.499 89.4791 cv
301.446 88.5661 302.947 87.7481 303.871 87.0421 cv
305.836 85.6071 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.271 sep
f
250.079 110.853 mo
250.079 110.853 250.774 111.351 253.144 110.703 cv
254.261 110.41 255.788 109.82 257.728 108.91 cv
261.727 107.035 295.398 91.1391 299.398 89.2641 cv
301.337 88.3541 302.766 87.5581 303.707 86.8871 cv
305.722 85.4811 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.286 sep
f
250.079 110.853 mo
250.079 110.853 250.75 111.183 253.13 110.476 cv
254.231 110.149 255.695 109.601 257.626 108.695 cv
261.622 106.821 295.3 90.9211 299.296 89.0481 cv
301.228 88.1421 302.585 87.3681 303.541 86.7321 cv
305.608 85.3551 305.784 84.6271 305.784 84.6271 cv
250.079 110.853 li
1 /0 /CSD get_res sepcs
.3 sep
f
305.795 84.6211 mo
250.066 110.859 li
true sop
1 /1 /CSD get_res sepcs
1 sep
@
278.165 38.7341 mo
235.757 81.1411 li
235.757 81.1411 232.517 78.7261 232.783 76.5161 cv
232.913 75.0141 235.177 72.8842 236.819 71.2421 cv
240 68.0601 265.083 42.9761 268.266 39.7951 cv
269.908 38.1531 272.038 35.8892 273.539 35.7592 cv
275.749 35.4931 278.165 38.7341 278.165 38.7341 cv
false sop
1 /0 /CSD get_res sepcs
0 sep
f
235.757 81.1411 mo
235.757 81.1411 232.667 78.8051 232.99 76.6051 cv
233.147 75.1311 235.351 73.0451 236.987 71.4101 cv
240.165 68.2311 265.254 43.1421 268.434 39.9641 cv
270.07 38.3281 272.154 36.1241 273.629 35.9671 cv
275.829 35.6431 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.029 sep
f
235.757 81.1411 mo
235.757 81.1411 232.818 78.8851 233.199 76.6951 cv
233.381 75.2481 235.527 73.2081 237.156 71.5791 cv
240.332 68.4031 265.426 43.3081 268.602 40.1321 cv
270.231 38.5031 272.271 36.3571 273.718 36.1751 cv
275.909 35.7941 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.057 sep
f
235.757 81.1411 mo
235.757 81.1411 232.968 78.9641 233.406 76.7851 cv
233.615 75.3661 235.701 73.3701 237.324 71.7471 cv
240.496 68.5741 265.597 43.4731 268.771 40.3001 cv
270.393 38.6781 272.388 36.5921 273.808 36.3821 cv
275.988 35.9451 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.086 sep
f
235.757 81.1411 mo
235.757 81.1411 233.119 79.0441 233.615 76.8741 cv
233.849 75.4821 235.876 73.5311 237.492 71.9161 cv
240.662 68.7451 265.769 43.6391 268.939 40.4691 cv
270.555 38.8531 272.506 36.8261 273.898 36.5911 cv
276.067 36.0951 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.114 sep
f
235.757 81.1411 mo
235.757 81.1411 233.269 79.1231 233.822 76.9641 cv
234.084 75.6001 236.05 73.6931 237.661 72.0841 cv
240.828 68.9161 265.94 43.8041 269.108 40.6371 cv
270.717 39.0271 272.624 37.0601 273.988 36.7991 cv
276.147 36.2451 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.143 sep
f
235.757 81.1411 mo
235.757 81.1411 233.419 79.2031 234.031 77.0541 cv
234.318 75.7171 236.225 73.8551 237.829 72.2521 cv
240.994 69.0881 266.112 43.9701 269.276 40.8061 cv
270.879 39.2021 272.741 37.2951 274.078 37.0071 cv
276.226 36.3961 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.171 sep
f
235.757 81.1411 mo
235.757 81.1411 233.57 79.2831 234.238 77.1441 cv
234.552 75.8341 236.4 74.0181 237.997 72.4201 cv
241.159 69.2591 266.283 44.1351 269.444 40.9741 cv
271.041 39.3761 272.858 37.5291 274.167 37.2151 cv
276.306 36.5461 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.2 sep
f
235.757 81.1411 mo
235.757 81.1411 233.72 79.3621 234.447 77.2331 cv
234.787 75.9521 236.575 74.1801 238.165 72.5891 cv
241.324 69.4311 266.454 44.3011 269.613 41.1421 cv
271.204 39.5511 272.975 37.7631 274.257 37.4231 cv
276.386 36.6971 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.229 sep
f
235.757 81.1411 mo
235.757 81.1411 233.871 79.4421 234.654 77.3231 cv
235.021 76.0691 236.749 74.3421 238.334 72.7571 cv
241.49 69.6011 266.624 44.4661 269.781 41.3111 cv
271.366 39.7261 273.092 37.9971 274.346 37.6311 cv
276.465 36.8471 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.257 sep
f
235.757 81.1411 mo
235.757 81.1411 234.021 79.5211 234.863 77.4131 cv
235.255 76.1871 236.924 74.5031 238.502 72.9261 cv
241.655 69.7731 266.796 44.6311 269.95 41.4781 cv
271.527 39.9001 273.21 38.2321 274.436 37.8391 cv
276.545 36.9971 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.286 sep
f
235.757 81.1411 mo
235.757 81.1411 234.171 79.6011 235.07 77.5021 cv
235.49 76.3031 237.099 74.6651 238.67 73.0941 cv
241.82 69.9441 266.967 44.7971 270.118 41.6471 cv
271.689 40.0751 273.328 38.4661 274.526 38.0471 cv
276.624 37.1471 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.314 sep
f
235.757 81.1411 mo
235.757 81.1411 234.322 79.6811 235.279 77.5921 cv
235.724 76.4201 237.273 74.8281 238.839 73.2631 cv
241.986 70.1151 267.139 44.9621 270.286 41.8151 cv
271.851 40.2501 273.445 38.7001 274.616 38.2551 cv
276.704 37.2981 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.343 sep
f
235.757 81.1411 mo
235.757 81.1411 234.472 79.7601 235.486 77.6821 cv
235.959 76.5381 237.449 74.9901 239.007 73.4311 cv
242.152 70.2871 267.31 45.1281 270.454 41.9841 cv
272.013 40.4251 273.562 38.9351 274.705 38.4631 cv
276.784 37.4491 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.371 sep
f
235.757 81.1411 mo
235.757 81.1411 234.622 79.8401 235.695 77.7711 cv
236.193 76.6551 237.622 75.1511 239.175 73.5991 cv
242.317 70.4581 267.482 45.2931 270.622 42.1521 cv
272.175 40.5991 273.679 39.1691 274.795 38.6711 cv
276.863 37.5991 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.4 sep
f
235.757 81.1411 mo
235.757 81.1411 234.773 79.9191 235.902 77.8611 cv
236.426 76.7721 237.798 75.3131 239.343 73.7671 cv
242.482 70.6291 267.653 45.4591 270.792 42.3201 cv
272.337 40.7741 273.795 39.4031 274.884 38.8791 cv
276.943 37.7491 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.429 sep
f
235.757 81.1411 mo
235.757 81.1411 234.923 79.9991 236.111 77.9511 cv
236.661 76.8901 237.972 75.4751 239.512 73.9361 cv
242.648 70.8011 267.824 45.6241 270.959 42.4891 cv
272.5 40.9491 273.913 39.6371 274.974 39.0871 cv
277.023 37.8991 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.457 sep
f
235.757 81.1411 mo
235.757 81.1411 235.074 80.0791 236.318 78.0401 cv
236.895 77.0071 238.147 75.6381 239.681 74.1041 cv
242.813 70.9721 267.996 45.7901 271.127 42.6571 cv
272.662 41.1231 274.031 39.8721 275.064 39.2951 cv
277.102 38.0501 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.486 sep
f
235.757 81.1411 mo
235.757 81.1411 235.224 80.1581 236.527 78.1301 cv
237.129 77.1241 238.322 75.7991 239.849 74.2721 cv
242.978 71.1431 268.167 45.9551 271.295 42.8261 cv
272.824 41.2981 274.148 40.1051 275.154 39.5031 cv
277.181 38.2011 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.514 sep
f
235.757 81.1411 mo
235.757 81.1411 235.375 80.2381 236.734 78.2201 cv
237.364 77.2421 238.496 75.9611 240.017 74.4411 cv
243.144 71.3141 268.337 46.1201 271.464 42.9941 cv
272.986 41.4731 274.265 40.3401 275.244 39.7111 cv
277.261 38.3511 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.543 sep
f
235.757 81.1411 mo
235.757 81.1411 235.525 80.3171 236.943 78.3101 cv
237.597 77.3591 238.671 76.1241 240.185 74.6091 cv
243.31 71.4851 268.509 46.2861 271.633 43.1621 cv
273.148 41.6471 274.382 40.5741 275.334 39.9191 cv
277.341 38.5011 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.571 sep
f
235.757 81.1411 mo
235.757 81.1411 235.675 80.3971 237.15 78.3991 cv
237.831 77.4761 238.846 76.2861 240.354 74.7781 cv
243.475 71.6571 268.68 46.4511 271.801 43.3311 cv
273.309 41.8221 274.499 40.8091 275.422 40.1271 cv
277.42 38.6521 278.165 38.7341 278.165 38.7341 cv
235.757 81.1411 li
1 /0 /CSD get_res sepcs
.6 sep
f
278.175 38.7251 mo
235.747 81.1511 li
true sop
1 /1 /CSD get_res sepcs
1 sep
@
192.722 107.868 mo
193 107.868 193.222 107.644 193.222 107.368 cv
193.222 107.092 193 106.868 192.722 106.868 cv
192.447 106.868 192.222 107.092 192.222 107.368 cv
192.222 107.644 192.447 107.868 192.722 107.868 cv
cp
f
192.722 107.868 mo
193 107.868 193.222 107.644 193.222 107.368 cv
193.222 107.092 193 106.868 192.722 106.868 cv
192.447 106.868 192.222 107.092 192.222 107.368 cv
192.222 107.644 192.447 107.868 192.722 107.868 cv
cp
@
.25 lw
192.722 107.368 mo
192.722 97.7241 li
198.972 97.7241 li
@
274.347 42.2021 mo
274.624 42.2021 274.847 42.4261 274.847 42.7021 cv
274.847 42.9781 274.624 43.2021 274.347 43.2021 cv
274.072 43.2021 273.847 42.9781 273.847 42.7021 cv
273.847 42.4261 274.072 42.2021 274.347 42.2021 cv
cp
f
.5 lw
274.347 42.2021 mo
274.624 42.2021 274.847 42.4261 274.847 42.7021 cv
274.847 42.9781 274.624 43.2021 274.347 43.2021 cv
274.072 43.2021 273.847 42.9781 273.847 42.7021 cv
273.847 42.4261 274.072 42.2021 274.347 42.2021 cv
cp
@
.25 lw
274.347 42.7021 mo
277.181 45.8681 li
283.431 45.8681 li
@
300.41 87.4721 mo
300.605 87.2761 300.605 86.9601 300.41 86.7651 cv
300.214 86.5701 299.898 86.5701 299.703 86.7651 cv
299.507 86.9601 299.507 87.2761 299.703 87.4721 cv
299.898 87.6671 300.214 87.6671 300.41 87.4721 cv
cp
f
.5 lw
300.41 87.4721 mo
300.605 87.2761 300.605 86.9601 300.41 86.7651 cv
300.214 86.5701 299.898 86.5701 299.703 86.7651 cv
299.507 86.9601 299.507 87.2761 299.703 87.4721 cv
299.898 87.6671 300.214 87.6671 300.41 87.4721 cv
cp
@
.25 lw
299.994 87.1811 mo
299.994 75.6811 li
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
199.973 100.224 mo
(T)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
199.973 100.224 mo
(T) false chp
.214 lw
@
ZNINMU+Times-Italic*1 [5 0 0 -5 0 0 ]msf
204.143 102.224 mo
(s)sh
ZNINMU+Times-Italic*1 [5 0 0 -5 0 0 ]msf
204.143 102.224 mo
(s) false chp
.143 lw
@
.75 lw
125.556 72.8681 mo
139.956 72.8681 li
@
142.556 72.8681 mo
138.236 74.3681 li
138.956 72.8681 li
138.236 71.3681 li
142.556 72.8681 li
cp
f
.5 lw
142.556 72.8681 mo
138.236 74.3681 li
138.956 72.8681 li
138.236 71.3681 li
142.556 72.8681 li
cp
@
.75 lw
125.556 81.7431 mo
139.956 81.7431 li
@
142.556 81.7431 mo
138.236 83.2431 li
138.956 81.7431 li
138.236 80.2431 li
142.556 81.7431 li
cp
f
.5 lw
142.556 81.7431 mo
138.236 83.2431 li
138.956 81.7431 li
138.236 80.2431 li
142.556 81.7431 li
cp
@
.75 lw
125.556 90.6181 mo
139.956 90.6181 li
@
142.556 90.6181 mo
138.236 92.1181 li
138.956 90.6181 li
138.236 89.1181 li
142.556 90.6181 li
cp
f
.5 lw
142.556 90.6181 mo
138.236 92.1181 li
138.956 90.6181 li
138.236 89.1181 li
142.556 90.6181 li
cp
@
.75 lw
125.556 99.4931 mo
139.956 99.4931 li
@
142.556 99.4931 mo
138.236 100.993 li
138.956 99.4931 li
138.236 97.9931 li
142.556 99.4931 li
cp
f
.5 lw
142.556 99.4931 mo
138.236 100.993 li
138.956 99.4931 li
138.236 97.9931 li
142.556 99.4931 li
cp
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
239.432 83.8685 mo
(q)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
239.432 83.8685 mo
(q) false chp
.214 lw
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
243.182 83.8685 mo
(")sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
243.182 83.8685 mo
(") false chp
@
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
243.707 85.8685 mo
(1)sh
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
243.707 85.8685 mo
(1) false chp
.143 lw
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
244.432 98.8685 mo
(q)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
244.432 98.8685 mo
(q) false chp
.214 lw
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
248.182 98.8685 mo
(")sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
248.182 98.8685 mo
(") false chp
@
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
248.707 100.868 mo
(2)sh
ZNINMV+TradeGothic*1 [5 0 0 -5 0 0 ]msf
248.707 100.868 mo
(2) false chp
.143 lw
@
146.419 49.2161 mo
157.347 49.6342 152.143 50.4691 160.469 50.6781 cv
160.989 50.6781 168.794 50.2601 172.437 50.8871 cv
178.673 51.9601 176.079 53.8121 179.202 55.9011 cv
180.763 56.9451 179.912 58.1561 179.39 58.9921 cv
177.83 60.4541 179.202 61.5411 178.162 63.2131 cv
177.121 64.2571 175.122 65.6321 174.081 66.4681 cv
172.001 67.5131 168.752 66.8521 166.192 67.6001 cv
160.469 69.2711 156.31 67.4121 150.582 67.8091 cv
146.791 68.0711 144.294 68.2151 139.654 68.2261 cv
132.025 68.2462 132.405 67.9182 128.727 66.5551 cv
126.309 65.6591 119.36 65.7202 117.799 63.8391 cv
116.759 62.5861 116.759 61.1241 117.799 59.6621 cv
117.799 59.4531 118.152 58.5562 118.152 58.3471 cv
120.234 56.8851 116.759 56.9451 118.32 55.4832 cv
119.36 54.4381 121.753 52.5211 124.874 52.1031 cv
127.477 51.4761 130.288 50.4691 132.369 50.0521 cv
136.012 49.4241 143.817 51.0961 146.419 49.2161 cv
false sop
1 /0 /CSD get_res sepcs
.25 sep
f
.5 lw
146.419 49.2161 mo
157.347 49.6342 152.143 50.4691 160.469 50.6781 cv
160.989 50.6781 168.794 50.2601 172.437 50.8871 cv
178.673 51.9601 176.079 53.8121 179.202 55.9011 cv
180.763 56.9451 179.912 58.1561 179.39 58.9921 cv
177.83 60.4541 179.202 61.5411 178.162 63.2131 cv
177.121 64.2571 175.122 65.6321 174.081 66.4681 cv
172.001 67.5131 168.752 66.8521 166.192 67.6001 cv
160.469 69.2711 156.31 67.4121 150.582 67.8091 cv
146.791 68.0711 144.294 68.2151 139.654 68.2261 cv
132.025 68.2462 132.405 67.9182 128.727 66.5551 cv
126.309 65.6591 119.36 65.7202 117.799 63.8391 cv
116.759 62.5861 116.759 61.1241 117.799 59.6621 cv
117.799 59.4531 118.152 58.5562 118.152 58.3471 cv
120.234 56.8851 116.759 56.9451 118.32 55.4832 cv
119.36 54.4381 121.753 52.5211 124.874 52.1031 cv
127.477 51.4761 130.288 50.4691 132.369 50.0521 cv
136.012 49.4241 143.817 51.0961 146.419 49.2161 cv
cp
true sop
1 /0 /CSD get_res sepcs
.25 sep
@
132.928 50.3571 mo
136.447 49.7511 143.989 51.3661 146.503 49.5491 cv
157.061 49.9531 152.034 50.7611 160.078 50.9631 cv
160.581 50.9631 168.122 50.5591 171.642 51.1641 cv
177.667 52.2011 175.162 53.9911 178.177 56.0091 cv
179.686 57.0181 178.788 58.1721 178.285 58.9791 cv
176.777 60.3921 178.177 61.4591 177.172 63.0741 cv
176.167 64.0831 174.189 65.3521 173.183 66.1591 cv
171.171 67.1691 168.081 66.5901 165.608 67.3121 cv
160.078 68.9271 156.059 67.1311 150.525 67.5141 cv
146.862 67.7691 144.45 67.9061 139.967 67.9181 cv
132.595 67.9371 132.962 67.6201 129.409 66.3031 cv
127.072 65.4371 120.358 65.4961 118.85 63.6791 cv
117.845 62.4681 117.845 61.0551 118.85 59.6421 cv
118.85 59.4401 119.221 58.6031 119.221 58.4021 cv
121.232 56.9891 117.845 57.0181 119.353 55.6051 cv
120.358 54.5961 122.724 52.8081 125.74 52.4041 cv
128.255 51.7981 130.917 50.7611 132.928 50.3571 cv
false sop
1 /0 /CSD get_res sepcs
.238 sep
f
133.486 50.6631 mo
136.883 50.0781 144.161 51.6371 146.587 49.8841 cv
156.776 50.2731 151.924 51.0521 159.687 51.2471 cv
160.172 51.2471 167.451 50.8571 170.847 51.4411 cv
176.662 52.4421 174.244 54.1691 177.154 56.1171 cv
178.61 57.0911 177.664 58.1871 177.179 58.9671 cv
175.724 60.3301 177.154 61.3761 176.184 62.9351 cv
175.213 63.9081 173.254 65.0721 172.284 65.8511 cv
170.343 66.8251 167.412 66.3281 165.024 67.0251 cv
159.687 68.5831 155.809 66.8491 150.468 67.2201 cv
146.934 67.4651 144.606 67.5991 140.279 67.6091 cv
133.165 67.6281 133.52 67.3221 130.09 66.0511 cv
127.835 65.2161 121.356 65.2721 119.901 63.5191 cv
118.931 62.3501 118.931 60.9861 119.901 59.6231 cv
119.901 59.4281 120.289 58.6511 120.289 58.4571 cv
122.23 57.0941 118.931 57.0911 120.386 55.7271 cv
121.356 54.7531 123.695 53.0951 126.606 52.7051 cv
129.032 52.1201 131.545 51.0521 133.486 50.6631 cv
1 /0 /CSD get_res sepcs
.227 sep
f
134.045 50.9681 mo
137.318 50.4052 144.332 51.9072 146.67 50.2172 cv
156.49 50.5931 151.814 51.3441 159.296 51.5311 cv
159.764 51.5311 166.779 51.1561 170.051 51.7191 cv
175.656 52.6841 173.325 54.3481 176.13 56.2252 cv
177.533 57.1631 176.541 58.2031 176.074 58.9542 cv
174.671 60.2672 176.13 61.2932 175.195 62.7952 cv
174.259 63.7341 172.32 64.7921 171.384 65.5432 cv
169.514 66.4811 166.74 66.0662 164.44 66.7382 cv
159.296 68.2391 155.559 66.5681 150.412 66.9261 cv
147.005 67.1622 144.761 67.2911 140.592 67.3011 cv
133.736 67.3181 134.077 67.0241 130.772 65.7991 cv
128.598 64.9941 122.355 65.0482 120.952 63.3582 cv
120.017 62.2321 120.017 60.9182 120.952 59.6041 cv
120.952 59.4161 121.358 58.6992 121.358 58.5121 cv
123.228 57.1981 120.017 57.1631 121.419 55.8491 cv
122.355 54.9111 124.666 53.3812 127.472 53.0062 cv
129.81 52.4421 132.174 51.3441 134.045 50.9681 cv
1 /0 /CSD get_res sepcs
.215 sep
f
134.604 51.2741 mo
137.754 50.7321 144.504 52.1771 146.754 50.5511 cv
156.205 50.9131 151.705 51.6351 158.905 51.8161 cv
159.355 51.8161 166.106 51.4541 169.256 51.9961 cv
174.65 52.9241 172.407 54.5261 175.107 56.3331 cv
176.457 57.2361 175.418 58.2181 174.968 58.9411 cv
173.619 60.2061 175.107 61.2111 174.207 62.6561 cv
173.306 63.5591 171.385 64.5121 170.485 65.2341 cv
168.685 66.1381 166.07 65.8041 163.856 66.4501 cv
158.905 67.8961 155.308 66.2881 150.355 66.6311 cv
147.076 66.8581 144.917 66.9821 140.904 66.9921 cv
134.306 67.0101 134.634 66.7261 131.453 65.5471 cv
129.362 64.7721 123.352 64.8241 122.002 63.1981 cv
121.102 62.1141 121.102 60.8501 122.002 59.5851 cv
122.002 59.4041 122.427 58.7471 122.427 58.5671 cv
124.227 57.3021 121.102 57.2361 122.453 55.9721 cv
123.352 55.0681 125.637 53.6681 128.337 53.3071 cv
130.588 52.7651 132.803 51.6351 134.604 51.2741 cv
1 /0 /CSD get_res sepcs
.204 sep
f
135.162 51.5791 mo
138.189 51.0591 144.676 52.4471 146.838 50.8851 cv
155.92 51.2321 151.595 51.9271 158.515 52.1011 cv
158.947 52.1011 165.434 51.7531 168.46 52.2741 cv
173.644 53.1661 171.488 54.7041 174.083 56.4411 cv
175.38 57.3091 174.294 58.2341 173.863 58.9281 cv
172.566 60.1441 174.083 61.1281 173.218 62.5171 cv
172.353 63.3851 170.451 64.2311 169.585 64.9261 cv
167.856 65.7941 165.399 65.5421 163.271 66.1631 cv
158.515 67.5521 155.058 66.0071 150.298 66.3361 cv
147.147 66.5561 145.073 66.6741 141.216 66.6841 cv
134.876 66.7001 135.191 66.4281 132.135 65.2951 cv
130.125 64.5501 124.35 64.6001 123.053 63.0381 cv
122.188 61.9971 122.188 60.7811 123.053 59.5661 cv
123.053 59.3931 123.495 58.7951 123.495 58.6221 cv
125.225 57.4061 122.188 57.3091 123.486 56.0931 cv
124.35 55.2251 126.608 53.9551 129.203 53.6071 cv
131.366 53.0871 133.432 51.9271 135.162 51.5791 cv
1 /0 /CSD get_res sepcs
.192 sep
f
135.72 51.8851 mo
138.625 51.3851 144.848 52.7181 146.922 51.2191 cv
155.635 51.5521 151.486 52.2181 158.123 52.3851 cv
158.538 52.3851 164.762 52.0521 167.665 52.5511 cv
172.638 53.4061 170.57 54.8831 173.06 56.5491 cv
174.304 57.3811 173.171 58.2491 172.757 58.9152 cv
171.513 60.0822 173.06 61.0451 172.23 62.3781 cv
171.4 63.2111 169.516 63.9511 168.687 64.6181 cv
167.027 65.4501 164.728 65.2802 162.688 65.8762 cv
158.123 67.2081 154.808 65.7252 150.241 66.0421 cv
147.219 66.2521 145.228 66.3661 141.529 66.3762 cv
135.446 66.3911 135.748 66.1301 132.816 65.0432 cv
130.888 64.3292 125.349 64.3771 124.104 62.8781 cv
123.274 61.8781 123.274 60.7131 124.104 59.5471 cv
124.104 59.3801 124.563 58.8431 124.563 58.6771 cv
126.223 57.5111 123.274 57.3811 124.519 56.2151 cv
125.349 55.3821 127.58 54.2421 130.068 53.9091 cv
132.143 53.4091 134.061 52.2181 135.72 51.8851 cv
1 /0 /CSD get_res sepcs
.181 sep
f
136.279 52.1901 mo
139.06 51.7121 145.019 52.9881 147.006 51.5531 cv
155.349 51.8721 151.376 52.5101 157.733 52.6691 cv
158.13 52.6691 164.09 52.3501 166.871 52.8281 cv
171.632 53.6471 169.652 55.0611 172.036 56.6561 cv
173.227 57.4541 172.048 58.2651 171.652 58.9031 cv
170.459 60.0191 172.036 60.9631 171.241 62.2391 cv
170.447 63.0371 168.582 63.6711 167.787 64.3091 cv
166.198 65.1071 164.058 65.0181 162.103 65.5891 cv
157.733 66.8641 154.557 65.4451 150.184 65.7481 cv
147.29 65.9491 145.384 66.0581 141.841 66.0671 cv
136.017 66.0822 136.306 65.8322 133.498 64.7911 cv
131.651 64.1071 126.347 64.1531 125.155 62.7181 cv
124.36 61.7611 124.36 60.6441 125.155 59.5281 cv
125.155 59.3681 125.632 58.8911 125.632 58.7321 cv
127.221 57.6151 124.36 57.4541 125.552 56.3381 cv
126.347 55.5401 128.551 54.5291 130.934 54.2101 cv
132.921 53.7311 134.69 52.5101 136.279 52.1901 cv
1 /0 /CSD get_res sepcs
.169 sep
f
136.837 52.4961 mo
139.496 52.0391 145.191 53.2581 147.09 51.8861 cv
155.064 52.1911 151.267 52.8011 157.342 52.9531 cv
157.722 52.9531 163.418 52.6481 166.076 53.1051 cv
170.626 53.8891 168.734 55.2401 171.011 56.7651 cv
172.151 57.5261 170.925 58.2801 170.546 58.8911 cv
169.407 59.9581 171.011 60.8801 170.252 62.1001 cv
169.494 62.8621 167.648 63.3911 166.888 64.0011 cv
165.369 64.7631 163.387 64.7561 161.519 65.3011 cv
157.342 66.5211 154.307 65.1641 150.127 65.4541 cv
147.361 65.6451 145.539 65.7501 142.154 65.7591 cv
136.586 65.7731 136.863 65.5341 134.18 64.5391 cv
132.414 63.8851 127.345 63.9301 126.206 62.5571 cv
125.446 61.6431 125.446 60.5761 126.206 59.5091 cv
126.206 59.3561 126.701 58.9391 126.701 58.7871 cv
128.219 57.7201 125.446 57.5261 126.585 56.4601 cv
127.345 55.6971 129.522 54.8161 131.8 54.5111 cv
133.699 54.0531 135.319 52.8011 136.837 52.4961 cv
1 /0 /CSD get_res sepcs
.158 sep
f
137.396 52.8021 mo
139.931 52.3661 145.363 53.5281 147.174 52.2202 cv
154.778 52.5111 151.157 53.0931 156.951 53.2381 cv
157.313 53.2381 162.746 52.9471 165.28 53.3831 cv
169.621 54.1301 167.816 55.4182 169.988 56.8721 cv
171.074 57.5991 169.802 58.2961 169.441 58.8781 cv
168.354 59.8951 169.988 60.7981 169.263 61.9611 cv
168.54 62.6871 166.712 63.1111 165.989 63.6921 cv
164.54 64.4191 162.716 64.4941 160.935 65.0141 cv
156.951 66.1771 154.057 64.8831 150.071 65.1591 cv
147.433 65.3431 145.695 65.4421 142.466 65.4501 cv
137.157 65.4641 137.42 65.2351 134.861 64.2871 cv
133.178 63.6631 128.343 63.7051 127.256 62.3971 cv
126.532 61.5241 126.532 60.5071 127.256 59.4891 cv
127.256 59.3441 127.769 58.9871 127.769 58.8421 cv
129.218 57.8241 126.532 57.5991 127.619 56.5822 cv
128.343 55.8541 130.493 55.1021 132.666 54.8121 cv
134.476 54.3751 135.947 53.0931 137.396 52.8021 cv
1 /0 /CSD get_res sepcs
.146 sep
f
137.955 53.1071 mo
140.367 52.6921 145.535 53.7991 147.257 52.5541 cv
154.493 52.8301 151.048 53.3841 156.56 53.5221 cv
156.905 53.5221 162.074 53.2451 164.485 53.6601 cv
168.615 54.3711 166.898 55.5971 168.964 56.9801 cv
169.997 57.6721 168.679 58.3121 168.335 58.8651 cv
167.301 59.8341 168.964 60.7151 168.275 61.8221 cv
167.586 62.5141 165.778 62.8311 165.089 63.3841 cv
163.711 64.0761 162.045 64.2321 160.35 64.7261 cv
156.56 65.8331 153.806 64.6021 150.014 64.8651 cv
147.504 65.0391 145.851 65.1341 142.778 65.1421 cv
137.727 65.1541 137.978 64.9371 135.543 64.0351 cv
133.941 63.4411 129.341 63.4821 128.307 62.2371 cv
127.618 61.4071 127.618 60.4381 128.307 59.4701 cv
128.307 59.3321 128.837 59.0351 128.837 58.8961 cv
130.216 57.9281 127.618 57.6721 128.651 56.7041 cv
129.341 56.0121 131.464 55.3901 133.531 55.1121 cv
135.254 54.6971 136.576 53.3841 137.955 53.1071 cv
1 /0 /CSD get_res sepcs
.135 sep
f
138.513 53.4131 mo
140.802 53.0191 145.706 54.0691 147.341 52.8881 cv
154.208 53.1501 150.938 53.6751 156.169 53.8071 cv
156.496 53.8071 161.401 53.5441 163.69 53.9371 cv
167.609 54.6121 165.979 55.7751 167.941 57.0881 cv
168.921 57.7451 167.556 58.3281 167.229 58.8521 cv
166.248 59.7711 167.941 60.6321 167.287 61.6831 cv
166.632 62.3391 164.844 62.5511 164.19 63.0761 cv
162.882 63.7321 161.375 63.9701 159.766 64.4391 cv
156.169 65.4891 153.556 64.3211 149.957 64.5701 cv
147.575 64.7361 146.006 64.8261 143.091 64.8331 cv
138.297 64.8451 138.535 64.6401 136.225 63.7831 cv
134.705 63.2201 130.339 63.2581 129.358 62.0761 cv
128.704 61.2891 128.704 60.3701 129.358 59.4511 cv
129.358 59.3201 129.906 59.0821 129.906 58.9511 cv
131.214 58.0331 128.704 57.7451 129.685 56.8261 cv
130.339 56.1691 132.436 55.6761 134.397 55.4131 cv
136.032 55.0201 137.205 53.6751 138.513 53.4131 cv
1 /0 /CSD get_res sepcs
.123 sep
f
139.072 53.7181 mo
141.237 53.3461 145.878 54.3391 147.425 53.2222 cv
153.922 53.4702 150.829 53.9672 155.779 54.0911 cv
156.088 54.0911 160.729 53.8431 162.895 54.2151 cv
166.603 54.8531 165.061 55.9542 166.917 57.1962 cv
167.845 57.8171 166.433 58.3431 166.124 58.8401 cv
165.195 59.7092 166.917 60.5501 166.298 61.5441 cv
165.679 62.1641 163.91 62.2701 163.29 62.7681 cv
162.053 63.3892 160.704 63.7081 159.182 64.1522 cv
155.779 65.1451 153.306 64.0402 149.9 64.2761 cv
147.646 64.4332 146.162 64.5172 143.403 64.5241 cv
138.867 64.5372 139.093 64.3411 136.906 63.5311 cv
135.468 62.9982 131.337 63.0341 130.409 61.9161 cv
129.79 61.1711 129.79 60.3021 130.409 59.4321 cv
130.409 59.3082 130.975 59.1312 130.975 59.0071 cv
132.212 58.1371 129.79 57.8171 130.718 56.9481 cv
131.337 56.3271 133.407 55.9631 135.263 55.7151 cv
136.81 55.3422 137.834 53.9672 139.072 53.7181 cv
1 /0 /CSD get_res sepcs
.111 sep
f
147.509 53.5551 mo
153.637 53.7901 150.719 54.2581 155.388 54.3751 cv
155.68 54.3751 160.057 54.1411 162.1 54.4921 cv
165.597 55.0941 164.142 56.1321 165.894 57.3041 cv
166.769 57.8901 165.31 58.3581 165.018 58.8271 cv
164.142 59.6471 165.894 60.4671 165.31 61.4041 cv
164.726 61.9901 162.975 61.9901 162.391 62.4591 cv
161.224 63.0451 160.034 63.4451 158.598 63.8651 cv
155.388 64.8021 153.055 63.7591 149.844 63.9821 cv
147.718 64.1291 146.317 64.2101 143.716 64.2161 cv
139.437 64.2271 139.65 64.0431 137.587 63.2791 cv
136.231 62.7761 132.335 62.8101 131.459 61.7561 cv
130.876 61.0531 130.876 60.2331 131.459 59.4131 cv
131.459 59.2961 132.043 59.1781 132.043 59.0621 cv
133.21 58.2411 130.876 57.8901 131.751 57.0701 cv
132.335 56.4841 134.377 56.2491 136.128 56.0161 cv
137.587 55.6641 138.463 54.2581 139.63 54.0241 cv
141.673 53.6731 146.05 54.6091 147.509 53.5551 cv
1 /0 /CSD get_res sepcs
.1 sep
f
true sop
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: IAAAAA+TradeGothic-Bold Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /IAAAAA+TradeGothic-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Trade Gothic is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (TradeGothic-Bold) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 77 /M put
dup 100 /d put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 117 /u put
dup 118 /v put
def
/UniqueID 526871 def
/FontBBox {-167 -228 1000 971} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 0 722 732 544 554] def
/OtherBlues [286 292 394 400 -192 -192] def
/BlueScale 0.0562916 def
/StdVW [126] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/M <1C60D8A8C9B6FF86A27735051A7C4337D3377215788551E2FE7186632AA5
D3664178146A8BC696D863642818F6E451A56F8F8C3FD43A612190130287B500
90C2CE888451C62FB0705FF80222B3A112> |-
/d <1C60D8A8C9B7A73DCF0A3E8B2A5693A0310A38DD3D4C7B1E11B5FEF139E6
D7CAC07EC18AF5A72B42138618F0169C53AC19259E6D6E2DCD237F585ECAFF7B
23D74C65F4544458A79CF0CC5078B6EEF05A5A4BEA47955EB9FC5BC751F912D7
E0D53A66E978696B4802C79AAB29A59D4D8CC0E40F9D2048D9F828408E410FBD
77192DE2C92E09A47A4677FF861DF0B6343F4DD760C2320A116CFCB117B56D29> |-
/f <1C60D8A8C9B854D0A3953AFC50D4E4C79E0AF93AC0FF53AD4001BE2A18F8
9C956B38086988B61434E07DC4B06819B88C8C325043A53B0767C5EACB26CB67
BBA6BB38E6E2569D1815A904CDE0> |-
/g <1C60D8A8C9B7A73DB5B8010DD8E843B11E6007CEABE10DE3CF79B1C30C54
3A78B9334C835DBB89E3D295E5B295E51685D84EA228C634B565DFFC762C32D3
D98522D918394D0A95CC630174DB12C9E0349A574E8168E3C3CA59F0990E6F99
B6E047F87215FD54B59E1AFC9457FDDC76E5AF61EA4035BBA0552201D71BAC77
E02C16B9E75BF73155DA5C50944E2763169C13AD8EBCEFB9D6079D8F7F2BB10B
DDACD519BD70914B1FC2D32925DF13A5D4A9248ACDF35084DFDE6C175B15D129
F21A67165E2FE22F88019E57D3D89FCE3CAA89B0E105BDA3508521B7C3561633
82D6EF9925A522257F735831FA08715AD12CAA42F7CD7FEEBA5D70C91C4BDF9D
23001A10B1F9389AB5749DCF46EDD36E8551B0D20CAF8C7CD18C576AC5C6A969
AD01A3B8C9D7CF46467D226FAE3D> |-
/i <1C60D8A8C9B854D0A3953AFCD28EDDCD35CF59BEAE32ABDFB30304B7F143
02F70970FD8B3999E06C032224FF02620480F99FE92DF7824916D745B4D4D9> |-
/l <1C60D8A8C9B854D0A3953AFD522A430D0C7EF9BABF8821B16111E7141A92
859E> |-
/n <1C60D8A8C9B7A73DEE9439F975CB580C8CB3297961729D74F0E4C6F4070D
190B7C969C604C971D2AE383AF24C71385948E8261E6CE11BF6745D17BAA5CE5
9FA617B7DB8D20C19891A1DF261A3EFC501559FB34318C00> |-
/o <1C60D8A8C9B7A73DCF144D92A211CA2C0C69F7AF567B1EC8134EC2722504
5057FC48C3692958DC0A2A7963978B98A64DD2CEBE48C7BB6FF71C6211B22224
BAE4EEC697A94E347DD67C63B97CA37A3C02748DF5C2F9B6C0F664828D> |-
/u <1C60D8A8C9B7A73DCF0A3E8BFEC5F33CDE49F8657FB95EE1A63C04FBFFCA
9C22565FE7E3F1A90258D1B5EA4F67C29EA84E06C10065D5B00D8D3E48969A9F
7DA28C6D8A23A6A21DD68F20C38C75D0617EACFE9039B6D7358A28> |-
/v <1C60D8A8C9B77FE299176F639B39F1C0578D1CC5296DA2FF3EF1FB9CA77C
78954EC0D93BAB5B7E36452B573A9CF8AF4D44CE50> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZNINMY+TradeGothic-Bold /IAAAAA+TradeGothic-Bold findfont ct_VMDictPut
/ZNINMY+TradeGothic-Bold*1 
[32{/.notdef}rp /space 44{/.notdef}rp /M 22{/.notdef}rp /d /.notdef /f 
/g /.notdef /i 2{/.notdef}rp /l /.notdef /n /o 
5{/.notdef}rp /u /v 137{/.notdef}rp]
ZNINMY+TradeGothic-Bold nf
ZNINMY+TradeGothic-Bold*1 [7 0 0 -7 0 0 ]msf
123.984 61.6185 mo
(Moving fluid)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
159.768 61.6182 mo
(,)sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
159.768 61.6182 mo
(,) false chp
.2 lw
@
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
161.903 61.6182 mo
( )sh
ZNINMV+TradeGothic*1 [7 0 0 -7 0 0 ]msf
161.903 61.6182 mo
( ) false chp
@
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
164.039 61.6182 mo
(T)sh
ZNINMU+Times-Italic*1 [7.5 0 0 -7.5 0 0 ]msf
164.039 61.6182 mo
(T) false chp
.214 lw
@
ZNINMX+Symbol*1 [5.5 0 0 -5.5 0 0 ]msf
168.208 63.6182 mo
(\245)sh
ZNINMX+Symbol*1 [5.5 0 0 -5.5 0 0 ]msf
168.208 63.6182 mo
(\245) false chp
.157 lw
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
] del_res
/ZNINMY+TradeGothic-Bold*1 uf
/ZNINMY+TradeGothic-Bold uf
/IAAAAA+TradeGothic-Bold uf
/ZNINMU+Times-Italic*1 uf
/ZNINMV+TradeGothic*1 uf
/ZNINMV+TradeGothic uf
/GAAAAA+TradeGothic uf
/ZNINMW+MinionPro-Bold*1 uf
/ZNINMW+MinionPro-Bold uf
/GAAAAA+MinionPro-Bold uf
/ZNINMX+Symbol*1 uf
/ZNINMX+Symbol uf
/GAAAAA+Symbol uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: font BFLGAB+Times-Italic
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: (PANTONE 193 CV)
%%CMYKCustomColor: 0 0.9098 0.6510 0.1137 (PANTONE 193 CV)
%%RGBCustomColor: 
%%EOF
